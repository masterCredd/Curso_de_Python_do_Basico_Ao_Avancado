{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Curso de Python do B\u00e1sico ao Avan\u00e7ado \ud83d\udc0d","text":"<p>Curso em andamento de produ\u00e7\u00e3o</p>"},{"location":"#mapa-do-curso","title":"Mapa do Curso \ud83d\uddfa\ufe0f","text":"<ul> <li>Introduction - Introdu\u00e7\u00e3o do Conte\u00fado</li> <li>Tools        - Ferramentas Usadas no Curso</li> <li>Tecnologias  - Tecnologias Usadas no Curso</li> <li>Conte\u00fado     - Conte\u00fado Ministrado no Curso</li> <li>Question\u00e1rio - Perguntas relacionadas ao Conte\u00fado do Curso</li> </ul>"},{"location":"configuracoes/","title":"Configurar o ambiente do python na ultima vers\u00e3o","text":""},{"location":"configuracoes/#configurar-o-ambiente-do-python-na-ultima-versao_1","title":"Configurar o ambiente do python na ultima vers\u00e3o","text":"<ul> <li> <p>Utilizando o terminal digite o seguinte   \ud83d\udcdd <code>comando:</code></p> <pre><code>docker pull python\n</code></pre> </li> <li> <p>Confirmar a vers\u00e3o instalada</p> <p>\ud83d\udcdd<code>comando:</code></p> <p><code>bash    python --version</code></p> </li> </ul> <p>\u2714\ufe0f Resposta:</p> <pre><code>  Python 3.11.0 # ou superior\n</code></pre> <ul> <li>Instale o pacote a baixo:</li> </ul> <pre><code>  pip install -r requirements.txt\n</code></pre>"},{"location":"conteudo/","title":"Conte\u00fado do Curso de Python","text":""},{"location":"conteudo/#secao-1-informacoes-e-avisos-importantes-boas-vindas","title":"\ud83d\udd1c \u274e Se\u00e7\u00e3o 1 - Informa\u00e7\u00f5es e avisos importantes + Boas vindas","text":"<p>\u274e 1 - Informa\u00e7\u00f5es e avisos importantes + Boas vindas</p> <p>\u274e 2 - Assista antes de prosseguir com as aulas (atualizando 20/12/2022)</p>"},{"location":"conteudo/#secao-2-python-vs-code-preparando-meu-ambiente-de-desenvolvimento","title":"\ud83d\udd1c \u274e Se\u00e7\u00e3o 2 - Python + VS Code: Preparando meu ambiente de desenvolvimento","text":"<p>\u274e 3 - Introdu\u00e7\u00e3o a se\u00e7\u00e3o</p> <p>\u274e 4 - Ubuntu 22 - Instala\u00e7\u00e3o b\u00e1sica do Python e o VS Code</p> <pre><code>sudo apt update -y\nsudo apt upgrade -y\nsudo apt install git curl build-essential -y\nsudo apt install gcc make default-libmysql client-dev libssl-dev -y\nsudo apt install python3.10-full python3.10-dev -y\n\ncd Area de Trabalho\nmkdir projeto\ncd projeto\nls\npython --version\npython3 --version\npython3 -V\npython3 -m venv venv\nsource venv/bin/activate\npython -v\nwhich python\npython -m pip install pip --update\n# baixar o instalador do Vs Code no site da microsoft\nsudo dpkg -i nome do arquivo\nrm -E projeto\n</code></pre> <p>\u274e 5 - Ubuntu 22 - Instala\u00e7\u00e3o Completa do Python e do VS Code (<code>pyenv</code> e zsh)</p> <pre><code># Executar comandos a seguir para atualizar os pacotes\nsudo apt update -y\nsudo apt upgrade -y\n\n# S\u00f3 o Python\nsudo apt install python3.10-full python3.10-dev -y\n\n# Instalar pacotes a seguir\nsudo apt install git curl build-essential dkms perl wget -y\nsudo apt install gcc make default-libmysqlclient-dev libssl-dev -y\nsudo apt install -y zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev llvm \\\nlibncurses5-dev libncursesw5-dev \\\nxz-utils tk-dev libffi-dev liblzma-dev python3-openssl git\n\n# Pyenv\ncurl -L &lt;https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer&gt; | bash\n\n# Seguir instru\u00e7\u00f5es do Pyenv\n# Baixar e instalar VS Code: &lt;https://code.visualstudio.com/download&gt;\n# Abaixo tudo \u00e9 opcional\n# Instalar e configurar ZSH\nsudo apt install zsh -y\nchsh -s /bin/zsh\nzsh\n\n# Instalar Oh-my-zsh! -&gt; &lt;https://ohmyz.sh/&gt;\nsh -c \"$(curl -fsSL &lt;https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh&gt;)\"\n# Instalar Spaceship Prompt\n# &lt;https://github.com/spaceship-prompt/spaceship-prompt&gt;\ngit clone &lt;https://github.com/spaceship-prompt/spaceship-prompt.git&gt; \"$ZSH_CUSTOM/themes/spaceship-prompt\" --depth=1\nln -s \"$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme\" \"$ZSH_CUSTOM/themes/spaceship.zsh-theme\"\n# Mudar ~/.zshrc -&gt; ZSH_THEME=\"spaceship\"\n# Instalar Zsh Autosuggestions\n# &lt;https://github.com/zsh-users/zsh-autosuggestions&gt;\ngit clone &lt;https://github.com/zsh-users/zsh-autosuggestions&gt; ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n# Instalar Zsh Syntax Highlighting\n# &lt;https://github.com/zsh-users/zsh-syntax-highlighting&gt;\ngit clone &lt;https://github.com/zsh-users/zsh-syntax-highlighting.git&gt; ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n# Mudar plugins\n# plugins=(git zsh-autosuggestions zsh-syntax-highlighting)\n# Font optional (&lt;https://github.com/pdf/ubuntu-mono-powerline-ttf&gt;)\nmkdir -p ~/.fonts\ngit clone &lt;https://github.com/pdf/ubuntu-mono-powerline-ttf.git&gt; ~/.fonts/ubuntu-mono-powerline-ttf\nfc-cache -vf\n</code></pre> <p>\u274e 6 - Windows 11 - Instalando o Python e o VS Code</p> <p>\u274e 7 - macOS - Instalando o Python e o VS Code</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>\u274e 8 - Para iniciantes: sobre as pr\u00f3ximas aulas de configura\u00e7\u00f5es e instala\u00e7\u00f5es</p> <p>\u274e 9 - Para iniciantes: configura\u00e7\u00f5es VS Code (Parte 1)</p> <p>\u274e 10 - Para iniciantes: configura\u00e7\u00f5es VS Code (Parte 2)</p> <p>\u274e 11 - Para iniciantes: configura\u00e7\u00f5es VS Code (Parte 3)</p> <p>\u274e 12 - Para iniciantes: VS Code em Linux e Mac OS (assista mesmo se estiver em Windows)</p>"},{"location":"conteudo/#secao-3-iniciando-na-programacao-com-python-logica-de-programacao-basica","title":"\ud83d\udd1c \u274e Se\u00e7\u00e3o 3 Iniciando na programa\u00e7\u00e3o com Python (L\u00f3gica de programa\u00e7\u00e3o b\u00e1sica)","text":"<p>\u274e 13 - o que vamos aprender? Devo seguir essa se\u00e7\u00e3o?</p> <p>\u274e 14 - Me ajude a produzir conte\u00fado gratis</p> <p>\u274e 15 - Criando meu primeiro m\u00f3dulo Python(*.py)</p> <p>\u274e 16 - o interpretador do Python + coment\u00e1rios de c\u00f3digo</p> <pre><code>\"\"\"\nDocString\nE escrever o que eu\nquiser\nasdfasdfd\n\"\"\"\n''' Usar para escrever suas notas '''\n# Permite escrever um coment\u00e1rio\nprint(123)  # Na frente\n# Abaixo\nprint(456)\n</code></pre> <p>\u274e 17 - Docstring como coment\u00e1rios</p> <p>\ud83c\udf80  Conectado a aula anterior</p> <p>\u274e  17.1 - Teste 1 - Sobre comet\u00e1rios Question\u00e1rio 1</p> <p>\u274e 18 - A fun\u00e7\u00e3o <code>print</code></p> <pre><code>print(12, 34, 1011, sep=\"\", end='#')\nprint(56, 78, sep='-', end='\\n')\nprint(9, 10, sep='-', end='\\n')\n</code></pre> <p>\u274e 19 - Tipo <code>str</code> (<code>string</code>) - Introdu\u00e7\u00e3o aos tipos de dados</p> <pre><code>\"\"\"\nDocString\nPython = Linguagem de programa\u00e7\u00e3o\nTipo de tipagem = Din\u00e2mica / Forte\nstr -&gt; string -&gt; texto\nStrings s\u00e3o textos que est\u00e3o dentro de aspas\n\"\"\"\nprint(1234)\n# Aspas simples\nprint('Luiz Ot\u00e1vio')\nprint(1, 'Luiz \"Ot\u00e1vio\"')\n# Aspas duplas\nprint(\"Luiz Ot\u00e1vio\")\nprint(2, \"Luiz 'Ot\u00e1vio'\")\n# Escape\nprint(\"Luiz \\\"Ot\u00e1vio\\\"\")\n# r\nprint(r\"Luiz \\\"Ot\u00e1vio\\\"\")\n</code></pre> <p>\u274e 19.1 - Teste 2 - Sobre <code>print</code> e <code>str</code> Question\u00e1rio 2</p> <p>\u274e 20 - Tipo int e <code>float</code>(n\u00fameros) - Introdu\u00e7\u00e3o aos tipos de dados</p> <pre><code># Tipos int e float\n# int -&gt; N\u00famero inteiro\n# O tipo int representa qualquer n\u00famero\n# positivo ou negativo. int sem sinal \u00e9 considerado\n# positivo.\n# print(11) # int\n# print(-11) # int\n# print(0)\n# float -&gt; N\u00famero com ponto flutuante\n# O tipo float representa qualquer n\u00famero\n# positivo ou negativo com ponto flutuante.\n# float sem sinal \u00e9 considerado positivo.\n# print(1.1, 10.11)\n# print(0.0, -1.5)\n# A fun\u00e7\u00e3o type mostra o tipo que o Python\n# inferiu ao valor.\nprint(type('Ot\u00e1vio'))\nprint(type(0))\nprint(type(1.1), type(-1.1), type(0.0))\n</code></pre> <p>\u274e 21 - Tipo bool(boolean) - introdu\u00e7\u00e3o ao tipos de dados</p> <pre><code># Tipo de dado bool (boolean)\n# Ao questionar algo em um programa,\n# s\u00f3 existem duas respostas poss\u00edveis:\n# sim (True) ou n\u00e3o (False).\n# Existem v\u00e1rios operadores para \"questionar\".\n# Dentre eles o ==, que \u00e9 um operador l\u00f3gico que\n# questiona se um valor \u00e9 igual a outro\nprint(10 == 10)  # Sim =&gt; True (Verdadeiro)\nprint(10 == 11)  # N\u00e3o =&gt; False (Falso)\nprint(type(True))\nprint(type(False))\nprint(type(10 == 10))\nprint(type(10 == 11))\n</code></pre> <p>\u274e 21.1 - Teste 3 - Sobre <code>int</code>, <code>float</code> e bool Question\u00e1rio 3</p> <p>\u274e 22 - Coer\u00e7\u00e3o de tipos (convertendo um tipo para outro)</p> <pre><code># convers\u00e3o de tipos, coer\u00e7\u00e3o\n# type convertion, typecasting, coercion\n# \u00e9 o ato de converter um tipo em outro\n#  tipos imut\u00e1veis e primitivos:\n# str, int, float, bool\nprint(int('1'), type(int('1')))\nprint(type(float('1') + 1))\nprint(bool(' '))\nprint(str(11) + 'b')\n</code></pre> <p>\u274e 23 - Introdu\u00e7\u00e3o \u00e0s vari\u00e1veis em Python</p> <pre><code># Vari\u00e1veis s\u00e3o usadas para salvar algo na mem\u00f3ria do computador.\n# PEP8: inicie vari\u00e1veis com letras min\u00fasculas, pode usar\n# n\u00fameros e underline _.\n# O sinal de = \u00e9 o operador de atribui\u00e7\u00e3o. Ele \u00e9 usado para\n# atribuir um valor a um nome (vari\u00e1vel).\n# Uso: nome_vari\u00e1vel = express\u00e3o\n# nome_completo = 'Luiz Ot\u00e1vio Miranda'\n# soma_dois_mais_dois = 2 + 2\n# int_um = bool('1')\n# print(int_um, type(int_um))\n# print(nome_completo, soma_dois_mais_dois)\nnome = 'Luiz'\nidade = 17\nmaior_de_idade = idade &gt;= 18\nprint('Nome:', nome, 'Idade:', idade)\nprint('\u00c9 maior?', maior_de_idade)\n</code></pre> <p>\u274e 24 - Exec\u00edcios com vari\u00e1veis e tipos de dados</p> <p>\ud83d\udccd Resposta Exerc\u00edcio</p> <pre><code>nome='Lucas'\nsobrenome='Cadastro'\nidade='10'\nano_nascimento= 2023 - idade\nmaior_de_idade= idade &gt;= 18\naltura_metros= 1.63\nprint('Nome:',nome)\nprint('Sobrenome:',sobrenome)\nprint('Idade:',idade)\nprint('Ano de Nascimento:',ano_nascimento)\nprint('\u00c9 Maior de Idade?:',maior_de_idade)\nprint('Altura em Metros:',altura_metros)\n</code></pre> <p>\u274e 25 - Solu\u00e7\u00e3o - exerc\u00edcios com vari\u00e1veis e tipos de dados</p> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>nome = 'Luiz Ot\u00e1vio'\nsobrenome = 'Miranda'\nidade = 18\nano_nascimento = 2022 - idade\nmaior_de_idade = idade &gt;= 18\naltura_metros = 1.80\nprint('Nome:', nome)\nprint('Sobrenome:', sobrenome)\nprint('Idade:', idade)\nprint('Ano de nascimento:', ano_nascimento)\nprint('\u00c9 maior de idade?', maior_de_idade)\nprint('Altura em metros:', altura_metros)\n</code></pre> <p>\u274e 26 - Introdu\u00e7\u00e3o aos operadores aritm\u00e9ticos(matem\u00e1tica)</p> <pre><code>adicao = 10 + 10\nprint('Adi\u00e7\u00e3o', adicao)\nsubtracao = 10 - 5\nprint('Subtra\u00e7\u00e3o', subtracao)\nmultiplicacao = 10 * 10\nprint('Multiplica\u00e7\u00e3o', multiplicacao)\ndivisao = 10 / 3  # float\nprint('Divis\u00e3o', divisao)\ndivisao_inteira = 10 // 3\nprint('Divis\u00e3o inteira', divisao_inteira)\nexponenciacao = 2 ** 10\nprint('Exponencia\u00e7\u00e3o', exponenciacao)\nmodulo = 55 % 2  # resto da divis\u00e3o\nprint('M\u00f3dulo', modulo)\nprint(10 % 8 == 0)\nprint(16 % 8 == 0)\nprint(10 % 2 == 0)\nprint(15 % 2 == 0)\nprint(16 % 2 == 0)\n</code></pre> <p>\u274e 27 - Concatena\u00e7\u00e3o (+) e repeti\u00e7\u00e3o (*) com operadores aritm\u00e9ticos</p> <pre><code>concatenacao = 'Luiz' + ' ' + 'Ot\u00e1vio'\nprint(concatenacao)\na_dez_vezes = 'A' * 10\ntres_vezes_luiz = 3 * 'Luiz'\nprint(a_dez_vezes)\nprint(tres_vezes_luiz)\n</code></pre> <p>\u274e 28 - Preced\u00eancia entre os operadores aritm\u00e9ticos</p> <pre><code># 1. (n + n)\n# 2. **\n# 3. * / // %\n# 4. + -\nconta_1 = (1 + int(0.5 + 0.5)) ** (5 + 5)\nprint(conta_1)\n</code></pre> <p>\u274e 29 - Exerc\u00edcio de programa\u00e7\u00e3o - C\u00e1lculo de IMC (\u00cdndice de Massa Corp\u00f3rea) + Elipsis</p> <p>\ud83d\udccd Resposta Exerc\u00edcio</p> <pre><code>nome = 'Edgar Soares'\naltura = 1.63\npeso = 75\n'''\nO IMC \u00e9 reconhecido como padr\u00e3o internacional para avaliar o grau de sobrepeso \ne obesidade. \u00c9 calculado dividindo o peso (em kg) pela altura ao quadrado \n(em metros).\n-&gt; IMC = Peso \u00f7 ( Altura \u00d7 Altura )\n    or\n-&gt; IMC = Peso \u00f7 Altura\u00b2 [ Altura**2 ]\nExemplo de como calcular o IMC:\n-&gt; IMC = 80 kg \u00f7 (1,80 m \u00d7 1,80 m) = 24,69 kg/m2 (Peso ideal)\n'''\nimc = peso / ( altura * altura )\nprint(nome,'tem', altura, 'de altura,')\nprint('pesa', peso, 'KG e seu IMC \u00e9')\nprint(imc)\n</code></pre> <p>\u274e 30 - Solu\u00e7\u00e3o exerc\u00edcios de programa\u00e7\u00e3o - C\u00e1lculo do IMC</p> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>nome = 'Luiz Ot\u00e1vio'\naltura = 1.80\npeso = 95\nimc = peso / altura ** 2\nprint(nome, 'tem', altura, 'de altura,',)\nprint('pesa', peso, 'quilos e seu imc \u00e9',)\nprint(imc)\n# Luiz Ot\u00e1vio tem 1.80 de altura,\n# pesa 95 quilos e seu IMC \u00e9\n# 29.320987654320987\n</code></pre> <p>\u274e 31 - Uma introdu\u00e7\u00e3o \u00e0s f-strings (formata\u00e7\u00e3o de strings)</p> <pre><code>nome = 'Luiz Ot\u00e1vio'\naltura = 1.80\npeso = 95\nimc = peso / altura ** 2\n\"f-strings\"\nlinha_1 = f'{nome} tem {altura:.2f} de altura,'\nlinha_2 = f'pesa {peso} quilos e seu imc \u00e9'\nlinha_3 = f'{imc:.2f}'\nprint(linha_1)\nprint(linha_2)\nprint(linha_3)\n# Luiz Ot\u00e1vio tem 1.80 de altura,\n# pesa 95 quilos e seu IMC \u00e9\n# 29.320987654320987\n</code></pre> <p>\u274e 32 - formata\u00e7\u00e3o de strings como o m\u00e9todo format</p> <pre><code>a = 'AAAAA'\nb = 'BBBBBB'\nc = 1.1\nstring = 'b={nome_2} a={nome_1} a={nome_1} c={nome_3:.2f}'\nformato = string.format(\nnome_1 = a,\nnome_2 = b,\nnome_3 = c\n)\nprint(formato)\n</code></pre> <p>\u274e 32.1 - Teste 4 - Teste seus conhecimentos Question\u00e1rio 4</p> <p>\u274e 33 - Usando a fun\u00e7\u00e3o input para coletar dados de usu\u00e1rio</p> <pre><code># nome = input('Qual o seu nome? ')\n# print(f'O seu nome \u00e9 {nome}')\nnumero_1 = input('Digite um n\u00famero: ')\nnumero_2 = input('Digite outro n\u00famero: ')\nint_numero_1 = int(numero_1)\nint_numero_2 = int(numero_2)\nprint(f'A soma dos n\u00fameros \u00e9: {int_numero_1 + int_numero_2}')\n</code></pre> <p>\u274e 34 - Introdu\u00e7\u00e3o aos blocos de c\u00f3digo + if / elif / else (condicionais)</p> <pre><code># if / elif      / else\n# se / se n\u00e3o se / se n\u00e3o\nentrada = input('Voc\u00ea quer \"entrar\" ou \"sair\"? ')\nif entrada == 'entrar':\nprint('Voc\u00ea entrou no sistema')\nprint(12341234)\nelif entrada == 'sair':\nprint('Voc\u00ea saiu do sistema')\nelse:\nprint('Voc\u00ea n\u00e3o digitou nem entrar e nem sair.')\nprint('FORA DOS BLOCOS')\n</code></pre> <p>\u274e 35 - if, elif e else: entendendo o fluxo do interpretador em condicionais</p> <pre><code># if / ellif se / else\n# se / n\u00e3o se / se n\u00e3o\ncondicao_1 = True\ncondicao_2 = True\ncondicao_3 = True\ncondicao_4 = True\nif condicao_1:\nprint('C\u00f3digo para condi\u00e7\u00e3o 1')\nprint('C\u00f3digo para condi\u00e7\u00e3o 1')\nelif condicao_2:\nprint('C\u00f3digo para condi\u00e7\u00e3o 2')\nelif condicao_3:\nprint('C\u00f3digo para condi\u00e7\u00e3o 3')\nelif condicao_4:\nprint('C\u00f3digo para condi\u00e7\u00e3o 4')\nif 10 == 10\nprint(' Outro if ')\nprint('FORA DO IF')\n</code></pre> <p>\u274e 36 - O Debugger do Vs Code e interpretador do Python lendo os c\u00f3digos</p> <p>\u274e 37 - Operadores relacionais (de compara\u00e7\u00e3o) em Python</p> <pre><code>\"\"\"\n|  -&gt;  OP  |  Significado      |  Exemplo (True)    |\n|  -----------------------------------------------  |\n|  -&gt;  &gt;   |   Maior           |     2 &gt; 1          |\n|  -----------------------------------------------  |\n|  -&gt; &gt;=   |   maior ou igual  |     2 &gt;= 2         |\n|  -----------------------------------------------  |\n|  -&gt;  &lt;   |   menor ou igual  |     1 &lt; 2          |\n|  -----------------------------------------------  |\n|  -&gt;  &lt;=  |   menor ou igual  |     2 &lt;= 2         |\n|  -----------------------------------------------  |\n|  -&gt;  ==  |   igual           |     'a' == 'a'     |\n|  ----------------------------------------------   |\n|  -&gt;  !=  | diferente         |     'a' != 'b'     |\n|  -----------------------------------------------  |\n\"\"\"\nmaior = 2 &gt; 1\nmaior_ou_igual = 2 &gt;= 2\nmenor = 1 &lt; 2\nmenor_ou_igual = 2 &lt;= 2\nigual = 'a' == 'a'\ndiferente = 'a' != 'b'\nprint('olha meu print aqui')\n</code></pre> <p>\u274e 38 - Exerc\u00edcio de programa\u00e7\u00e3o de if e compara\u00e7\u00e3o</p> <p>\ud83d\udccd Resposta Exerc\u00edcio</p> <pre><code>primeiro_valor = input('digite um valor: ')\nsegundo_valor = input('digite outro valor: ')\nif primeiro_valor &gt;= segundo_valor:\nprint(f'O valor {primeiro_valor=} \u00e9 maior ou igual valor {segundo_valor=}')\nelse:\nprint(f'O valor {segundo_valor=} \u00e9 maior que valor {segundo_valor=}')\n</code></pre> <p>\u274e  39 - Solu\u00e7\u00e3o - Exerc\u00edcio de programa\u00e7\u00e3o com if e compara\u00e7\u00e3o</p> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>primeiro_valor = input('Digite um valor: ')\nsegundo_valor = input('Digite outro valor: ')\nif primeiro_valor &gt;= segundo_valor:\nprint(\nf'{primeiro_valor=} \u00e9 maior ou igual '\nf'ao que {segundo_valor=}'\n)\nelse:\nprint(\nf'{segundo_valor=} \u00e9 maior '\nf'do que {primeiro_valor=}'\n)\n</code></pre> <p>\u274e  40 - Operador l\u00f3gica \"and\"</p> <pre><code>\"\"\"\n-&gt;  Operadores l\u00f3gicos\n----------------------------------------\n-&gt; and (e) -&gt; or (ou) -&gt; not (n\u00e3o)\n----------------------------------------\n-&gt; and - Todos as condi\u00e7\u00f5es precisam ser\nverdadeiras.\nSe qualquer valor for considerado falso\na express\u00e3o inteira ser\u00e1 avaliada\nnaquele valor\n-&gt;  S\u00e3o considerados falsy ( que vc j\u00e1 viu)\n=&gt; 0\n=&gt;0.0\n=&gt;''\n=&gt;false\n-&gt;  Tamb\u00e9m exite o tipo de None que \u00e9\nusado para representar um n\u00e3o valor\n----------------------------------------\n-&gt; Avalia\u00e7\u00e3o de curto circuito\n\"\"\"\nentrada = input('[E]ntrar [S]air:')\nsenha_digitada = input('Senha:')\nsenha_permitida = '123456'\nif entrar == 'E' and senha_permitida == senha_digitada:\nprint('Entrar')\nelse:\nprint('Sair')\nprint(True and False and True)\nprint(True and 0 and True)\n</code></pre> <p>\u274e 40.1 - Teste 5 - Sobre and Question\u00e1rio 5</p> <p>\u274e 41 - Operador l\u00f3gico \"or\"</p> <pre><code>\"\"\"\n-&gt;  Operadores l\u00f3gicos\n----------------------------------------\n-&gt; and (e) -&gt; or (ou) -&gt; not (n\u00e3o)\n----------------------------------------\n-&gt; or - Qualquer condi\u00e7\u00e3o verdadeira avalia\ntoda a express\u00e3o como verdadeira.\n-&gt; Se qualquer valor for considerado verdadeiro,\na express\u00e3o inteira ser\u00e1 avaliado naquele valor.\n-&gt;  S\u00e3o considerados falsy ( que vc j\u00e1 viu)\n=&gt; 0\n=&gt;0.0\n=&gt;''\n=&gt;false\n-&gt;  Tamb\u00e9m exite o tipo de None que \u00e9\nusado para representar um n\u00e3o valor\n----------------------------------------\n-&gt; Avalia\u00e7\u00e3o de curto circuito\n\"\"\"\nentrada = input('[E]ntrar [S]air:')\nsenha_digitada = input('Senha:')\nsenha_permitida = '123456'\nif (entrar == 'E' or entrada == 'e')  and senha_permitida == senha_digitada:\nprint('Entrar')\nelse:\nprint('Sair')\nsenha = input('senha=') or 'sem senha'\nprint(senha)\n</code></pre> <p>\u274e  42 - Operador l\u00f3gico \"not\"</p> <pre><code>'''\n-&gt; usado  para inverter express\u00f5es\n-&gt; not True = False\n-&gt; not False = True\n'''\nsenha input('Senha:')\nprint(not True)  # False\nprint(not False) # True\n</code></pre> <p>\u274e 43 - Operadores in e not in</p> <pre><code>'''\n-&gt; strings s\u00e3o iter\u00e1veis\n-&gt; 0 1 2 3 4 5\n-&gt; o t \u00e1 v i o\n-&gt; -6-5-4-3-2-1\n'''\nnome = 'Ot\u00e1vio'\nprint(nome[2])\nprint(nome[-4])\nprint('vio' in nome)\nprint('zero' in nome)\nprint(10 * '-')\nprint('vio' not int nome)\nprint('zero' not int nome)\nnome =  input('Digite seu nome:')\nencontrar = ('Digite o que deseja encontrar:')\nif encontrar in nome:\nprint(f'{encontrar} est\u00e1 em {nome}')\nelse:\nprint(f'{encontrar} n\u00e3o est\u00e1 me {nome}')\n</code></pre> <p>\u274e 43.1 - Teste 6 seu conhecimento Question\u00e1rio 6</p> <p>\u274e 44 - Interpola\u00e7\u00e3o de string com % Python</p> <pre><code>'''\n-&gt; s - string\n-&gt; d e i - int\n-&gt; f - float\n-&gt; x e X *Hexadecimal* (ABCDEF0123456789)\n-&gt; A = 10\n-&gt; B = 11\n-&gt; C = 12\n-&gt; D = 13\n-&gt; E = 14\n-&gt; F = 15\n'''\nnome = 'Luiz'\npreco= 1000.95897643\nvariavel = '%s, pre\u00e7o \u00e9 R$.2f' % (nome, preco)\nprint(variavel)\nprint('O hexadecimal de %d \u00e9 %08X' % (1500, 1500))\n</code></pre> <p>\u274e  45 - Formata\u00e7\u00e3o de string com f-strings</p> <pre><code>'''\n-&gt; s - string\n-&gt; d - int\n-&gt; f - float\n-&gt; . &lt;n\u00famero de d\u00edgito&gt; f\n-&gt; x ou X Hexadecimal\n-&gt; (Caractere)( &gt;&lt; ^ )(quantidade)\n-&gt; &gt; - Esquerda\n-&gt; &lt; - Direita\n-&gt; ^ - Centro\n-&gt; - For\u00e7a o n\u00famero a aparecer antes dos zeros\n-&gt; Sinal - + ou -\nEx.: 0&gt;-100,.1f\n-&gt; Coversion flags - !r __repr__ !s __str__   !a\n'''\nvariavel = 'ABC'\nprint(f'{variavel}')\nprint(f'{variavel: &gt;10}')\nprint(f'{variavel: &lt;10}.')\nprint(f'{variavel: ^10}.')\nprint(f'{1000.4873648123746:0=+10,.1f}')\nprint(f'O hexadecimal de 1500 \u00e9 {1500:08X}')\nprint(f'{variavel!r}')\n</code></pre> <p>\u274e 46 - Fatiamento de strings e a fun\u00e7\u00e3o len</p> <pre><code>'''\n-&gt; Fatiamento de strings\n-------------------------\n-&gt; 012345678\n-&gt; ol\u00e1 mundo\n-&gt; -987654321\n-&gt; fatiamento [i&lt;in\u00edcio&gt;:f&lt;fim&gt;:p&lt;passo&gt;] [::]\nobs.: a fun\u00e7\u00e3o len retorna a quantidade\n'''\nvariavel = 'Ol\u00e1 mundo'\nprint(variavel[::-1])\nprint(len(variavel))\n</code></pre> <p>\u274e 47 - Exerc\u00edcios: teste seu conhecimento at\u00e9 aqui</p> <p>\ud83d\udccd Resposta Exerc\u00edcio</p> <pre><code>'''\n-&gt; Exerc\u00edcio\n-----------------\n-&gt; Pe\u00e7a ao usu\u00e1rio para digitar seu nome\n-&gt; Pe\u00e7a ao usu\u00e1rio digitar sua idade\n-&gt; Se nome e idade forem digitados :\n-&gt; Exiba:\n  x  Seu nome \u00e9 {nome}\n  x  Seu nome invertido \u00e9 {nome invertido}\n  x  Seu nome cont\u00e9m (ou n\u00e3o espa\u00e7os)\n  x  Seu nome tem [n] letras\n  X  A primeira letra do seu nome \u00e9 {letra}\n  X  A \u00faltima letra do seu nome \u00e9 {letra}\n-&gt; Se nada for digitado em nome ou idade\nExiba:\n  'Desculpe, voc\u00ea deixou o campo vazio'\n'''\nnome = input('Digite o seu nome: ')\nidade = input('digite a sua idade:')\nif nome and idade:\nprint('Desculpe, voc\u00ea deixou o campo vazio' )\nelse:\nprint(f'Seu nome \u00e9 {nome=}')\nprint(f'Seu nome invertido \u00e9 {nome[::-1]}')\nif ' ' in nome:\nprint('Seu nome tem espa\u00e7os')\nelse:\nprint('Seu nome n\u00e3o tem espa\u00e7os')\nprint(f'o seu nome tem {len(nome)} letras')\nprint(f'A primeira letra do seu nome \u00e9 {nome[0]}')\nprint(f'A \u00faltima letra do seu nome \u00e9 {nome[-1]}')\n</code></pre> <p>\u274e 48 - Solu\u00e7\u00e3o - Exerc\u00edcios: teste seu conhecimento at\u00e9 aqui</p> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>nome = input('Digite o seu nome: ')\nidade = input('Digite sua idade: ')\nif nome and idade:\nprint(f'Seu nome \u00e9 {nome}')\nprint(f'Seu nome invertido \u00e9 {nome[::-1]}')\nif ' ' in nome:\nprint('Seu nome cont\u00e9m espa\u00e7os')\nelse:\nprint('Seu nome N\u00c3O cont\u00e9m espa\u00e7os')\nprint(f'Seu nome tem {len(nome)} letras')\nprint(f'A primeira letra do seu nome \u00e9 {nome[0]}')\nprint(f'A \u00faltima letra do seu nome \u00e9 {nome[-1]}')\nelse:\nprint(\"Desculpe, voc\u00ea deixou campos vazios.\")\n</code></pre> <p>\u274e 49 - Introdu\u00e7\u00e3o ao try e except para capturar erros (exceptions)</p> <pre><code>'''\n-&gt; Introdu\u00e7\u00e3o ao try / except\n-------------------------------\n-&gt; try =&gt; tentar executar o c\u00f3digo\n-&gt; except =&gt; ocorreu algum erro ao tente executar\n'''\nnome_str = input('Vou dobrar o n\u00famero que vc digitar')\ntry:\nnumero_float = float(numero_str)\nprint('FLOAT :', numero_float)\nprint(f'O dobro de {numero_str} \u00e9 {numero_float * 2 :2.f} ')\nexcept:\nprint ('Isso n\u00e3o \u00e9 um numero.')\n# ou (checar a logica de outra forma)\nif numero_str.isdigit():\nnumero_float = float(numero_str)\nprint(f'O dobro de {numero_str} \u00e9 {numero_float * 2 :2.f} ')\nelse:\nprint ('Isso n\u00e3o \u00e9 um numero.')\n</code></pre> <p>\u274e 50 - Parte 1: Vari\u00e1veis constantes e complexidade de c\u00f3digo</p> <pre><code>'''\n-&gt; CONSTANTE =&gt; 'Vari\u00e1veis' que n\u00e3o v\u00e3o mudar\nmuitas condi\u00e7\u00f5es no mesmo if (ruim)\n&lt;- contagem de complexidade (ruim)\n'''\nvelocidade = 61 #velocidade atual do carro\nlocal_carro = 101 # local em que o carro est\u00e1 na estrada\nRODAR_1 = 60 # velocidade m\u00e1xima do rodar 1\nLOCAL_1 = 100 # local onde o radar 1 est\u00e1\nRADAR_RANGE = 1 # A dist\u00e2ncia onde a rodar pega\n</code></pre> <p>\u274e 51 - Parte 2: Vari\u00e1veis constantes e complexidade de c\u00f3digo</p> <pre><code>velocidade = 61 #velocidade atual do carro\nlocal_carro = 101 # local em que o carro est\u00e1 na estrada\nRODAR_1 = 60 # velocidade m\u00e1xima do rodar 1\nLOCAL_1 = 100 # local onde o radar 1 est\u00e1\nRADAR_RANGE = 1 # A dist\u00e2ncia onde a rodar pega\nvel_carro_pass_radar_1 = velocidade &gt; RADAR_1\ncarro_passou_radar_1 = local &gt;= (RADAR_1 - RADAR_RANGE) and \\\nlocal_carro &lt;= (RADAR_1 + RADAR_RANGE )\ncarro_multado_radar = carro_passou_radar_1 and vel_pass_radar_1\nif vel_carro_pass_rodar_1:\nprint('Velocidade carro possou do radar 1')\nif carro_passou_radar_1:\nprint('Carro passou radar 1')\nif carro_multado_radar_1:\nprint('carro multado em rodar 1')\n</code></pre> <p>\u274e 52 - id - A identidade do valor que est\u00e1 na mem\u00f3ria</p> <pre><code>'''\nflag (Bandeira) - Marcar um local\nNone = N\u00e3o valor\nis e is not = \u00e9 ou n\u00e3o (tipo, valor, identidade)\n'''\nv_1 = 'a'\nprint(id(v_1))\n# condicao = False\nif condicao:\nprint('Fa\u00e7a algo')\nelse:\nprint('N\u00e3o fa\u00e7a algo')\n</code></pre> <p>\u274e 53 - Flag, is, is not e None</p> <pre><code>'''\n-&gt;  flag (Bandeira) - Marcar um local\n-&gt;  None = N\u00e3o valor\n-&gt;  is e is not = \u00e9 ou n\u00e3o (tipo, valor, identidade)\n-&gt;  id = Identidade\n'''\ncondicao = False\npassou_no_if = None\nif condicao:\npassou_no_if = True\nprint('Fa\u00e7a algo')\nelse:\nprint('N\u00e3o fa\u00e7a algo')\nif passou_no_if is None:\nprint('N\u00e3o passou no if')\nelse:\nprint('Passou no if')\n</code></pre> <p>\u274e 54 - Exerc\u00edcios - Enunciados</p> <p>\ud83d\udccd Resposta Exerc\u00edcio</p> <pre><code>'''\n1-\n-&gt; Fa\u00e7a um programa que que pe\u00e7a ao usu\u00e1rio para digitar um n\u00famero inteiro,\ninforme se este n\u00famero \u00e9 par ou impar.\n-&gt; Caso o usu\u00e1rio n\u00e3o digite um n\u00famero inteiro, informe\n     que n\u00e3o \u00e9 um n\u00famero inteiro\n'''\ntry:\nnumero_str = input('digite  um n\u00famero inteiro = ')\nnumero_int = float(numero_str)\nif (numero_int % 2) == 0:\nprint('este N\u00famero \u00e9 par')\nelse:\nprint('este N\u00famero \u00e9 impar')\nexcept:\nprint('n\u00e3o foi digitado um n\u00famero inteiro')\n'''\n2-\n-&gt; Fa\u00e7a um programa que pergunte a hora ao usu\u00e1rio e , \n    baseando-se no hor\u00e1rio descrito exiba a sauda\u00e7\u00e3o apropriada.\n  Ex.:\n  Bom dia 0-11, boa tarde 12-17 e boa noite 18-23\n'''\ntry\nhora_str =  input('que horas s\u00e3o? ')\nhora_int = int(hora_str)\nif hora_int &gt;= 0 and hora_int &lt;= 11:\nprint('Bom dia!')\nelif hora_int &gt;= 12 and hora_int &lt;= 17:\nprint('Boa Tarde!')\nelif hora_int &gt;= 18 and hora_int &lt;= 23:\nprint('Boa noite!')\nexcept:\nprint('N\u00e3o corresponde a uma hora v\u00e1lida')\n'''\n3-\n-&gt; Fa\u00e7a um programa que pe\u00e7a o primero nome do usu\u00e1rio.\n-&gt; Se o nome tiver 4 letras ou menos escreva:\n  \"Seu nome \u00e9 curto \";\n-&gt; Se tiver entre 5 e 6 letras, escreva:\n  \" Seu nome \u00e9 normal\";\n-&gt; Maior que 6 escreva:\n  \" Seu nome \u00e9 muito grande\"\n'''\nprimero_nome = input('Digite o seu primero nome')\nif len(primero_nome) &gt;= 1 and len(primero_nome) &lt;= 4:\nprint(\"Seu nome \u00e9 curto!\" )\nelif len(primero_nome) &gt;= 5 and len(primero_nome) &lt;= 6:\nprint(\"Seu nome \u00e9 normal!\")\nelif  len(primero_nome) &gt; 6:\nprint(\"Seu nome \u00e9 muito grande!\")\n</code></pre> <p>\u274e 55 - Solu\u00e7\u00e3o 1 dos Exerc\u00edcios - Enunciados</p> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>\"\"\"\n1-\n-&gt;  informe se este n\u00famero \u00e9 par ou \u00edmpar. Caso o usu\u00e1rio n\u00e3o digite um n\u00famero\n    inteiro, informe que n\u00e3o \u00e9 um n\u00famero inteiro.\n\"\"\"\nentrada = input('Digite um n\u00famero: ')\n# if entrada.isdigit():\n#     entrada_int = int(entrada)\n#     par_impar = entrada_int % 2 == 0\n#     par_impar_texto = '\u00edmpar'\n#     if par_impar:\n#         par_impar_texto = 'par'\n#     print(f'O n\u00famero {entrada_int} \u00e9 {par_impar_texto}')\n# else:\n#     print('Voc\u00ea n\u00e3o digitou um n\u00famero inteiro')\ntry:\nentrada_int = float(entrada)\npar_impar = entrada_int % 2 == 0\npar_impar_texto = '\u00edmpar'\nif par_impar:\npar_impar_texto = 'par'\nprint(f'O n\u00famero {entrada_int} \u00e9 {par_impar_texto}')\nexcept:\nprint('Voc\u00ea n\u00e3o digitou um n\u00famero inteiro')\n</code></pre> <p>\u274e 56 - Solu\u00e7\u00e3o 2 dos Exerc\u00edcios - Enunciados</p> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>\"\"\"\n2-\n-&gt;  Fa\u00e7a um programa que pergunte a hora ao usu\u00e1rio e, baseando-se no hor\u00e1rio\n  descrito, exiba a sauda\u00e7\u00e3o apropriada. Ex.\n  Bom dia 0-11, Boa tarde 12-17 e Boa noite 18-23.\n\"\"\"\nentrada = input('Digite a hora em n\u00fameros inteiros: ')\ntry:\nhora = int(entrada)\nif hora &gt;= 0 and hora &lt;= 11:\nprint('Bom dia')\nelif hora &gt;= 12 and hora &lt;= 17:\nprint('Bom tarde')\nelif hora &gt;= 18 and hora &lt;= 23:\nprint('Bom noite')\nelse:\nprint('N\u00e3o conhe\u00e7o essa hora')\nexcept:\nprint('Por favor, digite apenas n\u00fameros inteiros')\n</code></pre> <p>\u274e 57 - Solu\u00e7\u00e3o 3 dos Exerc\u00edcios - Enunciados</p> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>\"\"\"\n3-\n-&gt;  Fa\u00e7a um programa que pe\u00e7a o primeiro nome do usu\u00e1rio. Se o nome tiver 4 letras ou\nmenos escreva \"Seu nome \u00e9 curto\"; se tiver entre 5 e 6 letras, escreva\n\"Seu nome \u00e9 normal\"; maior que 6 escreva \"Seu nome \u00e9 muito grande\".\n\"\"\"\nnome = input('Digite seu nome: ')\ntamanho_nome = len(nome)\nif tamanho_nome &gt; 1:\nif tamanho_nome &lt;= 4:\nprint('Seu nome \u00e9 curto')\nelif tamanho_nome &gt;= 5 and tamanho_nome &lt;= 6:\nprint('Seu nome \u00e9 normal')\nelse:\nprint('Seu nome \u00e9 muito grande')\nelse:\nprint('Digite mais de uma letra.')\n</code></pre> <p>\u274e 58 - Conversa - tipos built-in, documenta\u00e7\u00e3o, tipo imut\u00e1veis, m\u00e9todos de string</p> <pre><code>'''\nlink da documenta\u00e7\u00e3o --&gt; https://docs.python.org/pt-br/3/library/stdtypes.html\n----------------------------------------------------------------------------\n-&gt; Imut\u00e1veis que vimos:\n-&gt; str\n-&gt; int\n-&gt; float\n-&gt; bool\n'''\nstring = '1000'\noutra_variavel = f'{string[:3]} ABC {string[4:]}'\nprint(string)\nprint(outra_variavel)\nprint(string.zfill(10))\n</code></pre> <p>\u274e 59 - white e break - Estrutura de repeti\u00e7\u00e3o (Parte 1)</p> <pre><code>'''\n-&gt; Repeti\u00e7\u00e3o\n--------------\n-&gt; while (enquanto)\n-&gt; Executa uma a\u00e7\u00e3o enquanto uma condi\u00e7\u00e3o for verdadeira\n  loop infinito -&gt; Quando um c\u00f3digo n\u00e3o tem fim\n'''\ncondicao = True\nwhile condicao:\nnome = input('Qual o seu nome: ')\nprint(f'seu nome \u00e9 {nome}')\nif nome == 'sair'\nbreak\nprint('Acabou')\n</code></pre> <p>\u274e 60 - <code>while</code> - Condi\u00e7\u00e3o em detalhes</p> <pre><code>'''\n-&gt; Repeti\u00e7\u00e3o\n--------------\n-&gt; while (enquanto)\n-&gt; Executa uma a\u00e7\u00e3o enquanto uma condi\u00e7\u00e3o for verdadeira\n    loop infinito -&gt; Quando um c\u00f3digo n\u00e3o tem fim\n'''\ncontador\nwhile contador &lt;= 10\ncontador = contador + 1\n# contador +=1\nprint(contador)\nprint('Acabou')\n</code></pre> <p>\u274e 61 - Operadores de atribui\u00e7\u00e3o com operadores aritm\u00e9ticos</p> <pre><code>'''\n-&gt; Operadores de atribui\u00e7\u00e3o\n-----------------------------\n-&gt;  =\n-&gt; +=\n-&gt; -=\n-&gt; *=\n-&gt; /=\n-&gt; //=\n-&gt; **=\n-&gt; %=\n'''\ncontador = 10\ncontador /= 5\nprint(contador)\n</code></pre> <p>\u274e 62 - <code>while</code> + continue - pulando algumas repeti\u00e7\u00e3o</p> <pre><code>'''\n-&gt; Repeti\u00e7\u00e3o\n    --------------\n    -&gt; while (enquanto)\n    -&gt; Executa uma a\u00e7\u00e3o enquanto uma condi\u00e7\u00e3o for verdadeira\n        loop infinito -&gt; Quando um c\u00f3digo n\u00e3o tem fim\n'''\ncontador = 0\nwhile contador &lt;= 100:\ncontador += 1\nif contador == 6:\nprint('N\u00e3o vou mostrar o 6.')\ncontinue\nif contador &gt;= 10 and contador &lt;=27:\nprint(f'N\u00e3o vou mostrar o {contador}')\ncontinue\nprint(contador)\nif contador == 40:\nbreak\nprint('Acabou')\n</code></pre> <p>\u274e 63 - <code>while</code> + <code>while</code> (la\u00e7os internos)</p> <pre><code>'''\n-&gt; Repeti\u00e7\u00e3o\n    --------------\n    -&gt; while (enquanto)\n    -&gt; Executa uma a\u00e7\u00e3o enquanto uma condi\u00e7\u00e3o for verdadeira\n        loop infinito -&gt; Quando um c\u00f3digo n\u00e3o tem fim\n'''\nqtd_linhas = 5\nqtd_colunas = 5\nlinha = 1\nwhile linha &lt;=qtd_linhas:\ncoluna = 1\nwhile coluna &lt;= qtd_colunas:\nprint(f'{linha=} {colunas=}')\ncoluna += 1\nlinha += 1\nprint('Acabou')\n</code></pre> <p>\u274e 64 - Exerc\u00edcio guiado com <code>while</code></p> <p>\ud83d\udccd Resposta Exerc\u00edcio</p> <pre><code>'''\n-&gt; Iterando strings com while\n--------------------------------\n'''\n#       012345678910\nnome = 'Luiz Ot\u00e1vio' # Iter\u00e1vel\n#       11109876454321\ntamanho_nome = len(nome)\nprint(nome)\nprint(tamanho_nome)\nprint(nome[3])\nnova_string = ''\nnova_string += '*L*u*i*z* *O*t*\u00e1*v*i*o*' # Resultado proposto\nletras = 0\nasterisco = '*'\nwhile letras &lt; tamanho_nome:\nnova_string += asterisco + nome[letras]\nletras += 1\nnova_string += asterisco\nprint(nova_string)\n</code></pre> <p>\u274e 65 - Solu\u00e7\u00e3o do exerc\u00edcio guiado com <code>while</code></p> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>\"\"\"\n-&gt;  Iterando strings com while\n-------------------------------\n\"\"\"\n#       012345678910\n# nome = 'Luiz Ot\u00e1vio'  # Iter\u00e1veis\n#      1110987654321\nnome = 'Maria Helena'  # Iter\u00e1veis\nindice = 0\nnovo_nome = ''\nwhile indice &lt; len(nome):\nletra = nome[indice]\nnovo_nome += f'*{letra}'\nindice += 1\nnovo_nome += '*'\nprint(novo_nome)\n</code></pre> <p>\u274e 66 - Exerc\u00edcio guiado - Calculadora - Parte 1</p> <p>\ud83d\udccd Resposta Exerc\u00edcio</p> <pre><code>'''\n-&gt; Calculadora com While\n--------------------------\n'''\nwhile True:\nnumero_1 = input('Digite um n\u00famero')\nnumero_2 = input('Digite outro n\u00famero')\noperador = input('Digite operadores( + , - , /, * )')\nnum_1_float = 0\nnum_2_float = 0\nnumero_valido = None\ntry:\nnum_1_float = float(numero_1)\nnum_2_float = float(numero_2)\nnumero_valido = True\nexcept:\nnumero_valido = None\nif numero_valido is True:\nprint('N\u00e3o digitado um numero v\u00e1lido')\ncontinue\noperadores_validos = '+-/*'\nif operador in not operadores_validos\nprint('Nenhum dos operadores v\u00e1lidos foi digitado!')\ncontinue\nif len(operador) &gt;= 1:\nprint('Digite somente um \u00fanico operador')\ncontinue\nprint('confira os resultados abaixo')\nif operador == '+':\nprint(num_1_float + num_2_float)\nelif operador == '-':\nprint(num_1_float - num_2_float')\nelif operador == '/':\nif num_2_float != 0:\nprint(num_1_float / num_2_float)\nelse:\nprint('N\u00e3o \u00e9 poss\u00edvel fazer divis\u00e3o por zero.')\nelif operador == '*':\nprint(num_1_float * num_2_float)\nsair = input('Quer sair [s]im').lower().startswith('s')\nif sair is True:\nbreak\n</code></pre> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>'''\n-&gt; Calculadora com While\n--------------------------\n'''\nwhile True:\nprint('nummmmm')\n#################\nsair = input('Quer sair [s]im').lower().startswith('s')\nif sair is True:\nbreak\n</code></pre> <p>\u274e 67 - Exerc\u00edcio guiado - Calculadora - Parte 2</p> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>'''\n-&gt; Calculadora com While\n--------------------------\n'''\nwhile True:\nnumero_1 = input('Digite um n\u00famero: ')\nnumero_2 = input('Digite outro n\u00famero: ')\noperador = input('Digite o operador (+-/*): ')\nnumeros_validos = None\ntry:\nnum_1_float = float(numero_1)\nnum_2_float = float(numero_2)\nnumeros_validos = True\nexcept Exception:\nnumeros_validos = None\nif numeros_validos is None:\nprint('Um ou ambos os n\u00fameros digitados s\u00e3o inv\u00e1lidos.')\ncontinue\noperadores_permitidos = '+-/*'\nif operador not in operadores_permitidos:\nprint('Operador inv\u00e1lido.')\ncontinue\nif len(operador) &gt; 1:\nprint('Digite apenas um operador.')\ncontinue\n###\nsair = input('Quer sair? [s]im: ').lower().startswith('s')\nif sair is True:\nbreak\n</code></pre> <p>\u274e 68 - Exerc\u00edcio guiado - Calculadora - Parte 3</p> <p>\u274e 69 - <code>while</code> / else (recurso peculiar do Python)</p> <pre><code>'''\n-&gt;  while / else\n--------------------\n'''\nstring = 'valor qualquer'\ni = 0\nwhile i &lt; len(string):\nletras = string[i]\nif letra == ' '\nbreak\nprint(letra)\ni += 1\nelse:\nprint('N\u00e3o encontrei um espa\u00e7o na string')\nprint('Fora do while')\n</code></pre> <p>\u274e 70 -  <code>while</code> - Qual letras apareceu  mais vezes na frase? (Iterando string com <code>while</code>)</p> <pre><code>frase = 'aaaooo'\ni = 0\nqtd_apareceu_mais_vezes = 0\nletra_apareceu_mais_vezes = ''\nwhile i &lt; len(frase):\nletra_atual = frase[i]\nif letra_atual == ' ':\ni += 1\ncontinue\nqtd_apareceu_mais_vezes_atual = frase.count(letra_atual)\nif qtd_apareceu_mais_vezes &lt; qtd_apareceu_mais_vezes_atual:\nqtd_apareceu_mais_vezes = qtd_apareceu_mais_vezes_atual\nletra_apareceu_mais_vezes = letra_atual\ni += 1\nprint(\n'A letra que apareceu mais vezes foi '\nf'\"{letra_apareceu_mais_vezes}\" que apareceu '\nf'{qtd_apareceu_mais_vezes}X'\n)\n</code></pre> <p>\u274e 71 - DEBUGGER: <code>while</code> - qual letra apareceu mais vezes na frase?</p> <p>\u274e 71.1 - Teste 7 - Teste Question\u00e1rio 7</p> <p>\u274e 72 - Introdu\u00e7\u00e3o ao <code>for / in</code> estrutura de repeti\u00e7\u00e3o para coisa finitas</p> <pre><code>'''\nsenha_salva = '123456'\nsenha_digitada = ''\nrepeticoes = 0\nwhile senha_salva != senha_digitada:\nsenha_digitada = input(f'Sua senha ({repeticoes}X):')\nrepeticoes += 1\nprint(repeticoes)\nprint('Aquele la\u00e7o acima pode ter repeti\u00e7\u00e3o infinitas')\n'''\ntexto = 'Python'\nnovo_texto = ''\nfor letra in texto:\nnovo_texto +=f'*{letra}'\nprint(letra)\nprint(novo_texto +'*')\n</code></pre> <p>\u274e 73 - range + for para usar intervalos de n\u00fameros</p> <pre><code>'''\n-&gt; for + Range\n---------------\n-&gt; range -&gt; (start, stop, step)\n'''\nnumeros = range(0, 100, 8)\nfor numero in numeros:\nprint(numero)\n</code></pre> <p>\u274e 74 - Como o for funciona por baixo dos panos? (<code>next</code>, <code>iter</code>, <code>iter\u00e1vel</code> e <code>iterador</code>)</p> <pre><code>'''\n-&gt; Iter\u00e1vel tipos:\n-------------------\n-&gt; str\n-&gt; range\n-&gt; etc\n-&gt; (__iter__)\nIterador -&gt; quem sabe entrar um valor por vez\nnext -&gt; me entrega o pr\u00f3ximo valor\niter -&gt; me entrega seu iterador\n'''\n# for letra in texto\ntexto = 'Luiz' #iter\u00e1vel\ninterador = iter(texto) # iterator\nwhile True:\ntry:\nletra = next()\nexcept StopIteration:\nbreak\n# outra forma\nfor letra in texto:\nprint(letra)\n</code></pre> <p>\u274e 75 - O que aprendemos com while tamb\u00e9m funciona no for (<code>continue</code>, <code>break</code>, <code>else</code>, etc)</p> <pre><code>for i in range(10):\nif i == 2:\nprint('i \u00e9 2, pulando...')\ncontinue\nif i == 8:\nprint('i \u00e9 8 , se else n\u00e3o executar\u00e1')\nbreak\nfor j in range(1, 3):\nprint(i, j)\nelse:\nprint('For completo com sucesso!')\n</code></pre> <p>\u274e 76 - Exerc\u00edcio - Jogo de palavra secreta</p> <p>\ud83d\udccd Resposta Exerc\u00edcio</p> <pre><code>'''\n-&gt; Voc\u00ea vai propor uma palavra secreta\n  qualquer e vai dar possibilidade para o\n  usu\u00e1rio digitar apenas uma letra.\n-&gt; Quando o usu\u00e1rio digitar uma letra, voc\u00ea\n  vai conferir se a letra digitada est\u00e1\n  na palavra secreta.\n-&gt; Se a letra digitada estiver na estiver na\n  palavra secreta, exiba a letra;\n-&gt; Se a palavra secreta; exiba *.\n-&gt; Fa\u00e7a o contagem de tentativas do seu usu\u00e1rio\n'''\npalavra = 'secreta'\ncontagem = 0\nfor letra in palavra:\nletra = input('digite letra por letra para adivinhar a palavra secreta = ')\nif len(letra) &gt; 1:\nif letra in palavra:\nprint(letra)\nelse:\nprint('*')\ncontagem += 1\n</code></pre> <p>\u274e 77 - Sobre exerc\u00edcios - n\u00e3o saber \u00e9 normal</p> <p>\u274e 78 - (Parte 1) Solu\u00e7\u00e3o do exerc\u00edcio - Jogo da palavra secreta</p> <p>\ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>import os\npalavra_secreta = 'perfume'\nletras_acertadas = ''\nnumero_tentativas = 0\nwhile True:\nletra_digitada = input('Digite uma letra: ')\nnumero_tentativas += 1\nif len(letra_digitada) &gt; 1:\nprint('Digite apenas uma letra.')\ncontinue\nif letra_digitada in palavra_secreta:\nletras_acertadas += letra_digitada\npalavra_formada = ''\nfor letra_secreta in palavra_secreta:\nif letra_secreta in letras_acertadas:\npalavra_formada += letra_secreta\nelse:\npalavra_formada += '*'\nprint('Palavra formada:', palavra_formada)\nif palavra_formada == palavra_secreta:\nos.system('clear')\nprint('VOC\u00ca GANHOU!! PARAB\u00c9NS!')\nprint('A palavra era', palavra_secreta)\nprint('Tentativas:', numero_tentativas)\nletras_acertadas = ''\nnumero_tentativas = 0\n</code></pre> <p>\u274e 79 - (Parte 2) Solu\u00e7\u00e3o do exerc\u00edcio - Jogo da palavra secreta</p> <p>\u274e 80 - Tipo <code>list</code> - Introdu\u00e7\u00e3o \u00e0s listas mut\u00e1veis me Python</p> <pre><code>'''\n-&gt; Lista em Python\n---------------------\n-&gt;  Tipo list - Mut\u00e1vel\n-&gt; Suporta v\u00e1rios valores de qualquer tipo\n-&gt; Conhecimentos reutiliz\u00e1veis - \u00edndices e fatiamento\n-&gt; M\u00e9todos \u00fateis:\n-&gt; append\n-&gt; insert\n-&gt; pop\n-&gt; del\n-&gt; clear\n-&gt; extend, +\n'''\n# +01234\n# -54321\nstring = ABCDE # 5 caracteres (len)\n# print(bool([])) falsy\n# print(lista, type(lista))\n#   0   1   2   3   4\n#  -5  -4  -3   -2 -1\nlista = [\n123,\nTrue,\n'Luiz Ot\u00e1vio',\n1.2,\n[]\n]\nlista[-3] = 'Maria'\nprint(lista)\nprint(lista[2], type(lista[2]))\n</code></pre> <p>\u274e 81 - Alterando uma lista con indices, del, append e pop (Tipo <code>list</code>)</p> <pre><code>'''\n-&gt; Lista em Python\n---------------------\n-&gt;  Tipo list - Mut\u00e1vel\n-&gt; Suporta v\u00e1rios valores de qualquer tipo\n-&gt; Conhecimentos reutiliz\u00e1veis - \u00edndices e fatiamento\n-&gt; M\u00e9todos \u00fateis:\n-&gt; append\n-&gt; insert\n-&gt; pop\n-&gt; del\n-&gt; clear\n-&gt; extend, +\nCreate Read Update   Delete\nCria,  ler, alterar, apagar = lista[i] (CRUD)\n'''\nlista = [ 10, 20, 30, 40 ]\n# lista[2] = 300\n# del lista[2]\n# print(lista)\n# print(lista[2])\nlista.append(50)\nlista.pop()\nlista.append(60)\nlista.append(70)\nultimo_valor = lista.pop(3)\nprint (\nlista,\n'Removido',\nultmo_valor\n)\n</code></pre> <p>\u274e 82 - Inserindo itens em qualquer \u00edndice da lista com insert(Tipo <code>list</code>)</p> <pre><code>'''\n-&gt; Lista em Python\n---------------------\n-&gt;  Tipo list - Mut\u00e1vel\n-&gt; Suporta v\u00e1rios valores de qualquer tipo\n-&gt; Conhecimentos reutiliz\u00e1veis - \u00edndices e fatiamento\n-&gt; M\u00e9todos \u00fateis:\n-&gt; append - Adiciona um item ao final\n-&gt; insert - Adiciona um item no \u00edndice escolhido\n-&gt; pop - Remove do final ou do \u00edndice escolhido\n-&gt; del - apaga um \u00edndice\n-&gt; clear - limpa a lista\n-&gt; extend - estende a lista\n-&gt; + - concatena a lista\nCreate Read Update   Delete\nCria,  ler, alterar, apagar = lista[i] (CRUD)\n'''\nlista = [10,20,30,40]\nlista.append('Luiz')\nnome = lista.pop()\nlista.append(1233)\ndel lista[-1]\n# lista.clear()\nlista.insert(\n100,\n5\n)\nprint (lista[4])\n</code></pre> <p>\u274e 83 - Concatenando e estendendo listas em Python</p> <pre><code>'''\n-&gt; Lista em Python\n---------------------\n-&gt;  Tipo list - Mut\u00e1vel\n-&gt; Suporta v\u00e1rios valores de qualquer tipo\n-&gt; Conhecimentos reutiliz\u00e1veis - \u00edndices e fatiamento\n-&gt; M\u00e9todos \u00fateis:\n-&gt; append - Adiciona um item ao final\n-&gt; insert - Adiciona um item no \u00edndice escolhido\n-&gt; pop - Remove do final ou do \u00edndice escolhido\n-&gt; del - apaga um \u00edndice\n-&gt; clear - limpa a lista\n-&gt; extend - estende a lista\n-&gt; + - concatena a lista\nCreate Read Update   Delete\nCria,  ler, alterar, apagar = lista[i] (CRUD)\n'''\nlista_a = [1, 2, 3]\nlista_b = [4, 5, 6]\nlista_c = lista_a + lista_b\nlista_a.extend(lista_b)\nprint(lista_a)\n</code></pre> <p>\u274e 84 - Cuidados com tipos de dados mut\u00e1veis - list e copy</p> <p>Cuidados com dados mut\u00e1veis:</p> <p>-&gt; = - copiado o valor (imut\u00e1veis) -&gt; = - aponta para o mesmo valor na mem\u00f3ria (mut\u00e1vel)</p> <pre><code>lista_a = ['Luiz','Maria',1,True,1.2]\nlista_b = lista_a.copy()\nlista_a[0] = 'Qualquer coisa'\nprint(lista_a)\nprint(lista_b)\n</code></pre> <p>\u274e 85 - for in com tipo <code>list</code></p> <pre><code>'''\n  -&gt;  for in com listas\n  ------------------------\n'''\nlista = ['Maria', 'Helena', 'Luiz']\nfor nome in lista\nprint( nome, type(nome))\n</code></pre> <p>\u274e 86 - Exerc\u00edcio - exiba os \u00edndices da lista (aula com solu\u00e7\u00e3o)</p> <p>\ud83d\udccd Resposta Exerc\u00edcio</p> <pre><code>'''\n  -&gt;  Exerc\u00edcio\n  ----------------\n  -&gt;  Exiba os \u00edndices da lista\n        0   Maria\n        1   Helena\n        2   Luiz\n'''\nlista = ['Maria', 'Helena', 'Luiz']\nlista.append('Jo\u00e3o')\nindices =  range(len(lista))\nfor indice in indices:\nprint(indice, lista[indice], type(lista[indice]))\n</code></pre> <p>\u274e 87 - Introdu\u00e7\u00e3o ao empacotamento e desempacotamento</p> <pre><code>_, _, nome, *resto = ['Maria', 'Helena', 'Luiz']\nprint(nome)\n</code></pre> <p>\u274e 88 - Tipo Tuple (tuplas)</p> <pre><code>  '''\n    -&gt; Tipo tupla\n    ------------------\n    -&gt; Uma lista imut\u00e1vel\n  '''\nnomes = ('Maria', 'Helena', 'Luiz')\n# nomes = tuple(nomes)\n# nomes = list(nomes)\nprint(nomes[-1])\nprint(nomes)\n</code></pre> <p>\u274e 89 - enumerate para enumerar valores de iter\u00e1veis (pegar indices)</p> <pre><code>    '''\n      -&gt; enumerate\n      --------------------\n      -&gt; enumerate iter\u00e1veis (\u00edndices)\n    '''\n# [(0, 'Maria'), (1, 'Helena'), (2 , 'Luiz'), (3, 'Jo\u00e3o')]\nlista = ['Maria', 'Helena', 'Luiz']\nlista.append('Jo\u00e3o')\nfor indice , nome in enumrate(lista):\nprint(indice, nome ,lista[indice])\n# for item in enumerate(lista):\n#   indice, nome = item\n#   print(indice, nome)\n# for tupla_enumerada in enumrate(lista):\n#   print('FOR da tupla:')\n#   for valor in tupla_enumerada:\n#     print(f'\\t {valor}')\n</code></pre> <p>\u274e 90 - Exerc\u00edcio - crie  uma lista de compras com lista</p> <p>\ud83d\udccd Resposta Exerc\u00edcio</p> <pre><code>    '''\n      -&gt; Fa\u00e7a um lista de comprar com listas\n      ---------------------------------------\n      -&gt;  O Usu\u00e1rio deve ter possibilidade de inserir, apagar valors da sua\n          lista\n      -&gt;  N\u00e3o permita que o programa quebre com\n          erros de \u00edndice inexistentes na lista\n    '''\nimport os\nlista = []\nwhile True:\nprint('Selecione uma op\u00e7\u00e3o:')\nopcao = input('[i]nserir [a]pagar [l]listar: ')\nif opcao == 'i':\nos.system('cls')\nvalor = input('Valor: ')\nlista.append(valor)\nelif opcao == 'a':\nindice_str = input('Escolha o \u00edndice para apagar:')\ntry:\nindice = int(indice_str)\ndel lista[indice]\nexcept ValueError:\nprint('Por favor digite n\u00famero int.')\nexcept IndexError:\nprint('\u00cdndice n\u00e3o existe na lista.')\nexcept Exception:\nprint('Erro desconhecido')\nelif opcao == 'l':\nos.system('cls')\nif len(lista) == 0:\nprint('Nada para a lista')\nfor i, valor in enumerate(lista):\nprint(i, valor)\nelse:\nprint('Por favor escolha i, a ou l.')\n</code></pre> <p>\u274e 91 - Solu\u00e7\u00e3o de exerc\u00edcio - crie uma  lista de compras com listas (com <code>try/ except</code>)</p> <p>\u269c\ufe0f solu\u00e7\u00e3o na parte  -&gt; 90</p> <p>\u274e 92 - Imprecis\u00e3o dos n\u00fameros de ponto flutuante + round e decimal.Decimal</p> <pre><code>    '''\n      -&gt; Imprecis\u00e3o de ponto flutuante\n      ----------------------------------\n      Double-precision floating-point format IEEE 754\n      https://en.wikipedia.org/wiki/Double-precision_floating-point_format\n      https://docs.python.org/pt-br/3/tutorial/floatingpoint.html\n    '''\nimport decimal\nnumero_1 = decimal.Decimal('0.1')\nnumero_2 = decimal.Decimal('0.7')\nnumero_3 = numero_1 + numero_2\nprint(numero_3)\nprint(f'{numero_3:.2f}')\nprint(round(numero_3,2))\n</code></pre> <p>\u274e 93 - split, join strip s\u00e3o m\u00e9todos muito \u00fateis do str</p> <pre><code>    '''\n      -&gt; split e join com list e str\n      ---------------------------------\n      -&gt; split - divide uma string (list)\n      -&gt; join - une uma string\n    '''\nfrase = ' Olha s\u00f3 que   , coisa interessante'\nlista_fases_cruas = frase.split(',')\nlista_frase = []\nfor i, frase in enumerate(lista_frases_cruas):\nlista_frases.append(lista_frases_cruas[i].split())\n# print(lista_frases_cruas)\n# print(lista_frases)\nfrases_unidas = ','.join(lista_frases)\nprint(frases_unidas)\n</code></pre> <p>\u274e 94 - Listas dentro de listas (iter\u00e1veis dentro de iter\u00e1veis)</p> <pre><code>    salas = [\n# 0        1\n['Maria', 'Helena',], # 0\n# 0\n['Elaine',],  # 1\n# 0\n['Luiz', 'Jo\u00e3o', 'Eduardo',], # 2\n]\nprint(salas[1][0])\nprint(salas[0][1])\nprint(salas[2][2])\nprint(salas[2][3][3])\nfor sala in salas:\nprint(f'A sala \u00e9 {sala}')\nfor aluno in sala:\nprint(aluno)\n</code></pre> <p>\u274e 95 - Detalhes sobre o interpretador do Python</p> <pre><code>    '''\n      -&gt; Interpretador do Python\n      --------------------------------\n      -&gt; python   mod.py (executa o mod)\n      -&gt; python   -u (unbufferd)\n      -&gt; python   -m mod (lib mod como script)\n      -&gt; python   -c 'cmd' (comando)\n      -&gt; python   -i mod.py (interativo com mod)\n      The Zen of Python, por Tim Peters\n      Bonito \u00e9 melhor que feito.\n      Expl\u00edcito \u00e9 melhor que impl\u00edcito.\n      Simples \u00e9 melhor que complexo.\n      Plano \u00e9 melhor que complicado.\n      Esparso \u00e9 melhor que aglomerador.\n      Legibilidade conta.\n      Casos especiais n\u00e3o s\u00e3o especiais o bastante para quebrar as regras.\n      Embora a praticidade ven\u00e7a a pureza.\n      Erros nunca devem passar silenciosamente.\n      A menos que sejam explicitamente silenciados.\n      Dante da ambiguidade, recuse a tenta\u00e7\u00e3o de adivinhar.\n      Deve haver um -- e s\u00f3 um -- modo \u00f3bvio de para fazer algo.\n      Embora esse modo passa n\u00e3o ser \u00f3bvio \u00e0 primeira vista a menos que voc\u00ea seja holand\u00eas.\n      Agora \u00e9 melhor que nunca.\n      Embora nunca frequentemente seja melhor que a *exatamente* agora.\n      Se implementa\u00e7\u00e3o \u00e9 dif\u00edcil de explicar \u00e9 um m\u00e1 ideia.\n      Se implementa\u00e7\u00e3o \u00e9 f\u00e1cil de explicar, pode ser uma boa ideia.\n      Namespaces s\u00e3o uma grande ideia -- vamos fazer mais dessas!\n    '''\n</code></pre> <p>\u274e 96 - Desempacotamento em chamadas de fun\u00e7\u00f5es</p> <pre><code>    '''\n      -&gt;  de m\u00e9todos e fun\u00e7\u00f5es\n    '''\nstring = 'ABCD'\nlista = ['Maria', 'Helena', 1, 2, 3, 'Eduarda']\ntupla = 'Python', '\u00e9', 'legal'\nsalas = [\n# 0\n['Maria', 'Helena', ], # 0\n# 0\n['Elaine', ], # 1\n# 0       1       2\n['Luiz', 'Jo\u00e3o', 'Eduarda', ], # 2\n]\n# p, b, *_, ap, u = lista\n# print(p, u , ap)\nprint('Maria', 'Helena', 1, 2, 3, 'Eduarda')\nprint(*lista)\nprint(*string)\nprint(*tupla)\nprint(*sala, sep='\\n')\n</code></pre> <p>\u274e 97 - Opera\u00e7\u00e3o tern\u00e1ria com Python (if e else de uma linha)</p> <pre><code>    '''\n      -&gt; &lt;valor&gt; if &lt;condicao&gt; else &lt;outro valor&gt;\n    '''\n# condicao = 10 == 11\n# variavel = 'Valor' if condicao else 'outro valor'\n# print(variavel)\n# digito = 9 # &gt; 9 = 0\n# novo_digito = digito if digito &lt;= 9 else 0\n# novo_digito = 0 if digito &gt; 9 else digito\n# print(novo_digito)\nprint('Valor' if False else 'Outro valor' if False else 'Fim')\n</code></pre> <p>\u274e 98 - Exerc\u00edcio - Gerar o primero digito de um CPF com Python</p> <p>\ud83d\udccd  Exerc\u00edcio</p> <pre><code>    '''\n      -&gt;  Calculo do primero d\u00edgito do CPF\n      ----------------------------------------\n        CPF: 746.824.890-70\n      -&gt;  Colete a soma dos 9 primeiros d\u00edgitos do CPF\n        multiplicando cada um dos valores por um\n        contagem regressiva come\u00e7ando de 10\n      Ex.:      746.824.890-70 (746824890)\n            10  9   8   7   6   5   4   3   2\n      *     7   4   6   8   2   4   8   9   0\n            70  36  48  56 12   20  32  27  0\n        -&gt; somar todos os resultados:\n          70+36+48+56+12+20+32+27+0 = 301\n        -&gt;  Multiplique o resultado anterior por 10\n            301 * 10 = 3010\n        -&gt;  Obter o resto da divis\u00e3o do conta anterior por 11\n            3010 % 11 = 7\n        -&gt; Se o resultado anterior for maior que 9\n            resultado \u00e9 0\n        -&gt; contr\u00e1rio disso:\n            resultado \u00e9 o valor da conta\n        -&gt; O primeiro d\u00edgito do CPF \u00e9 7\n    '''\n</code></pre> <p>\u274e 99 - Solu\u00e7\u00e3o de exerc\u00edcio - Gerar o primeiro digito de um CPF com Python</p> <p>\ud83c\udf93 Resposta do professor</p> <pre><code>cpf = '74682489070'\nnove_digitos = cpf[:9]\ncontador_regressivo_1 = 10\nresultado_digito_1 = 0\nfor digito in nove_digitos:\nresultado_digito_1 += int(digito) * contador_regressivo_1\ncontador_regressivo_1 -= 1\ndigito_1 = (resultado_digito_1 * 10) % 11\ndigito_1 = digito_1 if digito_1 &lt;= 9 else 0\nprint(digito_1)\n</code></pre> <p>\u274e 100 - Exerc\u00edcio -  Gerar o segundo digito de um CPF com Python</p> <p>\ud83d\udccd  Exerc\u00edcio</p> <pre><code>    '''\n      -&gt; Calculo do segundo d\u00edgito do CPF\n      -------------------------------------\n      CPF: 746.824.890-70\n      -&gt; Colete a soma dos 9 digitos do primeros d\u00edgitos do CPF\n      -&gt; MAIS O PRIMERO DIGITO,\n      -&gt; multiplique cada um dos valores por uma\n          contagem regressiva come\u00e7ado de 11\n      Ex.: 746.824.890-70 (7468248907)\n          11   10   9   8   7   6   5   4   3   2\n      *    7    4    6   8   2   4   8   9   0   7 &lt;-- PRIMEIRO DIGITO\n          77    40   54  64  14  24  40  36  0   14\n        -&gt; Somar todos os resultados:\n          77+40+54+64+14+24+40+36+0+14 = 363\n        -&gt; Multiplique o resultado da divis\u00e3o do conta por 10\n          363 * 10 = 3630\n        -&gt; obter o resto da divis\u00e3o do conta anterior por 11\n          3630 % 11 = 0\n        -&gt; Se o resultado anterior for maior que 9:\n            resultado \u00e9 0\n        -&gt; Contr\u00e1rio disso:\n            resultado \u00e9 valor da conta\n        -&gt; O segundo digito do CPF \u00e9 0\n    '''\ncpf = '74682489070'\ndez_digitos = cpf[:10]\ncontador_regressivo_2 = 11\nresultado_digito_2 = 0\nfor digito in dez_digitos:\nresultado_digito_2 += int(digito) * contador_regressivo_2\ncontador_regressivo_2 -= 1\ndigito_2 = (resultado_digito_2 * 10) % 11\ndigito_2 = digito_2 if digito_2 &lt; 9  else 0\nprint(digito_2)\n</code></pre> <p>\u274e  101 - Solu\u00e7\u00e3o de exerc\u00edcio - Gerar o segundo digito de um CPF com Python</p> <p>\ud83c\udf93 Resposta do professor</p> <pre><code>      # cpf = '36440847007'  # Esse CPF gera o primeiro d\u00edgito como 10 (0)\ncpf_enviado_usuario = '74682489070'\nnove_digitos = cpf_enviado_usuario[:9]\ncontador_regressivo_1 = 10\nresultado_digito_1 = 0\nfor digito in nove_digitos:\nresultado_digito_1 += int(digito) * contador_regressivo_1\ncontador_regressivo_1 -= 1\ndigito_1 = (resultado_digito_1 * 10) % 11\ndigito_1 = digito_1 if digito_1 &lt;= 9 else 0\ndez_digitos = nove_digitos + str(digito_1)\ncontador_regressivo_2 = 11\nresultado_digito_2 = 0\nfor digito in dez_digitos:\nresultado_digito_2 += int(digito) * contador_regressivo_2\ncontador_regressivo_2 -= 1\ndigito_2 = (resultado_digito_2 * 10) % 11\ndigito_2 = digito_2 if digito_2 &lt;= 9 else 0\nif cpf_gerado_pelo_calculo = f'{nove_digitos}{digito_1}{digito_2}'\nprint(f'{cpf_enviado_usuario} \u00e9 v\u00e1lido')\nelse:\nprint('CPF inv\u00e1lido')\n</code></pre> <p>\u274e 102 - Poss\u00edveis problemas e solu\u00e7\u00f5es para nosso algoritmo do CPF</p> <pre><code>  '''\n      -&gt; Calculo do segundo d\u00edgito do CPF\n      -------------------------------------\n      CPF: 746.824.890-70\n      -&gt; Colete a soma dos 9 digitos do primeros d\u00edgitos do CPF\n      -&gt; MAIS O PRIMERO DIGITO,\n      -&gt; multiplique cada um dos valores por uma\n          contagem regressiva come\u00e7ado de 11\n      Ex.: 746.824.890-70 (7468248907)\n          11   10   9   8   7   6   5   4   3   2\n      *    7    4    6   8   2   4   8   9   0   7 &lt;-- PRIMEIRO DIGITO\n          77    40   54  64  14  24  40  36  0   14\n        -&gt; Somar todos os resultados:\n          77+40+54+64+14+24+40+36+0+14 = 363\n        -&gt; Multiplique o resultado da divis\u00e3o do conta por 10\n          363 * 10 = 3630\n        -&gt; obter o resto da divis\u00e3o do conta anterior por 11\n          3630 % 11 = 0\n        -&gt; Se o resultado anterior for maior que 9:\n            resultado \u00e9 0\n        -&gt; Contr\u00e1rio disso:\n            resultado \u00e9 valor da conta\n        -&gt; O segundo digito do CPF \u00e9 0\n    '''\n# cpf = '36440847007'  # Esse CPF gera o primeiro d\u00edgito como 10 (0)\nimport re\nimport sys\n# cpf_enviado_usuario = '746.824.890-70' \\\n#   .replace('.', '') \\\n#   .replace(' ', '') \\\n#   .replace('-', '')\nentrada = input('CPF [746.824.890-70]')\ncpf_enviado_usuario = re.sub(r'[^0-9]', '', entrada)\nentrada_e_sequencial = entrada == entrada[0] * len(entrada)\nif entrada_e_sequencial\nprint('Voc\u00ea enviou dados sequenciais')\nsys.exit()\nnove_digitos = cpf_enviado_usuario[:9]\ncontador_regressivo_1 = 10\nresultado_digito_1 = 0\nfor digito in nove_digitos:\nresultado_digito_1 += int(digito) * contador_regressivo_1\ncontador_regressivo_1 -= 1\ndigito_1 = (resultado_digito_1 * 10) % 11\ndigito_1 = digito_1 if digito_1 &lt;= 9 else 0\ndez_digitos = nove_digitos + str(digito_1)\ncontador_regressivo_2 = 11\nresultado_digito_2 = 0\nfor digito in dez_digitos:\nresultado_digito_2 += int(digito) * contador_regressivo_2\ncontador_regressivo_2 -= 1\ndigito_2 = (resultado_digito_2 * 10) % 11\ndigito_2 = digito_2 if digito_2 &lt;= 9 else 0\nif cpf_gerado_pelo_calculo = f'{nove_digitos}{digito_1}{digito_2}'\nprint(f'{cpf_enviado_usuario} \u00e9 v\u00e1lido')\nelse:\nprint('CPF inv\u00e1lido')\n</code></pre> <p>\u274e 103 - Criando um gerador de CPFs com nosso algoritmo e Python</p> <pre><code>      import random\nimport sys\nfor i in range(9):\nnove_digitos += str(random.randint(0,9))\ncontador_regressivo_1 = 10\nresultado_digito_1 = 0\nfor digito in nove_digitos:\nresultado_digito_1 += int(digito) * contador_regressivo_1\ncontador_regressivo_1 -= 1\ndigito_1 = (resultado_digito_1 * 10) % 11\ndigito_1 = digito_1 if digito_1 &lt;= 9 else 0\ndez_digitos = nove_digitos + str(digito_1)\ncontador_regressivo_2 = 11\nresultado_digito_2 = 0\nfor digito in dez_digitos:\nresultado_digito_2 += int(digito) * contador_regressivo_2\ncontador_regressivo_2 -= 1\ndigito_2 = (resultado_digito_2 * 10) % 11\ndigito_2 = digito_2 if digito_2 &lt;= 9 else 0\ncpf_gerado_pelo_calculo = f'{nove_digitos}{digito_1}{digito_2}'\nprint(cpf_gerado_pelo_calculo)\n</code></pre>"},{"location":"conteudo/#secao-4-python-intermediario-funcoes-dicionarios-modulos-programacao-funcional-e","title":"\ud83d\udd1c \u274e Se\u00e7\u00e3o 4 Python Intermedi\u00e1rio - Fun\u00e7\u00f5es, Dicion\u00e1rios, M\u00f3dulos, Programa\u00e7\u00e3o Funcional e +","text":"<p>\u274e 104 - O que vamos aprender nessa se\u00e7\u00e3o intermedi\u00e1ria?</p> <p>\u274e 105 - Introdu\u00e7\u00e3o \u00e0s fun\u00e7\u00f5es python - def define uma fun\u00e7\u00e3o</p> <pre><code>    '''\n      -&gt; Introdu\u00e7\u00e3o \u00e0s fun\u00e7\u00f5es (def) em Python\n      -----------------------------------------\n      -&gt; Fun\u00e7\u00f5es s\u00e3o trechos de c\u00f3digos usados para\n          replicar determinada a\u00e7\u00e3o ao longo do seu c\u00f3digo.\n      -&gt; Elas podem receber valores para par\u00e2metros (argumentos)\n          e retornar um valor espec\u00edfico.\n      -&gt; Por padr\u00e3o, fun\u00e7\u00f5es Python retornam None (nada).\n    '''\n# def Print(a, b , c)\n#   print('V\u00e1rios_1')\n#   print('V\u00e1rios_2')\n#   print('V\u00e1rios_3')\n#   print('V\u00e1rios_4')\n# def imprimir(a, b, c):\n#   print(a, b, c)\ndef saudacao(nome='Seu nome'):\nprint(f'Ol\u00e1, {nome}')\nsaudacao('Luiz Ot\u00e1vio')\nsaudacao('Maria')\nsaudacao('Helena')\nsaudacao()\n</code></pre> <p>\u274e 105.1 - Teste 8 - seus conhecimentos Question\u00e1rio 8</p> <p>\u274e 106 - Argumentos e nomeados e argumentos posicionais (n\u00e3o nomeados) em fun\u00e7\u00f5es</p> <pre><code>'''\n-&gt; Argumento nomeado tem nome com sinal de igual\n-&gt; Argumento n\u00e3o nomeado recebe apenas o argumento (valor)\n'''\ndef soma(x, y, z):\n# Defini\u00e7\u00e3o\nprint(f'{x=} {y=} {z=}', '|', 'x + y + z', x + y + z )\nsoma(1,2,3)\nsoma(1,y=2,z=3)\nprint(1,2,3, sep='-')\n</code></pre> <p>\u274e 106.1 - Teste 9 - seus conhecimentos Question\u00e1rio 9</p> <p>\u274e 107 - Valores padr\u00f5es para par\u00e2metros em fun\u00e7\u00f5es Python + NoneType e None</p> <pre><code>'''\n-&gt; valores padr\u00e3o para par\u00e2metros\n-----------------------------------------------------------\n-&gt; Ao definir uma fun\u00e7\u00e3o, os par\u00e2metros podem\n    ter valores padr\u00e3o. Caso o valor n\u00e3o seja\n    enviado para o par\u00e2metro, o valor podr\u00e3o ser\u00e1\n    usado.\n-&gt; Refatorar: editar o seu c\u00f3digo.\n'''\ndef soma(x, y, z=None):\nif z is not None\nprint(f'{x=} {y=} {z=}', '|', 'x + y + z', x + y + z )\nelse:\nprint(f'{x=} {y=}', '|', 'x + y', x + y )\nsoma(1,2,3)\nsoma(1,y=2,z=3)\nprint(1,2,3, sep='-')\n</code></pre> <p>\u274e 107.1 - Teste 10 - seus conhecimentos Question\u00e1rio 10</p> <p>\u274e 108 - (Parte 1) Escopo de fun\u00e7\u00f5es e m\u00f3dulos em Python + global</p> <pre><code>'''\n  -&gt; Escopo de fun\u00e7\u00f5es em Python\n  -------------------------------\n  -&gt; Escopo de significa o local onde aquele c\u00f3digo pode atingir.\n  -&gt; Existe o escopo global e local\n  -&gt; O escopo global \u00e9 o escopo onde todo o c\u00f3digo \u00e9 alcan\u00e7\u00e1vel.\n  -&gt; O escopo local \u00e9 o escopo onde apenas nomes do mesmo local\n      podem ser alcan\u00e7ados.\n  -&gt; N\u00e3o temos acesso a nomes de escopos internos nos escopos\n      externos\n  -&gt; A palavra globa faz uma vari\u00e1vel do escopo externo\n      ser a mesma no escopo interno.\n'''\ndef escopo():\nglobal x\nx = 10\ndef outro_funcao():\nglobal x\nx = 11\ny = 2\nprint(x, y)\noutra_funcao()\nprint(x)\nprint(x)\nescopo()\nprint(x)\n</code></pre> <p>\u274e 109 - (Parte 2) Escopo de fun\u00e7\u00f5es e m\u00f3dulos em Python + global</p> <p>Debugger o c\u00f3digo da aula 108</p> <p>\u274e 109.1 - Teste 11 - seus conhecimentos Question\u00e1rio 11</p> <p>\u274e 110 - Retorno de valores das fun\u00e7\u00f5es (<code>return</code>)</p> <pre><code>  def soma (x, y):\nif x &gt; 10:\nreturn [10, 20]\nreturn x + y\n# variavel = soma(1 , 2)\n# variavel = int('1')\nsoma_1 = soma(2, 2)\nsoma_2 = soma(3, 3)\nprint(soma_1)\nprint(soma_2)\nprint(soma(11, 55))\n</code></pre> <p>\u274e 111 - (Parte 1)* args para quantidade de argumentos n\u00e3o nomeados vari\u00e1veis</p> <pre><code>'''\n-&gt; args - Argumentos n\u00e3o nomeados\n------------------------------------\n-&gt; *args (empacotamento e desempacotamento)\n'''\n# Lembre-te de desempacotamento\nx, y, *resto = 1, 2, 3, 4\nprint(x, y, resto)\ndef soma(x, y):\nreturn x + y\ndef soma(*args):\ntotal = 0\nfor numero in args:\nprint('Total', total, numero)\ntotal += numero\nprint('Total', total)\nprint(total)\nsoma(1, 2, 3, 4, 5, 6)\n</code></pre> <p>\u274e 112 - (Parte 2)* args para quantidade de argumentos n\u00e3o nomeados vari\u00e1veis</p> <pre><code>'''\n-&gt; args - Argumentos n\u00e3o nomeados\n------------------------------------\n-&gt; *args (empacotamento e desempacotamento)\n'''\n# Lembre-te de desempacotamento\n# x, y, *resto = 1, 2, 3, 4\n# print(x, y, resto)\n# def soma(x, y):\n#   return x + y\ndef soma(*args):\ntotal = 0\nfor numero in args:\ntotal+= numero\nreturn total\nsoma_1_2_3 = soma (1, 2, 3)\n# print(soma_1_2_3)\nnumeros = 1, 2, 3, 4, 5, 6, 7, 78, 10\noutra_soma = soma(*numeros)\nprint(outra_soma)\nprint(sum(numeros))\n</code></pre> <p>\u274e 113 - Exec\u00edcios com Fun\u00e7\u00f5es + Solu\u00e7\u00e3o (prepare-se para pausar)</p> <p>\ud83d\udccd  Exerc\u00edcio com proposta</p> <pre><code>'''\n-&gt; Exerc\u00edcios com fun\u00e7\u00f5es\n----------------------------\n-&gt; Crie uma fun\u00e7\u00e3o que multiplica todos os argumentos\n  n\u00e3o nomeados recebidos\n-&gt; Retorne o total para um vari\u00e1vel em mostre o valor\n  da variavel\n'''\ndef mult(*args):\ntotal = 1\nfor num in args:\ntotal *= num\nreturn total\n'''\n-&gt; crie uma fun\u00e7\u00e3o se um n\u00famero \u00e9 par ou \u00edmpar\n-&gt; Retorne se o n\u00famero \u00e9 par ou \u00edmpar\n'''\ndef par_impar(x)\nif x % 2 == 0\nreturn  f'{x} \u00e9 par'\nreturn f'{x} \u00e9 impar'\n</code></pre> <p>\u274e 114 - Higher Order Functions - Fun\u00e7\u00f5es de primeira classe</p> <pre><code>'''\n-&gt; Higher Order Functions\n-----------------------------\n-&gt; fun\u00e7\u00f5es de primeira classe\n'''\ndef saudacao(msg, nome)\nreturn f'{msg}, {nome}!'\ndef executa(funcao, *args)\nreturn funcao(*args)\nprint(executa(saudacao), 'Bom dia', 'Luiz')\nprint(executa(saudacao), 'Boa noite', 'Maria')\n</code></pre> <p>\u274e 115 - Termos t\u00e9cnicos: Higher Order Functions e First-Class Functions</p> <p>-&gt; Termos T\u00e9cnicos : Higher Order</p> <p>\ud83c\udf80 Academicamente, os termos Higher Oder e  First Class Functons t\u00ea significados diferentes.</p> <ul> <li> <p>Higher Oder Functions - Fun\u00e7\u00f5es que podem receber e/ou retornar outras fun\u00e7\u00f5es.</p> </li> <li> <p>First-Class Functions - Fun\u00e7\u00e3o que s\u00e3o tratadas como outros tipos de dados comuns (strings, inteiros, etc...)</p> </li> </ul> <p>\ud83c\udf80 N\u00e3o faria muita diferen\u00e7a no seu c\u00f3digo, mas pense que deveria lhe informar isso.</p> <p>\ud83c\udf80 Oberva\u00e7\u00e3o: esses termos podem ser diferentes e ainda refletir o mesmo significado.</p> <p>\u274e 116 - Closure e fun\u00e7\u00f5es que retornam outras fun\u00e7\u00f5es</p> <pre><code>def cria_saudacao(saudacao):\ndef saudar(nome):\nreturn f'{saudacao}, {nome} !'\nreturn saudar\nfalar_bom_dia = cria_saudacao('Bom dia')\nfalar_boa_noite = cria_saudacao('Boa noite')\nfor nome in ['Maria', 'Joana' 'Luiz']:\nprint(falar_bom_dia(nome))\nprint(falar_boa_noite(nome))\n</code></pre> <p>\u274e 117 - Exerc\u00edcio com fun\u00e7\u00f5es</p> <p>\ud83d\udccd  Exerc\u00edcio Resposta</p> <pre><code>'''\n-&gt; Exerc\u00edcios\n-----------------\n-&gt; Crie fun\u00e7\u00f5es que duplicam, triplicam e quadruplicam\n    o numero recebido como par\u00e2metro\n'''\ndef crie_mutipil(multiplier):\ndef multip(number):\nreturn number * multiplier\nreturn multip\nduplicar = criar_multiplicador(2)\ntriplicar = criar_multiplicador(3)\nquadruplicar = criar_multiplicador(4)\nprint(duplicar(2))\nprint(triplicar(2))\nprint(quadruplicar(2))\n</code></pre> <p>\u274e 118 - Solu\u00e7\u00e3o do exerc\u00edcio com fun\u00e7\u00f5es</p> <p>\ud83c\udf93 Resposta do professor</p> <pre><code>'''\n-&gt; Exerc\u00edcios\n-----------------\n-&gt; Crie fun\u00e7\u00f5es que duplicam, triplicam e quadruplicam\n  o numero recebido como par\u00e2metro\n  def duplicar(numero):\n    return numero * 2\n  def triplicar(numero):\n      return numero * 3\n  def quadruplicar(numero):\n      return numero * 4\n'''\ndef criar_multiplicador(multiplicador):\ndef multiplicar(numero):\nreturn numero * multiplicador\nreturn multiplicar\nduplicar = criar_multiplicador(2)\ntriplicar = criar_multiplicador(3)\nquadruplicar = criar_multiplicador(4)\nprint(duplicar(2))\nprint(triplicar(2))\nprint(quadruplicar(2))\n</code></pre> <p>\u274e 119 - Introdu\u00e7\u00e3o ao tipo de dados <code>dict</code>- Dicion\u00e1rios em Python</p> <pre><code>'''\n-&gt; Dicion\u00e1rios em Python (tipo dict)\n--------------------------------------\n-&gt; Dicion\u00e1rios s\u00e3o estruturas de dados de tipo\n  par \"chave\" e \"valor\"\n-&gt; Chave podem ser consideradas como o \"\u00edndice\"\n  que vimos na lista e podem ser de tipo imut\u00e1vel\n  como: str, int, float bool, tuple, e etc.\n-&gt;  O valor pode ser de qualquer tipo incluindo outro\n  dicion\u00e1rio.\n-&gt; Usamos as chave - {} ou classe dict para criar\n  dicion\u00e1rios.\n-&gt;  Imut\u00e1veis: str, int, float bool, tuple.\n-&gt;  Mut\u00e1vel: dict, list\n-&gt;  pessoa = {\n'nome': 'Luiz Ot\u00e1vio',\n'sobrenome': 'Miranda',\n'idade': 18,\n'altura': 1.8,\n'endere\u00e7o': [\n    {'rua': 'tal tal', 'n\u00famero': 123}\n    {'rua': 'outra rua', 'n\u00famero': 321}\n  ]\n}\npessoa = dict(nome= 'Luiz Ot\u00e1vio', sobrenome='Miranda')\n'''\npessoa = {\n'nome': 'Luiz Ot\u00e1vio',\n'sobrenome': 'Miranda',\n'idade': 18,\n'altura': 1.8,\n'endere\u00e7o': [\n{'rua': 'tal tal', 'n\u00famero': 123}\n{'rua': 'outra rua', 'n\u00famero': 321}\n],\n}\nprint(pessoa, type(pessoa))\nprint(pessoa(['nome']))\nprint(pessoa(['sobrenome']))\nprint()\nfor cave in pessoa\nprint(chave, pessoa[chave])\n</code></pre> <p>\u274e 120 - Manipulando chave e valor em dicion\u00e1rios em Python</p> <pre><code>pessoa ={}\nchave = 'nome'\npessoa[chave] = 'Luiz Ot\u00e1vio'\npessoa['sobrenome'] = 'Miranda'\nprint(pessoa[chave])\npessoa[chave] = 'Maria'\ndel pessoa['sobrenome']\nprint(pessoa)\nprint(pessoa['nome'])\n# print(pessoa.get('sobrenome'))\nif pessoa.get('sobrenome') is None\nprint('N\u00c3O EXISTE')\nelse:\nprint(pessoa['sobrenome'])\n# print('Isso N\u00e3o vai')\n</code></pre> <p>\u274e 121 - (Parte 1) M\u00e9todos \u00fateis nos dicion\u00e1rios Python (<code>dict</code>)</p> <pre><code>'''\n-&gt; len - quantas chaves\n-&gt;  keys - iter\u00e1vel com as chaves\n-&gt;  values - iter\u00e1vel com os valores\n-&gt;  items - iter\u00e1vel com chaves e valores\n-&gt;  stdefault - adiciona valor se a chave n\u00e3o existe\n-&gt;  copy - retorna uma c\u00f3pia rasa (shallow copy)\n-&gt;  get - obt\u00e9m uma chave\n-&gt;  pop - apaga um item com a chave especificada (del)\n-&gt;  popitem - apaga o \u00faltimo item adicionado\n-&gt;  update - atualiza um dicionario com outro\n'''\npessoa = {\n'nome': 'Luiz Ot\u00e1vio',\n'sobrenome': 'Miranda',\n'idade': 900,\n}\npessoa.setdefault('idade', 0)\nprint(len(pessoa))\nprint(list(pessoa.keys()))\nprint(list(pessoa.values()))\nprint(list(pessoa.items()))\nfor valor in pessoa.values():\nprint(valor)\nfor chave, valor in pessoa.items():\nprint (chave, valor)\n</code></pre> <p>\u274e 122 - Shallow Copy vs Deep Copy em dados mut\u00e1veis Python</p> <pre><code>'''\n  -&gt; len - quantas chaves\n  -&gt;  keys - iter\u00e1vel com as chaves\n  -&gt;  values - iter\u00e1vel com os valores\n  -&gt;  items - iter\u00e1vel com chaves e valores\n  -&gt;  stdefault - adiciona valor se a chave n\u00e3o existe\n  -&gt;  copy - retorna uma c\u00f3pia rasa (shallow copy)\n  -&gt;  get - obt\u00e9m uma chave\n  -&gt;  pop - apaga um item com a chave especificada (del)\n  -&gt;  popitem - apaga o \u00faltimo item adicionado\n  -&gt;  update - atualiza um dicion\u00e1rios com outro\n'''\nimport copy\nd_1 = {\n'c_1': 1,\n'c_2': 2,\n'l_1': [0, 1, 2],\n}\nd_2 = d_1.copy()\nd_2['c_1'] = 1000\nd_2['l_1'][1] = 999999\nprint(d_1)\nprint(d_2)\n</code></pre> <p>\u274e 123 - (Parte 2) M\u00e9todos \u00fateis nos dicion\u00e1rios Python (<code>dict</code>)</p> <pre><code>'''\n-&gt; len - quantas chaves\n-&gt;  keys - iter\u00e1vel com as chaves\n-&gt;  values - iter\u00e1vel com os valores\n-&gt;  items - iter\u00e1vel com chaves e valores\n-&gt;  stdefault - adiciona valor se a chave n\u00e3o existe\n-&gt;  copy - retorna uma c\u00f3pia rasa (shallow copy)\n-&gt;  get - obt\u00e9m uma chave\n-&gt;  pop - apaga um item com a chave especificada (del)\n-&gt;  popitem - apaga o \u00faltimo item adicionado\n-&gt;  update - atualiza um dicion\u00e1rio com outro\n'''\np_1 = {\n'nome': 'Luiz',\n'sobrenome': 'Miranda'\n}\nprint(p_1['nome'])\nprint(p_1.get('nome', 'N\u00e3o existe'))\nnome = p_1.pop(nome)\nprint(nome)\nprint(p_1)\nultima_chave = p_1.popitem()\nprint(ultima_chave)\nprint(p_1)\np_1.update({\n'nome': 'novo valor',\n'idade': 30,\n})\np_1.update(nome='novo valor', idade= 30)\ntupla = ((nome, 'novo valor'), ('idade', 30))\nlista = [['nome', 'novo valor'], ['idade', 30]]\np_1.update(lista)\nprint(p_1)\n</code></pre> <p>\u274e 124 - Exerc\u00edcio - sistema de perguntas e respostas com Python</p> <p>\ud83d\udccd  Exerc\u00edcio</p> <pre><code>perguntas = [\n{\n'Pergunta': 'Quanto \u00e9 2 + 2 ?',\n'Op\u00f5es': ['1', '2', '4', '5'],\n'Resposta': '4',\n},\n{\n'Pegunta': 'Quanto \u00e9 2 + 2 ?',\n'Op\u00f5es': ['25', '55', '10', '51'],\n'Resposta': '25',\n},\n{\n'Pegunta': 'Quanto \u00e9 10 / 2 ?',\n'Op\u00f5es': ['4', '5', '2', '1'],\n'Resposta': '5',\n},\n]\n</code></pre> <p>\u274e 125 - Solu\u00e7\u00e3o do Exerc\u00edcio - sistema de perguntas e respostas com Python</p> <p>\ud83c\udf93 Resposta do professor</p> <pre><code>'''\n-&gt; Exerc\u00edcios - Sistema de perguntas e respostas\n--------------------------------------------------\n'''\nperguntas = [\n{\n'Pergunta': 'Quanto \u00e9 2 + 2 ?',\n'Op\u00f5es': ['1', '2', '4', '5'],\n'Resposta': '4',\n},\n{\n'Pergunta': 'Quanto \u00e9 2 + 2 ?',\n'Op\u00f5es': ['25', '55', '10', '51'],\n'Resposta': '25',\n},\n{\n'Pergunta': 'Quanto \u00e9 10 / 2 ?',\n'Op\u00f5es': ['4', '5', '2', '1'],\n'Resposta': '5',\n},\n]\nopcoes = perguntas['Op\u00e7\u00f5es']\nqtd_acertos = 0\nacertou = False\nescolha_int = None\nqtd_opoes = len(opcoes)\nfor pergunta in perguntas:\nprint('Pergunta :', perguntas['Pergunta'])\nfor i, opcao  in enumerate(perguntas['Op\u00e7\u00f5es']):\nprint(f'{i})', opcao)\nprint()\nescolha = input('Escolha uma op\u00e7\u00e3o:')\nif escolha.isdigit():\nescolha_int = int(escolha)\nif escolha_int is not None:\nif escolha_int &gt;= 0 and escolha_int &lt; qtd_opcoes:\nif opcoes[escolha_int] == pergunta['Resposta']:\nacertou = True\nprint()\nif acetou:\nqtd_acertou += 1\nprint('Acertou \ud83d\udc4d')\nelse:\nprint('Errou \u274c')\nprint()\nprint('Voc\u00ea acertou', qtd_acertos)\nprint('de', len(perguntas), 'perguntas.')\n</code></pre> <p>\u274e 126 - Introdu\u00e7\u00e3o ao tipo <code>set</code> em Python (conjuntos)</p> <pre><code>'''\n-&gt;  Conjuntos s\u00e3o ensinados n matem\u00e1tica\n-&gt;  https://brasilescola.uol.com.br/matematica/conjunto.htm\n-&gt;  Representado graficamente pelo diagrama de Venn\n-&gt;  Sets em Python s\u00e3o mut\u00e1veis, por\u00e9m aceitam apenas\n    tipos imut\u00e1veis como valor interno.\n  Criando um set\n  set(iter\u00e1vel) ou {1, 2, 3}\n'''\ns_1 = set() #vazio\ns_1 = {'Luiz', 1, 2, 3} com dados\n'''\n-&gt;  Sets s\u00e3o eficientes para remover valores duplicados\n      de iter\u00e1veis.\n-&gt;  N\u00e3o aceitam valores mut\u00e1veis;\n-&gt;  Seus valores ser\u00e3o sempre \u00fanicos;\n-&gt;  n\u00e3o tem \u00edndexes;\n-&gt;  N\u00e3o gerantem ordem;\n-&gt;  S\u00e3o iter\u00e1veis (for, in , not in)\n-&gt;  M\u00e9todos \u00fateis\n-----------------------------\n-&gt;  add, update, clear, discard\n-&gt; Operadores \u00fateis:\n------------------------------\n-&gt;  Uni\u00e3o | uni\u00e3o (union) - Une\n-&gt;  Intersec\u00e7\u00e3o &amp; (intersection) -\n      Itens presentes em ambos\n-&gt;  Diferen\u00e7a - Itens presentes apenas no set da esquerda\n-&gt;  Diferen\u00e7a sim\u00e9trica ^ - Itens que n\u00e3o est\u00e3o em ambos\n'''\n</code></pre> <p>\u274e 127 - Peculiaridades do tipo mut\u00e1veis <code>set</code> em Python</p> <pre><code>'''\n-&gt;  Conjuntos s\u00e3o ensinados n matem\u00e1tica\n-&gt;  https://brasilescola.uol.com.br/matematica/conjunto.htm\n-&gt;  Representado graficamente pelo diagrama de Venn\n-&gt;  Sets em Python s\u00e3o mut\u00e1veis, por\u00e9m aceitam apenas\n    tipos imut\u00e1veis como valor interno.\n  Criando um set\n  set(iter\u00e1vel) ou {1, 2, 3}\n'''\ns_1 = set() #vazio\ns_1 = {'Luiz', 1, 2, 3} com dados\n'''\n-&gt;  Sets s\u00e3o eficientes para remover valores duplicados\n    de iter\u00e1veis.\n-&gt;  N\u00e3o aceitam valores mut\u00e1veis;\n-&gt;  Seus valores ser\u00e3o sempre \u00fanicos;\n-&gt;  n\u00e3o tem indexes;\n-&gt;  N\u00e3o garantem ordem;\n-&gt;  S\u00e3o iter\u00e1veis (for, in , not in)\n'''\nl_1 = [1, 2, 3, 3, 3, 3, 1]\ns_1 = set(l_1)\nl_2 = list(s_1)\ns_1 = {1, 2, 3}\nprint(3 not in s_1)\nfor num in s_1:\nprint(num)\n'''\n-&gt;  M\u00e9todos \u00fateis\n-----------------------------\n-&gt;  add, update, clear, discard\n-&gt; Operadores \u00fateis:\n------------------------------\n-&gt;  Uni\u00e3o | uni\u00e3o (union) - Une\n-&gt;  Intersec\u00e7\u00e3o &amp; (intersection) -\n      Itens presentes em ambos\n-&gt;  Diferen\u00e7a - Itens presentes apenas no set da esquerda\n-&gt;  Diferen\u00e7a sim\u00e9trica ^ - Itens que n\u00e3o est\u00e3o em ambos\n'''\n</code></pre> <p>\u274e 128 - M\u00e9todos \u00fateis do tipo <code>set</code> em Python</p> <pre><code>'''\n-&gt;  M\u00e9todos \u00fateis\n-----------------------------\n-&gt;  add, update, clear, discard\n'''\ns_1 = set()\ns_1.add('Luiz')\ns_1.add(1)\ns_1.update(('O\u00e1 mundo', 1, 2, 3, 4))\ns_1.clear()\ns_1.discard('O\u00e1 mundo')\ns_1.discard('Luiz')\nprint(s_1)\n'''\n-&gt; Operadores \u00fateis:\n------------------------------\n-&gt;  Uni\u00e3o | uni\u00e3o (union) - Une\n-&gt;  Intersec\u00e7\u00e3o &amp; (intersection) -\n      Itens presentes em ambos\n------------------------------------------------\n-&gt;  Diferen\u00e7a - Itens presentes apenas no set da esquerda\n-&gt;  Diferen\u00e7a sim\u00e9trica ^ - Itens que n\u00e3o est\u00e3o em ambos\n'''\ns_1 = {1, 2, 3}\ns_2 = {2, 3, 4}\ns_3 = s_1 | s_2\ns_3 = s_1 &amp; s_2\ns_3 = s_1 - s_2\ns_3 = s_1 ^ s_2\nprint(s_3)\n</code></pre> <p>\u274e 129 - Operadores importantes para o tipo ser (conjuntos)</p> <pre><code>s_1.clear()\ns_1.discard('O\u00e1 mundo')\ns_1.discard('Luiz')\nprint(s_1)\n'''\n-&gt; Operadores \u00fateis:\n------------------------------\n-&gt;  Uni\u00e3o | uni\u00e3o (union) - Une\n'''\n</code></pre> <p>\u274e 130 - Exemplo de uso do tipo <code>set</code></p> <pre><code>letras = set()\nwhile True:\nletras = input('Digite: ')\nletras.add(letra.lower())\nif 'l' in letras:\nprint('PARAB\u00c9NS')\nbreak\nprint(letras)\n</code></pre> <p>\u274e 131 - Exerc\u00edcio - Encontre o primeiro duplicado considerando a segunda ocorr\u00eancia</p> <p>\ud83d\udccd  Exerc\u00edcio</p> <pre><code>'''\n-&gt; Exerc\u00edcio\n-------------------------------------------------------\n-&gt; Crie uma fun\u00e7\u00e3o que encontra o primeiro duplicado\n  considerando o segundo n\u00famero como a duplica\u00e7\u00e3o .\n  Retorne a duplica\u00e7\u00e3o considerada.\n-&gt; Requisitos:\n------------------------------------------------------\n-&gt;  A ordem do n\u00famero duplicado \u00e9 considerada a partir da segunda\n  ocorr\u00eancia no n\u00famero, ou seja,  n\u00famero duplicado em si.\nExemplo:\n  [1, 2, 3, -&gt;3&lt;-, 2, 1] 1, 2 e  s\u00e3o duplicados (retorne 3)\n  [1, 2, 3, 4, 5 , 6] -&gt; Retorne -1 (n\u00e3o tem duplicados)\n  [1, 4, 9, 8, -&gt;9&lt;-, 4, 8 ] (retorne 9)\nSe n\u00e3o encontrar duplicados na lista, retorne -1\n'''\nlista_de_listas_de_inteiros = [\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n[9, 1, 8, 9, 9, 7, 2, 1, 6, 8],\n[1, 3, 2, 2, 8, 6, 5, 9, 6, 7],\n[3, 8, 2, 8, 6, 7, 7, 3, 1, 9],\n[4, 8, 8, 8, 5, 1, 10, 3, 1, 7],\n[1, 3, 7, 2, 2, 1, 5, 1, 9, 9],\n[10, 2, 2, 1, 3, 5, 10, 5, 10, 1],\n[1, 6, 1, 5, 1, 1, 1, 4, 7, 3],\n[1, 3, 7, 1, 10, 5, 9, 2, 5, 7],\n[4, 7, 6, 5, 2, 9, 2, 1, 2, 1],\n[5, 3, 1, 8, 5, 7, 1, 8, 8, 7],\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n]\n</code></pre> <p>\u274e 132 - Solu\u00e7\u00e3o - Encontre o primeiro duplicado considerando a segunda ocorr\u00eancia</p> <p>\ud83c\udf93 Resposta do professor</p> <pre><code>  lista_de_listas_de_inteiros = [\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n[9, 1, 8, 9, 9, 7, 2, 1, 6, 8],\n[1, 3, 2, 2, 8, 6, 5, 9, 6, 7],\n[3, 8, 2, 8, 6, 7, 7, 3, 1, 9],\n[4, 8, 8, 8, 5, 1, 10, 3, 1, 7],\n[1, 3, 7, 2, 2, 1, 5, 1, 9, 9],\n[10, 2, 2, 1, 3, 5, 10, 5, 10, 1],\n[1, 6, 1, 5, 1, 1, 1, 4, 7, 3],\n[1, 3, 7, 1, 10, 5, 9, 2, 5, 7],\n[4, 7, 6, 5, 2, 9, 2, 1, 2, 1],\n[5, 3, 1, 8, 5, 7, 1, 8, 8, 7],\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1],\n]\ndef encontrar_primeiro_duplicado(lista_de_inteiros):\nnumeros_checados = set()\nprimeiro_duplicado = -1\nfor numero in lista_de_inteiros:\nif numero in numero_checados:\nprimeiro_duplicado = numero\nbreak\nnumeros_checados.add(numero)\nreturn primeiro_duplicado\nfor lista in lista_de_listas_de_inteiros:\nprint(lista, encontrar_primeiro_duplicado(lista))\n</code></pre> <p>\u274e 133 - Introdu\u00e7\u00e3o \u00e0 fun\u00e7\u00e3o lambda + <code>list.sort</code> e sorted</p> <pre><code>'''\n-&gt; A fun\u00e7\u00e3o lambda \u00e9 uma fun\u00e7\u00e3o como qualquer\noutra em Python. Por\u00e9m, s\u00e3o fun\u00e7\u00f5es an\u00f4nimas\nque cont\u00e9m apenas uma linha. Ou seja, tudo\ndeve ser contido dentro de uma \u00fanica express\u00e3o\n'''\nlista = [\n{'nome': 'Luiz': 'sobrenome': 'Miranda'},\n{'nome': 'Maria': 'sobrenome': 'Oliveira'},\n{'nome': 'Daniel': 'sobrenome': 'Silva'},\n{'nome': 'Eduardo': 'sobrenome': 'Moreira'},\n{'nome': 'Aline': 'sobrenome': 'Souza'},\n]\nlista = [4, 32, 1, 34, 5, 6, 6, 21, ]\nlista.sort(reverse=True)\nsorted(lista)\nlista = [\n{'nome': 'Luiz': 'sobrenome': 'Miranda'},\n{'nome': 'Maria': 'sobrenome': 'Oliveira'},\n{'nome': 'Daniel': 'sobrenome': 'Silva'},\n{'nome': 'Eduardo': 'sobrenome': 'Moreira'},\n{'nome': 'Aline': 'sobrenome': 'Souza'},\n]\ndef exibir(lista)\nfor item in lista:\nprint(item)\nprint()\nl_1 = sorted(lista, key=lambda item: item['nome'])\nl_2 = sorted(lista, key=lambda item: item['sobrenome'])\nexibir(l_1)\nexibir(l_2)\n</code></pre> <p>\u274e 134 - Fun\u00e7\u00f5es lambda complexas (para entendimento)</p> <pre><code>def execute(funcao, *args):\nreturn funcao(*args)\ndef soma(x, y):\nreturn x +y\ndef crie_mutipil(multiplier):\ndef multip(number):\nreturn number * multiplier\nreturn multip\nduplica = crie_mutipil(2)\nduplica = executa( lambda m: lambda n: n * m, 2, 3 )\nprint(duplica(2))\nprint(executa(lambda x, y: x + y, 2, 3),)\nprint(executa(lambda *args: sum(args), 1, 2, 3, 4, 5, 6, 7))\n</code></pre> <p>\u274e 135 - Empacotamento e desempacotamento de dicion\u00e1rios <code>*args</code> e <code>**Kwargs</code></p> <pre><code>a, b = 1, 2\na, b = b, a\nprint(a, b)\n(a_1, a_2), (b_1, b_2) = pessoa.items()\nfor chave, valor in pessoa.items():\nprint(chave, valor)\npessoa = {\n'nome': 'Aline',\n'sobrenome': 'Souza'\n}\ndados_pessoa = {\n'idade': 16,\n'altura': 1.6\n}\npessoas_completa = {**pessoa, dados_pessoa}\nprint(pessoas_completa)\n'''\n-&gt; args e kwargs\n----------------------------\n-&gt; args (j\u00e1 vimos)\n-&gt; kwargs - keyword arguments (argumento nomeados)\n'''\ndef mostro_argumentos_nomeados(*args, **kwargs):\nprint('M\u00c3O NOMEADOS', args)\nfor chave, valor in kwargs.items():\nprint(chave, valor)\nmostro_argumentos_nomeados(nome='Joana', qlq=123)\nmostro_argumentos_nomeados(**pessoas_completa)\nconfiguracoes = {\n'args_1': 1,\n'args_2': 2,\n'args_3': 3,\n'args_4': 4,\n}\nmostro_argumentos_nomeados(**configuracoes)\n</code></pre> <p>\u274e 136 - Introdu\u00e7\u00e3o \u00e0 List comprehension em Python</p> <pre><code>'''\n-&gt; List comprehension \u00e9 uma forma r\u00e1pida para criar listas\n    a partir de iter\u00e1veis.\n'''\nlista = []\nfor numero in range(10):\nlista.append(numero)\nprint(lista)\n# ==\nlista = [\nnumero * 2\nfor numero in range(10)\n]\nprint(lista)\n</code></pre> <p>\u274e 137 - Mapeamento de dados em list comprehension (map)</p> <pre><code>'''\n-&gt; List comprehension \u00e9 uma forma r\u00e1pida para criar listas\n  a partir de iter\u00e1veis.\n'''\nlista = []\nfor numero in range(10):\nlista.append(numero)\nprint(lista)\n# ==\nlista = [\nnumero * 2\nfor numero in range(10)\n]\nprint(list(range(10)))\nprint(lista)\n# mapeamento de dados em list comprehension\nprodutos = [\n{'nome':'p_1',:'preco': 20},\n{'nome':'p_2',:'preco': 10},\n{'nome':'p_3',:'preco': 30},\n]\nnovos_produtos = [\n{**produto, 'preco': produto['preco'] * 1.05}\nif produto['preco'] &gt; 20 else {**produto}\nfor produto in produtos\n]\nprint(novos_produtos)\nprint(*novos_produtos, sep='\\n')\n</code></pre> <p>\u274e 138 - Filtro de dados list comprehension (filter)</p> <pre><code>'''\n-&gt; List comprehension \u00e9 uma forma r\u00e1pida para criar listas\n    a partir de iter\u00e1veis.\n'''\nimport pprint\nprint(lista(range(10)))\ndef p(v):\npprint.pprint(v, sort_dicts=False, width=40)\nlista = []\nfor numero in range(10):\nlista.append(numero)\nprint(lista)\n# mapeamento de dados em list comprehension\nprodutos = [\n{'nome':'p_1',:'preco': 20},\n{'nome':'p_2',:'preco': 10},\n{'nome':'p_3',:'preco': 30},\n]\nnovos_produtos = [\n{**produto, 'preco': produto['preco'] * 1.05}\nif produto['preco'] &gt; 20 else {**produto}\nfor produto in produtos\n]\nprint(novos_produtos)\nprint(novos_produtos)\np(novos_produtos)\nlista = [n for n in range(10) if n &lt; 5]\nnovos_produtos = [\n{**produto, 'preco': produto['preco'] * 1.05}\nif produto['preco'] &gt; 20 else {**produto}\nfor produto in produtos\nif (produto['preco'] &gt;= 20 and produto['preco'] * 1.05) &gt; 10\n]\np(novos_produtos)\n</code></pre> <p>\u274e 139 - List comprehension com mais de um <code>for</code></p> <pre><code>lista = []\nfor x in range(3):\nfor y in range(3):\nlista.append(x, y)\n# ==\nlista = [\n(x, y)\nfor x in range(3)\nfor y in range(3)\n]\nlista = [\n[(x, letra) for letra in 'Luiz']\nfor x in range(3)\n]\nprint(lista)\n</code></pre> <p>\u274e 140 - Mais detalhes sobre list comprehension</p> <p>\u274e 141 - Dictionary Comprehension e Set Comprehension</p> <pre><code>produto = {\n'nome': 'Caneta Azul',\n'preco': 2.5,\n'categoria': 'Escrit\u00f3rio',\n}\ndc = {\nchave: valor.upper()\nif isinstance(valor, str) else valor\nfor chave, valor in produto.items()\nif chave != 'categoria'\n}\nlista = [\n('a','valor a'),\n('b','valor a'),\n('b','valor a'),\n]\ndc = {\nchave: valor\nfor chave, valor in lista\n}\ns_1 = {2 ** i for i in range(10)}\nprint(s_1)\n</code></pre> <p>\u274e 142 - isinstace() - para saber se objeto \u00e9 de determinado tipo</p> <pre><code>lista = {\n'a', 1, 1.1, True, [0, 1, 2], (1, 2),\n{0, 1}, {'nome': Luiz}\n}\nfor item in lista:\nif isinstance(item, set):\nprint('SET')\nitem.add(5)\nprint(item, isinstance(item, set))\nelif isinstance(item, str):\nprint('STR')\nprint(item.upper())\nelif isinstance(item, (int, float))\nprint('NUM')\nprint(item, item * 2)\nelse:\nprint('OUTRO')\nprint(item)\n</code></pre> <p>\u274e 143 - Valores Trophy e Falsy, Tipos Mut\u00e1veis e imut\u00e1veis</p> <pre><code>'''\n-&gt; Mut\u00e1veis [] {} set()\n-&gt; Imut\u00e1veis () \"\" 0 0.0 None False range(0,10)\n'''\nlista = []\ndicionario = {}\nconjunto = set()\ntupla = ()\nstring = ''\ninteiro = 0\nflutuante = 0.0\nnada = None\nfalso = False\nintervalo = range(0)\ndef falsy(valor)\nreturn 'falsy' if not valor else 'truthy'\nprint(f'TESTE', falsy('TESTE'))\nprint(f'{lista=}', falsy(lista))\nprint(f'dicionario=', falsy(dicionario))\nprint(f'conjunto=', falsy(conjunto))\nprint(f'tupla=', falsy(tupla))\nprint(f'string=', falsy(string))\nprint(f'inteiro=', falsy(inteiro))\nprint(f'flutuante=', falsy(flutuante))\nprint(f'nada=', falsy(nada))\nprint(f'falso=', falsy(falso))\nprint(f'intervalo', falsy(intervalo))\n</code></pre> <p>\u274e 144 - dir hasattr e getatter em Python</p> <pre><code>string = 'Luiz'\nmetodo = 'strip'\nif hasattr(string, metodo):\nprint('Existe upper')\nprint(getattr(string, metodo)())\nelse:\nprint('N\u00e3o existe o m\u00e9todo, metodo')\n</code></pre> <p>\u274e 145 - Mais detalhes sobre iterables e iterators (iter\u00e1veis e iteradores)</p> <pre><code>iterable = ['Eu', 'Tenho', '__iter__']\ninterator = iter(interable) # tem __iter__ e __next__\nprint(next(interator))\nprint(next(interator))\nprint(next(interator))\nprint(next(interator))\n</code></pre> <p>\u274e 146 - Generator expression iterables e iterators em Python</p> <pre><code>import sys\niterable = ['Eu', 'Tenho', '__iter__']\ninterator = iter(interable) # tem __iter__ e __next__\nlista = [n for n in range(1000000)]\ngenerator = (n for n in range(1000000))\nprint(sys.getsizeof(lista))\nprint(sys.getsizeof(generator))\nprint(generator)\nfor n in generator:\nprint(n)\n</code></pre> <p>\u274e 147 - Introdu\u00e7\u00e3o \u00e0s Generator Functions em python</p> <pre><code>generator = (n for n in range(1000000))\ndef generator(n=0, maximum=10)\nwhile True:\nyield n\nn += 1\nif n &gt;= maximum:\nreturn\ngen = generator(maximum=1000000)\nfor n in gen:\nprint(n)\n</code></pre> <p>\u274e 148 - yield from em generator Functions</p> <pre><code>def gen_1():\nprint('COMECOU GEN_1')\nyield 1\nyield 2\nyield 3\nprint('ACABOU GEN_1')\ndef gen_3():\nprint('COMECOU GEN_3')\nyield 10\nyield 20\nyield 30\nprint('ACABOU GEN_3')\ndef gen_2(gen=None):\nprint('COMECOU GEN_2')\nif gen is not None:\nyield from gen\nyield 4\nyield 5\nyield 6\nprint('ACABOU GEN_2')\ng_1 = gen_2(gen_1())\ng_2 = gen_2(gen_3())\ng_3 = gen_2()\nfor numero in g_1:\nprint(numero)\nprint()\nfor numero in g_3:\nprint(numero)\nprint()\n</code></pre> <p>\u274e 149 - (Parte 1) try e except para tratar exce\u00e7\u00f5es</p> <pre><code>a = 18\nb = 0\nc = a / b\ntry:\na = 18\nb = 0\nprint(b[0])\nprint('Linha 1'[1000])\nc = a / b\nprint('Linha 2')\nexcept ZeroDivisionError:\nprint('Dividiu por zero.')\nexcept NameError:\nprint('Nome b n\u00e3o est\u00e1 definido')\nexcept (TypeError, IndexError):\nprint('TypeError + IndexError')\nexcept Exception:\nprint('ERRO DESCONHECIDO.')\nprint('CONTINUAR')\n</code></pre> <p>\u274e 150 - (Parte 2) try e except para tratar exce\u00e7\u00f5es</p> <pre><code>a = 18\nb = 0\nc = a / b\ntry:\na = 18\nb = 0\nprint(b[0])\nprint('Linha 1'[1000])\nc = a / b\nprint('Linha 2')\nexcept ZeroDivisionError as e:\nprint(e.__class__.__name__)\nprint(e)\nexcept NameError:\nprint('Nome b n\u00e3o est\u00e1 definido')\nexcept (TypeError, IndexError) as error:\nprint('TypeError + IndexError')\nprint('MSG:', error)\nprint('Nome:' error.__class__.__name__)\nexcept Exception:\nprint('ERRO DESCONHECIDO.')\nprint('CONTINUAR')\n</code></pre> <p>\u274e 151 - try, except, else e finally + Bult-in Exceptions</p> <pre><code>'''\nhttps://docs.python.org/pt-br/3/library/exceptions.html#built-in-exceptions\n'''\ntry:\nprint('ABRIR ARQUIVO')\n8/0\nexcept ZeroDivisionError as e:\nprint(e.__class__.__name__)\nprint(e)\nprint('DIVIDIU ZERO')\nexcept IndexError as error:\nprint('IndexError')\nexcept (NameError, ImportError):\nprint('NameError, ImportError')\nelse:\nprint('N\u00e3o deu erro')\nfinally:\nprint('FECHAR ARQUIVO')\n</code></pre> <p>\u274e 152 - raise lan\u00e7ando (erros)</p> <pre><code>'''\nhttps://docs.python.org/pt-br/3/library/exceptions.html#built-in-exceptions\n'''\ndef nao_aceito_zero(d);\nif d == 0:\nraise ZeroDivisionError('Voc\u00ea est\u00e1 tentado dividir por zero')\nreturn True\ndef deve_ser_int_ou_float(n):\ntipo_n = type(n)\nif not isinstance(n, (float, int)):\nraise TypeError(\nf'\"{n}\" deve ser int ou float.'\nf'\"{tipo_n.__name__}\" enviado.'\n)\nreturn True\ndef divide(n, d):\ndeve_ser_int_ou_float(n)\ndeve_ser_int_ou_float(d)\nnao_aceito_zero(d)\nreturn n / d\nprint(divide(8, '0'))\n</code></pre> <p>\u274e 153 - M\u00f3dulos - import, from, as e *</p> <pre><code>'''\nhttps://docs.python.org/3/py-modindex.html\n-&gt;  Inteiro - import nome_m\u00f3dulo\n-&gt;  Vantagens: voc\u00ea tem o namespace do m\u00f3dulo\n-&gt;  Desvantagens: nomes grandes\n'''\nimport sys\n#   plataform = 'A MINHA'\nprint(sys.platform)\nprint(platform)\n'''\n-&gt;  partes - from nome_modulo import objeto_1, objeto_2\n-&gt;  Vantagens: nomes pequenos\n-&gt;  Desvantagens: Sem o namespace do m\u00f3dulo\n'''\nfrom sys import exit, platform\nprint(platform)\n# alias 1 - import nome_modulo as apelido\nimport sys as s\nsys = 'Alguma coisa'\nprint(s.platform)\nprint(sys)\n# alias 2 - from nome_modulo import objeto as apelido\nfrom sys import exit as ex\nfrom sys import platform as pt\nprint(pt)\n'''\n-&gt;  Vantagens : voc\u00ea pode reservar nomes para seu c\u00f3digo\n-&gt;  Desvantagens: pode ficar fora do padr\u00e3o da linguagem\n-&gt;  m\u00e1 pr\u00e1tica - from nome_modulo import *\n-&gt;  Vantagens: importa tudo de um m\u00f3dulo\n-&gt;  Desvantagens: importa tudo de um m\u00f3dulo\n'''\nfrom sys import exit, platform\nprint(platform)\nexit()\n</code></pre> <p>\u274e 154 - Modulariza\u00e7\u00e3o - Entendendo os seus pr\u00f3prios m\u00f3dulos e sys.path no Python</p> <pre><code>'''\n-&gt;  O primeiro m\u00f3dulo executado chama-se __main__\n-&gt;  Voc\u00ea pode importar outro m\u00f3dulo inteiro ou parte do m\u00f3dulo\n-&gt;  O python conhece a pasta onde o __main__ est\u00e1 e as pastas\n    abaixo dele.\n-&gt;  Ele n\u00e3o reconhece pastas e m\u00f3dulos acima do __main__ por padr\u00e3o\n-&gt;  O python conhece todos os m\u00f3dulos e pacotes presentes nos caminhos de sys.path\n'''\nimport aula97_m\nprint('Este m\u00f3dulo se chama', __name__)\n# arquivo separado -&gt; aula97_m\nprint('Este m\u00f3dulo se chama', __name__)\n</code></pre> <p>\u274e 155 - Como importar coisas do seu pr\u00f3prio m\u00f3dulo (ponto de vista do <code>__main__</code>)</p> <pre><code>...\nprint('Este m\u00f3dulo se chama', __name__)\nprint(aula97_m.variavel_modulo)\nprint(variavel_modulo)\nprint(soma(2, 3))\nprint(aula97_m.soma(2, 3))\n# outro aquivos\nprint('Este m\u00f3dulo se chama', __name__)\nvariavel_modulo = 'Luiz'\ndef soma(x, y):\nreturn x +y\n</code></pre> <p>\u274e 156 - Recarregando m\u00f3dulos, imporlib e singleton</p> <pre><code>import importlib\nimport aula98_m\nprint(aula98_m.variavel)\nfor i in range(10)\nimportlib.reload(aula98_m)\nprint(i)\nprint('Fim')\n# outro arquivo\nprint(123)\nvariavel = 'Luiz 1'\n</code></pre> <p>\u274e 157 - Introdu\u00e7\u00e3o aos packages (pacotes) em Python</p> <pre><code>from sys import path\nimport aula99_pakage.modulo\nfrom aula99_pakage import modulo\nfrom aula_package.modulo import *\nfrom aula99_packege.modulo import soma_do_modulo\nprint(*path, sep='\\n')\nprint(soma_do_modulo(1, 2))\nprint(aula99_package.modulo.soma_do_modulo(1, 2))\nprint(modulo.soma_do_modulo(1, 2))\nprint(variavel)\nprint(nova_variavel)\n# outro arquivo\n__all__ = [\n'variavel',\n'soma_do_modulo',\n'nova_variavel',\n]\nvariavel = 'Alguma coisa'\ndef soma_do_modulo(x, y)\nreturn x + y\nnova_variavel = 'ok'\n</code></pre> <p>\u274e 158 - O ponto de vista do <code>__main__</code> pode te confundir em m\u00f3dulos e pacotes python</p> <pre><code>from sys import path\nimport aula99_pakage.modulo\nfrom aula99_pakage import modulo\nfrom aula_package.modulo import *\nfrom aula99_packege.modulo import soma_do_modulo\nprint(*path, sep='\\n')\nprint(soma_do_modulo(1, 2))\nprint(aula99_package.modulo.soma_do_modulo(1, 2))\nprint(modulo.soma_do_modulo(1, 2))\nprint(variavel)\nprint(nova_variavel)\nfrom aula99_package.modulo import fala_oi, soma_do_modulo\nprint(__name__)\nfala_oi()\n# outro arquivo\n__all__ = [\n'variavel',\n'soma_do_modulo',\n'nova_variavel',\n]\nfrom aula99_package.modulo_b import fala_oi\nvariavel = 'Alguma coisa'\ndef soma_do_modulo(x, y)\nreturn x + y\nnova_variavel = 'ok'\n# mais outro arquivo\ndef fala_oi():\nprint('oi')\n</code></pre> <p>\u274e 159 - <code>__init__.py</code> \u00e9 um arquivo de inicializa\u00e7\u00e3o dos packages em Python</p> <pre><code>  # https://stackoverflow.com/questions/2386714/why-is-import-bad\nfrom aula99_package.modulo import *\nfrom aula99_package.modulo_b import *\n</code></pre> <p>\u274e 160 - Proposta de 3 exerc\u00edcios em um</p> <p>\ud83d\udccd  Exerc\u00edcio</p> <pre><code>'''\n-&gt;  copy, sorted , produtos.sort\n-------------------------------------\nExerc\u00edcio\n-&gt;  Aumente os pre\u00e7os dos produtos a seguir em 10%\n-&gt;  Gere novos_produtos por deep copy (c\u00f3pia profunda)\n'''\nprodutos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},\n]\n'''\n-&gt; Ordene os produtos por nome decrescente (do maior para menor)\n-&gt; Gere produtos_ordenados_por_nome por deep copy (c\u00f3pia profunda)\n'''\n'''\n-&gt;  Ordene os produtos por preco crescente (do menor para maior)\n-&gt;  Gere produtos_ordenados_por_preco por deep copy (c\u00f3pia profunda)\n'''\nimport copy\nnovos_produtos = [\n{**produto, 'preco': round(produto['preco'] * 1.1, 2)}\nfor produto in copy.deepcopy(produtos)\n]\ndef ordernar(lista):\nfor it in lista:\nprint(it)\nprint()\nprodutos_ordenados_por_nome = sorted(copy.deepcopy(produtos), key=lambda item: item['nome'], reverse=True)\nprodutos_ordenados_por_preco = sorted(\ncopy.deepcopy(produtos), key=lambda item: item['preco'])\nprint(novos_produtos)\nprint(\"-\"*20)\nprint(ordernar(produtos_ordenados_por_nome))\nprint(\"-\"*20)\nprint(ordernar(produtos_ordenados_por_preco))\n</code></pre> <p>\u274e 161 -  Solu\u00e7\u00e3o - Proposta de 3 exerc\u00edcios em um</p> <p>\ud83c\udf93 Resposta do professor</p> <pre><code># __init__\nfrom dados.produtos_moduto import produtos\nimport copy\nfrom dados import produtos\n#  esta no m\u00f3dulo produtos\nprodutos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},\n]\n# 1-\nnovos_produtos = [\n{**p, 'preco': round(p['preco'] * 1.1, 2)}\nfor p in copy.deepcopy(produtos)\n]\nprint(*produtos, sep='\\n')\nprint()\nprint(*novos_produtos, sep='\\n')\n# 2-\nprodutos_ordenados_por_nome = serted(\ncopy.deepcopy(produtos),\nkey=lambda p: p['nome'],\nreverse=True\n)\nprint(*produtos, sep='\\n')\nprint()\nprint(*produtos_ordenados_por_nome, sep='\\n')\n# 3-\nprodutos_ordenados_por_preco = sorted(copy.deepcopy(produtos), key=lambda p: p['preco'])\nprint(*produtos, sep='\\n')\nprint()\nprint(*produtos_ordenados_por_preco, sep='\\n')\n</code></pre> <p>\u274e 162 - Exerc\u00edcio - Adiando execu\u00e7\u00e3o de fun\u00e7\u00f5es</p> <p>\ud83d\udccd  Exerc\u00edcio</p> <pre><code>def soma(x, y):\nreturn x + y\ndef multiplica(x, y):\nreturn x * y\ndef executa(funcao, *args):\nreturn funcao(*args)\nsoma_com_cinco = executa(soma, 5)\nmultiplica_por_dez = executa(multiplica, 10)\n</code></pre> <p>\u274e 163 - Solu\u00e7\u00e3o - Exerc\u00edcio - Adiando execu\u00e7\u00e3o de fun\u00e7\u00f5es</p> <p>\ud83c\udf93 Resposta do professor</p> <pre><code>def soma(x, y):\nreturn x + y\ndef multiplica(x, y):\nreturn x * y\ndef executa(funcao, x):\ndef interna(y):\nreturn funcao(x, y)\nreturn interna\nsoma_com_cinco = executa(soma, 5)\nmultiplica_por_dez = executa(multiplica, 10)\n</code></pre> <p>\u274e 164 - Vari\u00e1veis livres + nonlocal (locals, globais)</p> <pre><code>print(globals())\ndef fora(x):\na = x\ndef dentro();\nprint(locals())\nreturn a\nreturn dentro\ndentro_1 = fora(10)\ndentro_2 = fora(20)\nprint(dentro_1())\nprint(dentro_2())\ndef concatenar(string_inicial):\nvalor_final = string_inicial\ndef interna(valor_a_concatenar=''):\nnonlocal valor_final\nvalor_final += valor_a_concatenar\nreturn valor_final\nreturn interna\nc = concatenar('a')\nprint(c('b'))\nprint(c('c'))\nprint(c('d'))\nfinal = c()\nprint(final)\n</code></pre> <p>\u274e 165 - Fun\u00e7\u00f5es decoradoras em geral</p> <pre><code>'''\n-&gt;  Decorar = adicionar / Remover / Restringir / Alterar\n-&gt;  Fun\u00e7\u00f5es decotadoras s\u00e3o fun\u00e7\u00f5es que decoram outras fun\u00e7\u00f5es\n-&gt;  Descoradores s\u00e3o usados para fazer o Python usar as\n      fun\u00e7\u00f5es decoradora em outras fun\u00e7\u00f5es\n'''\ndef criar_funcao(func):\ndef interna(*args, **kwargs):\nprint('Vou te decorar')\nfor arg in args:\ne_string(arg)\nresultado = func(*args, **kwargs)\nprint(f'O seu resultado foi {resultado}.')\nprint('Ok, agora voc\u00ea foi decorada')\nreturn resultado\nreturn interna\ndef inverte_string(string):\nreturn string[::-1]\ndef e_string(param):\nif not isinstance(param, str):\nraise TypeError('param deve ser uma string')\ninverte_string_checando_parametro = cria_funcao(inverte_string)\ninvertida = inverte_string_checando_paramentro('123')\nprint(invertida)\n</code></pre> <p>\u274e 166 - Decoradores em Python (@syntax_sugar)</p> <pre><code>'''\n-&gt;  Decorar = adicionar / Remover / Restringir / Alterar\n-&gt;  Fun\u00e7\u00f5es decotadoras s\u00e3o fun\u00e7\u00f5es que decoram outras fun\u00e7\u00f5es\n-&gt;  Descoradores s\u00e3o usados para fazer o Python usar as\n      fun\u00e7\u00f5es decoradores em outras fun\u00e7\u00f5es\n-&gt;  Decoradores s\u00e3o \"Syntax Sugar\" (A\u00e7\u00facar sint\u00e1tico)\n'''\ndef criar_funcao(func):\ndef interna(*args, **kwargs):\nprint('Vou te decorar')\nfor arg in args:\ne_string(arg)\nresultado = func(*args, **kwargs)\nprint(f'O seu resultado foi {resultado}.')\nprint('Ok, agora voc\u00ea foi decorada')\nreturn resultado\nreturn interna\n@criar_funcao\ndef inverte_string(string):\nprint(f'{inverte_string.__name__}')\nreturn string[::-1]\ndef e_string(param):\nif not isinstance(param, str):\nraise TypeError('param deve ser uma string')\ninvertida = inverte_string('123')\nprint(invertida)\n</code></pre> <p>\u274e 167 - Decoradores com par\u00e2metros</p> <pre><code>def fabrica_de_decoradores(a=None, b=None, c=None):\ndef fabrica_de_funcoes(func);\nprint('Decoradora 1')\ndef aninhada(*args, **kwargs):\nprint('Par\u00e2metro do decorador, ', a, b, c)\nprint('Aninhada')\nres = func(*args, **kwargs)\nreturn res\nreturn aninhada\nreturn fabrica_de_funcoes\n@fabrica_de_decoradores(1, 2, 3)\ndef soma(x, y):\nreturn x + y\ndecoradora = fabrica_de_decoradores()\nmultiplica = decoradora(lambda x, y: x * y)\ndez_mais_cinco = soma(10, 5)\ndez_vezes_cinco = multiplica(10, 5)\nprint(dez_mais_cinco)\nprint(dez_vezes_cinco)\n</code></pre> <p>\u274e 168 - Ordem de aplica\u00e7\u00e3o dos decoradoras</p> <pre><code>def parametros_decorador(nome):\ndef decorador(func):\nprint('Decorador:', nome)\ndef sua_nova_funcao(*args, **kwargs):\nres = func(*args, **kwargs)\nfinal = f'{res} {nome}'\nreturn final\nreturn sua_nova_funcao\nreturn decorador\n@parametros_decorador(nome='5')\n@parametros_decorador(nome='4')\n@parametros_decorador(nome='3')\n@parametros_decorador(nome='2')\n@parametros_decorador(nome='1')\ndef soma(x, y):\nreturn x + y\ndez_mais_cinco = soma(10, 5)\nprint(dez_mais_cinco)\n</code></pre> <p>\u274e 169 - Exerc\u00edcio - Unir listas</p> <p>\ud83d\udccd  Exerc\u00edcio</p> <pre><code>'''\n-&gt;  Crie uma fun\u00e7\u00e3o zipper (como o z\u00edper de roupas)\n-&gt;  O trabalho dessa fun\u00e7\u00e3o ser\u00e1 unir duas listas na ordem.\n-&gt;  Use todos os valores da menor lista.\n    Exe.:\n    ['Salvador', 'Ubatuba', 'Belo Horizonte']\n    ['BA', 'SP', 'MG', 'RJ']\n    Resultado.:\n    [('Salvador', 'BA'), ('Ubatuba', 'SP'), ('Belo Horizonte', 'MG')]\n'''\n</code></pre> <p>\u274e 170 - Solu\u00e7\u00e3o dO Exerc\u00edcio + zip e zip_longest do intertools</p> <p>\ud83c\udf93 Resposta do professor</p> <pre><code>def zipper(lista_1,lista_2):\nintervalo_max = min(len(lista_1) , len(lista_2))\nreturn [\n(lista_1[i], lista_2[i]) for i in range(intevalo_max)\n]\nprint(zipper(l_1,l_2))\nfrom itertools import zip_longest\nl_1 = ['Salvador', 'Ubatuba', 'Belo Horizonte']\nl_2 = ['BA', 'SP', 'MG', 'RJ']\nprint(list(zip(l_1, l_2)))\nprint(list(zip_longest(l_1, l_2, fillvalue='SEM CIDADE')))\n</code></pre> <p>\u274e 171 - Exerc\u00edcios - somando duas listas</p> <p>\ud83d\udccd  Exerc\u00edcio e \ud83c\udf93 Resposta do professor</p> <pre><code>'''\n-&gt;  Considerando duas lista de inteiros ou floats (lista A e lista B)\n-&gt;  Some os valores nas lista retornando uma nova lista com os valores somados:\n-&gt;  Se uma lista for mais que a outra, a soma s\u00f3 vai considerar o tamanho menor.\nExemplo:\nlista_a = [1, 2, 3, 4, 5, 6, 7]\nlista_b = [1, 2, 3, 4]\n----------------------------------------\nResultado:\nlista_soma = [2, 4, 6, 8]\n'''\nlista_a = [10, 2, 3, 40, 5, 6, 7]\nlista_b = [1, 2, 3, 4]\nlista_soma = [x + y for x, y in zip(lista_a, lista_b)]\nprint(lista_soma)\n# |\nlista_soma = []\nfor i in range(len(lista_b)):\nlista_soma.append(lista_a[i] + lista_b[i])\nprint(lista_soma)\n# |\nlista_soma = []\nfor i, _ in enumerate(lista_b):\nlista_soma.append(lista_a[i] + lista_b[i])\nprint(lista_soma)\n</code></pre> <p>\u274e 172 - Exerc\u00edcio solucionado - somando listas</p> <p>\ud83d\udccd  Exerc\u00edcio \ud83c\udf93 Resposta do professor</p> <p>\ud83c\udf80 No exerc\u00edcio anterior, fizemos a soma de uas lista usando v\u00e1rias solu\u00e7\u00f5es diferentes.</p> <p>\ud83c\udf80 Uma delas foi usando zip para unir duas lista e utilizar list comprehension para fazer a conta:</p> <pre><code>lista_a = [10, 2, 3, 4, 5]\nlista_b = [12, 2, 3, 6, 50, 60, 70]\nlista_soma = [x + y for x, y in zip(lista_a, lista_b)]\nprint(lista_soma)  # sa\u00edda: [22, 4, 6, 10, 55]\n</code></pre> <p>\ud83c\udf80  O problema \u00e9 que zip s\u00f3 une as lista at\u00e9 p tamanho da menor lista (como proposto no exerc\u00edcio).</p> <p>\ud83c\udf80  Uma outra possibilidade \u00e9 usar zip_longest para capturar os valores da lista maior.</p> <p>\ud83c\udf80  A ideia \u00e9 a mesma, veja:</p> <pre><code>from itertools import zip_longest\nlista_a = [10, 2, 3, 4, 5]\nlista_b = [12, 2, 3, 6, 50, 60, 70]\nlista_soma = [x + y for x, y in zip_longest(lista_a, lista_b, fillvalue=0)]\nprint(lista_soma) # sa\u00edda [22, 4, 6, 10, 55, 60, 70]\n</code></pre> <p>\ud83c\udf80  Neste caso, usamos o fillvalue como 0 (zero), assim conseguimos capturar os valores restantes da lista maior, realizando conta, sem obter um erro em nosso programa.</p> <p>\u274e 173 - count \u00e9 um iterador sem fim (intertools)</p> <pre><code>from itertools import count\nc_1 = count(step=8, start=8)\nr_1 = range(8, 100, 8)\nprint('c_1', hasattr(c_1, '__iter__'))\nprint('c_1', hasattr(c_1, '__next__'))\nprint('r_1', hasattr(r_1, '__iter__'))\nprint('r_1', hasattr(r_1, '__next__'))\nprint('count')\nfor i in c_1:\nif i &gt;= 100:\nbreak\nprint(i)\nprint()\nprint('range')\nfor i in r_1:\nprint(i)\n</code></pre> <p>\u274e 174 - Combinations, Permutations e Product - intertools</p> <pre><code>'''\n-&gt;  Combina\u00e7\u00e3o - Ordem n\u00e3o importa - iter\u00e1vel + tamanho do grupo\n-&gt;  Permuta\u00e7\u00e3o - Ordem importa\n-&gt; Produto - Ordem importa e repete valores \u00fanicos\n'''\nfrom itertools import combinations , permutations, product\ndef print_iter(iterador):\nprint(*list(interador), sep='\\n')\nprint()\npessoas = [\n'Jo\u00e3o', 'Joana', 'Luiz', 'Let\u00edcia',\n]\ncamisetas = [\n['preta', 'branca'],\n['p', 'm', 'g'],\n['Masculino', 'feminino', 'unisex'],\n['algod\u00e3o', 'poli\u00e9ster']\n]\nprint_iter(combinations(pessoas, 2))\nprint_iter(permutations(pessoas, 2))\nprint_iter(product(*camisetas))\n</code></pre> <p>\u274e 175 - Groupby - agrupando valores (intertools)</p> <pre><code>from itertools import groupby\nalunos = [\n{'nome': 'Luiz', 'nota': 'A'}\n{'nome': 'Let\u00edcia', 'nota': 'B'}\n{'nome': 'Fabr\u00edcio', 'nota': 'A'}\n{'nome': 'Rosemary', 'nota': 'C'}\n{'nome': 'Joana', 'nota': 'D'}\n{'nome': 'Jo\u00e3o', 'nota': 'A'}\n{'nome': 'Eduardo', 'nota': 'B'}\n{'nome': 'Andr\u00e9', 'nota': 'A'}\n{'nome': 'Anderson', 'nota': 'C'}\n]\ndef ordena(aluno):\nreturn aluno['nota']\nalunos_agrupados = sorted(alunos, key=ordena)\ngrupos = groupby(alunos_agrupados, key=ordena)\nfor chave, grupo in grupos:\nprint(chave)\nfor aluno in grupo:\nprint(aluno)\n</code></pre> <p>\u274e 176 - map, partial, GeneratorType e esgotamento de Iterators</p> <pre><code>from functools import partial\nfrom types import GeneratorType\n# map - para mapear dados\ndef print_iter(iterator):\nprint(*list(iterator), sep='\\n')\nprint()\nprodutos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},\n]\ndef aumentar_porcentagem(valor, porcentagem):\nreturn round(valor * porcentagem, 2)\naumentar_dez_porcento = partial(\naumentar_porcentagem,\nporcentagem=1.1\n)\nnovos_produtos = [\n{**p, 'preco': aumentar_dez_porcento(p['preco'])}\nfor p int produtos\n]\ndef muda_preco_de_produtos(produto):\nreturn{\n**produto,'preco': aumentar_dez_porcento(produto['preco'])\n}\nnovos_produtos = list(map(\nmuda_preco_de_produtos,\nprodutos\n))\nprint_iter(produtos)\nprint_iter(novos_produtos)\nprint(list(map(lambda x: x * 3, [1, 2, 3, 4])))\nprodutos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},\n]\ndef filtrar_preco(produto):\nreturn produto['preco'] &gt; 100\nnovos_produtos = [\np for p in produtos\nif p['preco'] &gt; 100\n]\nnovos_produtos = filter(\n# lambda produto: produto[''] &gt; 100,\nfiltrar_preco,\nprodutos\n)\nprint_iter(produtos)\nprint_iter(novos_produtos)\n</code></pre> <p>\u274e 177 - filter \u00e9 um filtro funcional</p> <pre><code>def print_iter(iterator):\nprint(*list(iterator), sep='\\n')\nprint()\nprodutos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},\n]\ndef filtrar_preco(produto):\nreturn produto['preco'] &gt; 100\nnovos_produtos = [\np for p in produtos\nif p['preco'] &gt; 100\n]\nnovos_produtos = filter(\n# lambda produto: produto['preco'] &gt; 100,\nfiltrar_preco,\nprodutos\n)\nprint_iter(produtos)\nprint_iter(novos_produtos)\n</code></pre> <p>\u274e 178 - reduce  - faz a redu\u00e7\u00e3o de um iter\u00e1vel em um valor</p> <pre><code>from functools import reduce\nprodutos = [\n{'nome': 'Produto 5', 'preco': 10.00},\n{'nome': 'Produto 1', 'preco': 22.32},\n{'nome': 'Produto 3', 'preco': 10.11},\n{'nome': 'Produto 2', 'preco': 105.87},\n{'nome': 'Produto 4', 'preco': 69.90},\n]\ndef funcao_do_reduce(acumulador, produto):\nprint('acumular', acumulador)\nprint()\nreturn acumulador + produto['preco']\ntotal = reduce(\nlambda ac, p: ac + p['preco']\nprodutos,\n0\n)\nprint (\"total \u00e9\", total)\ntotal = 0\nfor p in produtos:\ntotal += p['preco']\nprint(total)\nprint(sum([p['preco'] for p in produtos]))\n</code></pre> <p>\u274e 179 - Fun\u00e7\u00f5es recursivas, recursividade e Stack Overflow</p> <pre><code>'''\n-&gt;  fun\u00e7\u00f5es que podem se chamar de volta\n-&gt;  \u00fateis para dividir problemas grandes em partes menores\n-&gt;  Toda fun\u00e7\u00e3o recursiva deve ter:\n-&gt;  Um problema que possa ser dividido em partes menores\n-&gt;  Um caso recursivo que resolve o pequeno problema\n-&gt;  Um caso base que para a recurs\u00e3o\nfatorial - n! = 5! = 5 * 4 * 3 * 2 * 1\nhttps://brasilescola.uol.com.br/matematica/fatorial.htm\n'''\ndef recursiva(inicio=0, fim=4)\nprint (inicio, fim)\n# caso base\nif inicio &gt;= fim:\nreturn fim\n# caso recursivo\n# contar at\u00e9 chegar ao final\ninicio += 1\nreturn recursiva(inicio, fim)\nprint(recursiva())\n</code></pre> <p>\u274e 180 - Limite de recurs\u00e3o e cuidados com fun\u00e7\u00f5es recursivas</p> <pre><code>...\n# import sys\n# sys.setrecursionlimit(1004)\n# def recursiva(inicio=0, fim=4)\n#   print (inicio, fim)\n#   # caso base\n#   if inicio &gt;= fim:\n#     return fim\n#   # caso recursivo\n#   # contar at\u00e9 chegar ao final\n#   inicio += 1\n#   return recursiva(inicio, fim)\n# print(recursiva(0,1000))\ndef factorial(n):\nif n == 1 or n &lt;=1:\nreturn 1\nreturn n * factorial(n - 1)\n</code></pre> <p>\u274e 181 - O que s\u00e3o ambientes virtuais?(venv)</p> <pre><code>'''\n-&gt;  Um ambiente virtual carrega toda a sua instala\u00e7\u00e3o\n      do Python para um pasta no caminho escolhido.\n-&gt;  Ao ativar um ambiente virtual, a instala\u00e7\u00e3o do\n      ambiente virtual ser\u00e1 usada.\n-&gt;  venv \u00e9 o m\u00f3dulo que vamos usar para\n      criar ambientes virtuais\n-&gt;  Voc\u00ea pode dar o nome que preferir para um\n      ambiente virtual, mas os mais s\u00e3o:\n    venv  env   .venv   .env\n'''\n</code></pre> <p>\u274e 182 - Como criar o seu ambiente virtual venv</p> <pre><code>'''\n-&gt;  Abra a pasta do seu projeto no terminal\n      e digite:\n    python -m venv venv\n    gmc -Syntax\n    which\n'''\n</code></pre> <p>\u274e 183 - Ativando e desativando</p> <pre><code>'''\n-&gt;  Windows .\\venv\\Scripts\\ativate\n-&gt;  Linux e Mac: souce venv/bin/avtivate\n-&gt;  Desativar: deactivate\n'''\n</code></pre> <p>\u274e 184 - pip - instalando pacotes e bibliotecas</p> <pre><code>'''\n-&gt;  Instalando \u00fama vers\u00e3o:\n---------------------------------------------\n-&gt;  pip install nome_pacote\n-&gt;  Instalar vers\u00e3o precisa\n-&gt;  (tem outras formas tamb\u00e9m n\u00e3o mencionadas)\n-&gt;  pip install nome_pacote==0.0.0\n-&gt;  Desinstalar pacote\n------------------------------------------------\n-&gt;  pip uninstall nome_pacote\n-&gt;  Congelar (ver pacotes)\n---------------------------------------------------\n-&gt;  pip freeze\n-&gt;  pip index version nome_pacote\n'''\n</code></pre> <p>\u274e 185 - Criando e usando um requirements.txt</p> <pre><code>'''\n-&gt;  pip freeze &gt; requirements.txt\n-&gt;  pip install -r requirements.txt\n'''\n</code></pre> <p>\u274e 186 - Criando arquivos com Python + Context Manager with</p> <pre><code>'''\n-&gt;  Usando a fun\u00e7\u00e3o open para abrir um arquivo em Python\n    (ele pode ou n\u00e3o existir)\n  Modos:\n-&gt;  r (leitura), w (escrita), x (para cria\u00e7\u00e3o)\n-&gt;  a (escreve ao final), b (bin\u00e1rio)\n-&gt;  t (modo texto), + (leitura e escrita)\n-&gt;  Contexto manager - with (abri e fecha)\n-----------------------------------------------------\n-&gt;  M\u00e9todos \u00fateis\n-----------------------------------------------------\n-&gt;  write, red (escrever e ler)\n-&gt;  writelines (escrever e v\u00e1rias linhas)\n-&gt;  seek (move o cursor)\n-&gt;  readline (ler linhas)\n-&gt;  Vamos falar mais sobre o m\u00f3dulo os, mas:\n--------------------------------------------------------\n-&gt;  os.remove() ou unlink - apaga arquivo\n-&gt;  os.rename() - troca o nome ou move o arquivo\n-&gt;  Vamos falar mais sobre o m\u00f3dulo json, mas:\n---------------------------------------------------------\n-&gt;  json.dump()   - Gera uma arquivo json\n-&gt;  json.load\n'''\ncaminho_arquivo = 'aula_116.txt'\narquivo = opem(caminho_arquivo, 'w')\narquivo.close()\nwith open(caminho_arquivo, 'w') as arquivo:\nprint('Ol\u00e1 mundo')\nprint('Aquivo vai ser fechado')\n</code></pre> <p>\u274e 187 - with open (context manager) e m\u00e9todos \u00fateis do TextIOWrapper</p> <pre><code>'''\n-&gt;  Usando a fun\u00e7\u00e3o open para abrir um arquivo em Python\n    (ele pode ou n\u00e3o existir)\n  Modos:\n-&gt;  r (leitura), w (escrita), x (para cria\u00e7\u00e3o)\n-&gt;  a (escreve ao final), b (bin\u00e1rio)\n-&gt;  t (modo texto), + (leitura e escrita)\n-&gt;  Contexto manager - with (abri e fecha)\n-----------------------------------------------------\n-&gt;  M\u00e9todos \u00fateis\n-----------------------------------------------------\n-&gt;  write, red (escrever e ler)\n-&gt;  writelines (escrever e v\u00e1rias linhas)\n-&gt;  seek (move o cursor)\n-&gt;  readline (ler linhas)\n-&gt;  Vamos falar mais sobre o m\u00f3dulo os, mas:\n--------------------------------------------------------\n-&gt;  os.remove() ou unlink - apaga arquivo\n-&gt;  os.rename() - troca o nome ou move o arquivo\n-&gt;  Vamos falar mais sobre o m\u00f3dulo json, mas:\n---------------------------------------------------------\n-&gt;  json.dump()   - Gera uma arquivo json\n-&gt;  json.load\n'''\ncaminho_arquivo = 'aula_116.txt'\n# caminho_arquivo = 'aula_116.txt'\n# arquivo = opem(caminho_arquivo, 'w')\n# arquivo.close()\nwith open(caminho_arquivo, 'w') as arquivo:\nprint('Ol\u00e1 mundo')\nprint('Aquivo vai ser fechado')\nwith open(caminho_arquivo, 'w+') as arquivo:\narquivo.write('Linha 1\\n')\narquivo.write('Linha 2\\n')\narquivo.writelines(\n('Linha 3\\n', 'Linha 4\\n')\n)\narquivo.seek(0, 0)\nprint(arquivo.read())\nprint('Lendo')\narquivo.seek(0, 0)\nprint(arquivo.readline(), end='')\nprint(arquivo.readline().strip())\nprint(arquivo.readline().strip())\nprint('READLINES')\narquivo.seek(0, 0)\nfor linha in arquivo.readlines()\nprint(linha.strip())\nprint('#' * 10)\nwith opem(caminho_arquivo, 'r') as arquivo:\nprint(arquivo.read())\n</code></pre> <p>\u274e 188 - Modos de abertura de arquivos e encoding com with open</p> <pre><code>'''\nLeia tamb\u00e9m: https://www.otaviomiranda.com.br/2020/normalizacao-unicode-em-python/\n'''\n# with open(caminho_arquivo, 'w+') as arquivo:\n# arquivo.write('Linha 1\\n')\n# arquivo.write('Linha 2\\n')\n# arquivo.writelines(\n#   ('Linha 3\\n', 'Linha 4\\n')\n# )\n# arquivo.seek(0, 0)\n# print(arquivo.read())\n# print('Lendo')\n# arquivo.seek(0, 0)\n# print(arquivo.readline(), end='')\n# print(arquivo.readline().strip())\n# print(arquivo.readline().strip())\n# print('READLINES')\n# arquivo.seek(0, 0)\n# for linha in arquivo.readlines()\n#   print(linha.strip())\n# print('#' * 10)\n# with opem(caminho_arquivo, 'r') as arquivo:\n#   print(arquivo.read())\ncaminho_arquivo = 'aula_116.txt'\nwith open(caminho__arquivo, 'w', encoding='utf8') as arquivo:\narquivo.write('Aten\u00e7\u00e3o\\n')\narquivo.write('Linha 1\\n')\narquivo.write('Linha 2\\n')\narquivo.writelines(\n('Linha 3\\n','Linha 4\\n')\n)\n</code></pre> <p>\u274e 189 - Os.remove, os.unlink r os.rename - apagando, renomeando e movendo arquivos</p> <pre><code>'''\n  Leia tamb\u00e9m: https://www.otaviomiranda.com.br/2020/normalizacao-unicode-em-python/\n-&gt;  with open(context manager) e M\u00e9todos \u00fateis do TexrIOWrapper\n----------------------------------------------------------------\n-&gt;  Usando a fun\u00e7\u00e3o open para abrir um arquivo em Python\n      (ele pode ou n\u00e3o existir)\n    Modos:\n-&gt;  r (leitura), w (escrita), x (para cria\u00e7\u00e3o)\n-&gt;  a (escreve ao final), b (bin\u00e1rio)\n-&gt;  t (modo texto), + (leitura e escrita)\n-&gt;  Contexto manager - with (abri e fecha)\n-----------------------------------------------------\n-&gt;  M\u00e9todos \u00fateis\n-----------------------------------------------------\n-&gt;  write, red (escrever e ler)\n-&gt;  writelines (escrever e v\u00e1rias linhas)\n-&gt;  seek (move o cursor)\n-&gt;  readline (ler linhas)\n-&gt;  Vamos falar mais sobre o m\u00f3dulo os, mas:\n--------------------------------------------------------\n-&gt;  os.remove() ou unlink - apaga arquivo\n-&gt;  os.rename() - troca o nome ou move o arquivo\n-&gt;  Vamos falar mais sobre o m\u00f3dulo json, mas:\n---------------------------------------------------------\n-&gt;  json.dump()   - Gera uma arquivo json\n-&gt;  json.load\n'''\nimport os\ncaminho_arquivo = 'aula_116.txt'\nwith open(caminho__arquivo, 'w', encoding='utf8') as arquivo:\narquivo.write('Aten\u00e7\u00e3o\\n')\narquivo.write('Linha 1\\n')\narquivo.write('Linha 2\\n')\narquivo.writelines(\n('Linha 3\\n','Linha 4\\n')\n)\nos.remove(caminho_arquivo) # ou unlink\nos.rename(caminho_arquivo, aula_116-2.txt)\n</code></pre> <p>\u274e 190 - Salvando dados Python em JSON com m\u00f3dulo json</p> <pre><code>{\n\"nome\": \"Luiz Ot\u00e1vio 2\",\n\"sobrenome\": \"Miranda\",\n\"enderecos\": [\n{\"rua\": \"R1\" , \"numero\": 32},\n{\"rua\": \"R2\" , \"numero\": 55}\n],\n\"altura\":1.8,\n\"numeros_preferidos\":[2, 4, 8, 10],\n\"dev\": true,\n\"nada\": null\n}\n</code></pre> <pre><code>import json\npessoa = {\n\"nome\": \"Luiz Ot\u00e1vio 2\",\n\"sobrenome\": \"Miranda\",\n\"enderecos\": [\n{\"rua\": \"R1\" , \"numero\": 32},\n{\"rua\": \"R2\" , \"numero\": 55}\n],\n\"altura\":1.8,\n\"numeros_preferidos\":(2, 4, 8, 10),\n\"dev\": true,\n\"nada\": None\n}\nwith open('aula_117.json', 'w', encoding='utf8') as arquivo:\njson.dump(\npessoa,\narquivo,\nensure_ascii=False,\nindent=2,\n)\nwith open('aula_117.json', 'r', encoding='utf8') as arquivo:\npessoa = json.load(arquivo)\nprint(pessoa)\nprint(type(pessoa))\nprint(pessoa['nome'])\nhttps://www.otaviomiranda.com.br/2020/normalizacao-unicode-em-python/\n</code></pre> <p>\u274e 191 - Problema dos par\u00e2metros mut\u00e1veis em fun\u00e7\u00f5es Python</p> <pre><code>def adiciona_clientes(nome, lista=None):\nif lista is None:\nlista = []\nlista.append(nome)\nreturn lista\ncliente_1 = adiciona_clientes('luiz')\nadiciona_clientes('Joana', cliente_1)\nadiciona_clientes('Fernando', cliente_1)\ncliente_1.append('Edu')\ncliente_2 = adiciona_clientes('Helena')\nadiciona_clientes('Maria', cliente_2)\ncliente_3 = adiciona_clientes('Moreira')\nadiciona_clientes('Vivi', cliente_3)\nprint(cliente_1)\nprint(cliente_2)\nprint(cliente_3)\n</code></pre> <p>\u274e 192 - Exerc\u00edcio - Lista de tarefas com op\u00e7\u00f5es de desfazer e refazer</p> <p>\ud83d\udccd  Exerc\u00edcio</p> <pre><code>  '''\n    -&gt;  M\u00fasica para codar \ud83d\ude42\n    -&gt;  Everybody wants to rule the world - Tears for fears\n    -&gt;  todo = [] lista de tarefas\n    -&gt;  todo = ['fazer caf\u00e9'] -&gt; Adicionar fazer caf\u00e9\n    -&gt;  todo = ['fazer caf\u00e9', 'caminhar'] -&gt; adicionar caminhar\n    -&gt;  desfazer = ['fazer caf\u00e9'] -&gt; Refazer ['caminhar']\n    -&gt;  desfazer = [] -&gt; Refazer['caminhar', 'fazer caf\u00e9']\n    -&gt;  refazer = todo ['fazer caf\u00e9']\n    -&gt;  refazer = todo ['fazer caf\u00e9', 'caminhar']\n      Rober Duck The Bug \ud83d\udde3\ufe0f \ud83e\udd86\n  '''\n</code></pre> <p>\u274e 193 - Solu\u00e7\u00e3o Exerc\u00edcio - Lista de tarefas com op\u00e7\u00f5es de desfazer e refazer</p> <p>\ud83c\udf93 Resposta do professor</p> <pre><code>  import os\ndef listar(tarefas):\nprint()\nif not tarefas:\nprint('Nenhuma tarefa para listar')\nreturn\nprint('Tarefas:')\nfor tarefa in tarefas:\nprint(f'\\t{tarefa}')\nprint()\ndef desfazer(tarefas, tarefas_refazer):\nprint()\nif not tarefas:\nprint('Nenhuma tarefa para desfazer')\nreturn\ntarefa = tarefas.pop()\nprint(f'{tarefa=} removida da lista de tarefas.')\ntarefas_refazer.append(tarefa)\nprint()\ndef refazer(tarefas, tarefas_refazer):\nprint()\nif not tarefas_refazer:\nprint('Nenhuma tarefa para refazer')\nreturn\ntarefa = tarefas_refazer.pop()\nprint(f'{tarefa=} removida da lista de tarefas.')\ntarefas.append(tarefa)\nprint()\ndef adicionar(tarefa, tarefas):\nprint()\ntarefa = tarefa.strip()\nif not tarefas_refazer:\nprint('Voc\u00ea n\u00e3o digitou nenhuma tarefa')\nreturn\nprint(f'{tarefas=} adicionada na lista de tarefas.')\ntarefas.append(tarefa)\nprint()\ntarefas = []\ntarefas_refazer = []\nwhile True:\nprint('Comandos:listar, desfazer refazer')\ntarefa = input('Digite uma tarefa ou comando:')\nif tarefa == 'listar':\nlistar(tarefas)\ncontinue\nelif tarefa == 'desfazer':\ndesfazer(tarefas, tarefas_refazer)\nlista(tarefas)\ncontinue\nelif tarefa == 'clear':\nos.system('cls')\ncontinue\nelse:\nadicionar(tarefa, tarefas)\nlistar(tarefas)\ncontinue\n</code></pre> <p>\u274e 194 - Evitando uso de condicionais + Guard Clause</p> <pre><code>...\nwhile True:\nprint('Comandos: listar, desfazer, refazer')\ntarefa = input('Digite uma trarefa ou comando:')\ncomando = {\n'listar': lambda: listar(tarefas)\n'desfazer': lambda: desfazer(tarefas, tarefas_refazer)\n'refazer': lambda: refazer(tarefas, tarefas_refazer)\n'clear': lambda: os.system('cls')\n'adicionar': lambda: adicionar(tarefa, tarefas)\n}\ncomando = comando.get(tarefa) if comando.get(tarefa) is not None else comando['adicionar']\ncomando()\n</code></pre> <p>\u274e 195 - Exerc\u00edcio (+solu\u00e7\u00e3o) - salvando a lista de tarefas em JSON</p> <pre><code>  '''\n    -&gt;  M\u00fasica para codar \ud83d\ude42\n    -&gt;  Everybody wants to rule the world - Tears for fears\n    -&gt;  todo = [] lista de tarefas\n    -&gt;  todo = ['fazer caf\u00e9'] -&gt; Adicionar fazer caf\u00e9\n    -&gt;  todo = ['fazer caf\u00e9', 'caminhar'] -&gt; adicionar caminhar\n    -&gt;  desfazer = ['fazer caf\u00e9'] -&gt; Refazer ['caminhar']\n    -&gt;  desfazer = [] -&gt; Refazer['caminhar', 'fazer caf\u00e9']\n    -&gt;  refazer = todo ['fazer caf\u00e9']\n    -&gt;  refazer = todo ['fazer caf\u00e9', 'caminhar']\n  '''\nimport json\nimport os\ndef listar(tarefas):\nprint()\nif not tarefas:\nprint('Nenhuma tarefa para listar')\nreturn\nprint('Tarefas:')\nfor tarefa in tarefas:\nprint(f'\\t{tarefa}')\nprint()\ndef desfazer(tarefas, tarefas_refazer):\nprint()\nif not tarefas:\nprint('Nenhuma tarefa para desfazer')\nreturn\ntarefa = tarefas.pop()\nprint(f'{tarefa=} removida da lista de tarefas.')\ntarefas_refazer.append(tarefa)\nprint()\nlistar(tarefas)\ndef refazer(tarefas, tarefas_refazer):\nprint()\nif not tarefas_refazer:\nprint('Nenhuma tarefa para refazer')\nreturn\ntarefa = tarefas_refazer.pop()\nprint(f'{tarefa=} adicionada na lista de tarefas.')\ntarefas.append(tarefa)\nprint()\nlistar(tarefas)\ndef adicionar(tarefa, tarefas):\nprint()\ntarefa = tarefa.strip()\nif not tarefa:\nprint('Voc\u00ea n\u00e3o digitou uma tarefa.')\nreturn\nprint(f'{tarefa=} adicionada na lista de tarefas.')\ntarefas.append(tarefa)\nprint()\nlistar(tarefas)\ndef ler(tarefas, caminho_arquivo):\ndados = []\ntry:\nwhith open(caminho_arquivo, 'r' encoding='utf8') as arquivo:\ndados = json.load(arquivo)\nexcept FileNotFoundError:\nprint('Arquivo n\u00e3o existe')\nsalvar(tarefas, caminho_arquivo)\nreturn dados\ndef salvar(tarefas, caminho_arquivo):\ndados = tarefas\nwith open(caminho_arquivo, 'w', encoding='utf8') as arquivo:\ndados = json.dump(tarefas, arquivo, indent=2, ensure_ascii=False)\nreturn dados\nCAMINHO_ARQUIVO = 'aula_119.json'\ntarefas = ler([], CAMINHO_ARQUIVO)\ntarefas_refazer = []\nwhile True:\nprint('Comandos: listar, desfazer, refazer')\ntrarefa = input('Digite uma trarefa ou comando:')\ncomando = {\n'listar': lambda: listar(tarefas)\n'desfazer': lambda: desfazer(tarefas, tarefas_refazer)\n'refazer': lambda: refazer(tarefas, tarefas_refazer)\n'clear': lambda: os.system('cls')\n'adicionar': lambda: adicionar(tarefa, tarefas)\n}\ncomando = comando.get(tarefa) if comando.get(tarefa) is not None else comando['adicionar']\ncomando()\nsalvar(tarefas, CAMINHO_ARQUIVO)\n</code></pre> <p>\u274e 196 - Positional-Only Parameters (/) e Keyword-Only Arguments(*)</p> <pre><code>  '''\n    -&gt;  *args (ilimitado de argumentos posicionais)\n    -&gt;  **kwargs (ilimitado de argumentos nomeados)\n    -&gt;  \u2728  Positional-only Parameters (/) - Tudo antes das barras deve\n              ser \u203c APENAS \u203c\ufe0f posicional.\n    -&gt;  PEP 570 - Python Positional-only Parameters\n    -&gt;  https://peps.python.org/pep-0570/\n    -&gt;  \u2728  Keyword-Only Arquments (*) - * sozinho \u203c\ufe0f N\u00c3O SUGA \u203c\ufe0f valores.\n    -&gt;  PEP 3102 Keyword-Only Arquments\n    -&gt;  https://peps.python.org/pep-3102/\n  '''\ndef soma(a, b, /, *, c, **kwargs):\nprint(kwargs)\nprint(a + b + c)\nsoma(1, 2, c=3, nome='teste')\n</code></pre>"},{"location":"conteudo/#secao-5-introducao-a-programacao-orientada-a-objeto-em-python-poo-classes","title":"\ud83d\udd1c \u274e Se\u00e7\u00e3o 5 Introdu\u00e7\u00e3o \u00e0 Programa\u00e7\u00e3o Orientada a Objeto em Python - POO (Classes)","text":"<p>\u274e 197 - Introdu\u00e7\u00e3o \u00e0 se\u00e7\u00e3o e livros de refazer</p> <p>\u274e 198 - class - Classes s\u00e3o moldes para criar novos objetos</p> <pre><code>  '''\n    -&gt;  As classes geram novos objetos (inst\u00e2ncias) que\n          podem ter seus pr\u00f3prios atributos e m\u00e9todos.\n    -&gt;  Os objetos gerados pela classe podem usar seus dados\n          internos para realizar v\u00e1rias a\u00e7\u00f5es.\n    -&gt;  Por conven\u00e7\u00e3o, usamos PascalCase para nomes de\n          classes.\n    -&gt;  string = 'Luiz' -&gt; str\n    print(string.upper())\n    print(isinstance(string, str))\n  '''\nclass Pessoa:\n...\np_1 = Pessoa('Luiz', 'Ot\u00e1vio')\np_1.nome = 'Luiz'\np_1.sobrenome = 'Ot\u00e1vio'\np_2 = Pessoa('Maria', 'Joana')\np_2.nome = 'Maria'\np_2.sobrenome = 'Joana'\nprint(p_1.nome)\nprint(p_1.sobrenome)\nprint(p_2.nome)\nprint(p_2.sobrenome)\n</code></pre> <p>\u274e 199 - Introdu\u00e7\u00e3o ao m\u00e9todo <code>__init__</code> (inicializador de atributos)</p> <pre><code>  '''\n    -&gt;  As classes geram novos objeto (inst\u00e2ncias) que podem\n          ter seus pr\u00f3prios atributos e m\u00e9todos.\n    -&gt;  Os objetos gerados pela classe de uma usar seus dados\n          internos para realizar v\u00e1rias a\u00e7\u00f5es.\n    -&gt;  Por conven\u00e7\u00e3o, iramos PascalCase para nomes de classes.\n    -&gt;  string = 'Luiz' -&gt; str\n      print(string.upper())\n      print(isinstance(string, str))\n  '''\nclass Pessoa:\ndef __init__(self, nome, sobrenome):\nself.nome = nome\nself.sobrenome = sobrenome\np_1 = Pessoa('Luiz','Ot\u00e1vio')\np_2 = Pessoa('Maria','Joana')\nprint(p_1.nome)\nprint(p_1.sobrenome)\nprint(p_2.nome)\nprint(p_2.sobrenome)\n</code></pre> <p>\u274e 200 - M\u00e9todos em inst\u00e2ncias de classes Python</p> <pre><code>  '''\n    -&gt;  Hard coded - \u00c9 algo que foi escrito diretamente no c\u00f3digo\n  '''\nclass Carro:\ndef __init__(self, nome):\nself.nome = nome\ndef acelerar(self):\nprint(f'{self.nome} est\u00e1 acelerando...')\nstring = 'Luiz'\nprint(string.upper())\nfusca = Carro('Fusca')\nprint(fusca.nome)\nfusca.acelerar()\ncelta = Carro(nome='Celta')\nprint(celta.nome)\ncelta.acelerar()\n</code></pre> <p>\u274e 201 - Entendendo self em classes Python</p> <pre><code>  '''\n    -&gt;  Classes - Malde (geralmente sem dados)\n    -&gt;  Inst\u00e2ncia da class (objeto) - Tem os dados\n    -&gt;  Uma classe pode gerar v\u00e1rias inst\u00e2ncias.\n    -&gt;  Na classe o self \u00e9 a pr\u00f3pria inst\u00e2ncia.\n  '''\nclass Carro:\n# \ud83d\udc49 (parameter) self: Self@Carro\ndef __init__(self, nome):\nself.nome = nome\ndef acelerar(self):\nprint(f'{self.nome} est\u00e1 acelerando...')\nstring = 'Luiz'\nprint(string.upper())\nfusca = Carro('Fusca')\nprint(fusca.nome)\nfusca.acelerar()\ncelta = Carro(nome='Celta')\nprint(celta.nome)\ncelta.acelerar()\nCarro.acelerar(celta)\n</code></pre> <p>\u274e 202 - Escopo da classe e de m\u00e9todos da classe</p> <pre><code>  class Animal:\n# nome = 'Le\u00e3o'\ndef __init__(self, nome):\nself.nome = nome\nvariavel = 'valor'\nprint(variavel)\ndef comendo(self, alimento):\nreturn f'{self.nome} est\u00e1 comendo {alimento}'\ndef executar(self, *args, **kwargs):\nreturn self.comendo(*args, *kwargs)\nleao = Animal(nome='Le\u00e3o')\nprint(leao.nome)\nprint(leao.executar('ma\u00e7\u00e3'))\n</code></pre> <p>\u274e 203 - Mantendo estado dentro da classe</p> <pre><code>  class Camera:\ndef __init__(self, nome, filmando=False):\nself.nome =nome\nself.filmando = filmando\ndef filmar(self):\nif self.filmando:\nprint(f'{self.nome} J\u00c1 esta filmando...')\nreturn\nprint(f'{self.nome} est\u00e1 filmando...')\nself.filmando = True\ndef parar_filmar(self):\nif not self.filmando:\nprint(f'{self.nome} N\u00c3O est\u00e1 filmando...')\nreturn\nprint(f'{self.nome} est\u00e1 parando de filmar...')\nself.filmando = False\ndef fotografar(self):\nif self.filmando:\nprint(f'{self.nome} n\u00e3o pode fotografar filmando')\nreturn\nprint(f'{self.nome} est\u00e1 fotografando')\nc_1 = Camera('Canon')\nc_2 = Camera('Sony')\nc_1.filmar()\nc_1.filmar()\nc_1.fotografar()\nc_1.parar_filmar()\nc_1.fotografar()\nprint()\nc_2.filmar()\nc_2.filmar()\nc_2.fotografar()\nc_2.parar_filmar()\nc_2.fotografar()\n</code></pre> <p>\u274e 204 - Atributos de classe</p> <pre><code>  class Pessoa:\nano_atual = 2023\ndef __init__(self, nome, idade):\nself.nome = nome\nself.idade = idade\ndef get_ano_nascimento(self):\nreturn Pessoa.ano_atual - self.idade\np_1 = Pessoa('Jo\u00e3o', 35)\np_2 = Pessoa('Helena' 12)\nprint(p_1.get_ano_nacimento())\nprint(p_2.get_ano_nacimento())\n</code></pre> <p>\u274e 205 - <code>__dict__</code> e vars para atributos de inst\u00e2ncia</p> <pre><code>  class Pessoa:\nano_atual = 2023\ndef __init__(self, nome, idade):\nself.nome = nome\nself.idade = idade\ndef get_ano_nascimento(self):\nreturn Pessoa.ano_atual - self.idade\ndados = {'nome': 'Jo\u00e3o', 'idade': 35}\np_1 = Pessoa(**dados)\np_1.nome = 'EITA'\np_1.__dict__['outra'] = 'coisa'\np_1.__dict__['nome'] = 'Eita'\ndel p_1.__dict__['nome']\nprint(p_1.__dict__)\nprint(vars(p_1))\nprint(p_1.outra)\nprint(p_1.nome)\nprint(vars(p_1))\nprint(p_1.nome)\n</code></pre> <p>\u274e 206 - Exerc\u00edcio - Salve sua classe em JSON</p> <p>\ud83d\udccd  Exerc\u00edcio</p> <pre><code>  '''\n    -&gt;  Salve os dados da sua classe em Json\n          e depois crie novamente as inst\u00e2ncias\n          da classe com os dados salvos\n    -&gt;  Fa\u00e7a em arquivos separados.\n  '''\n</code></pre> <p>\u274e 207 - Solu\u00e7\u00e3o - Exerc\u00edcio + <code>if __name__ == '__main__'</code></p> <p>\ud83c\udf93 Resposta do professor</p> <pre><code>'''\n  -&gt;  arquivo main parte_1\n'''\nimport json\nCAMINHO_ARQUIVO = 'aula_127.json'\nclass Pessoa:\ndef __init__(self, nome, idade):\nself.nome = nome\nself.idade = idade\np_1 = Pessoa('Jo\u00e3o', 33)\np_2 = Pessoa('Helena', 21)\np_3 = Pessoa('Joana', 11)\nbd = [vars(p_1), p_2.__dict__, vars(p_3)]\ndef fazer_dump():\nwith open(CAMINHO_ARQUIVO, 'w') as arquivo:\nprint('FAZENDO DUMP')\njson.dump(\nbd,\narquivo,\nensure_ascii=False,\nindent=2\n)\nif __name__ == '__main__':\nprint(ELE \u00c9 O __main__)\nfazer_dump()\n# arquivo parte_2\nimport json\nfrom aula_127_a import  CAMINHO_ARQUIVO, Pessoa, fazer_dump\n# fazer_dump()\nwith open(CAMINHO_ARQUIVO, 'r') as arquivo:\npessoas = json.load(arquivo)\np_1 = Pessoa(**pessoa[0])\np_2 = Pessoa(**pessoa[1])\np_3 = Pessoa(**pessoa[2])\nprint(p_1.nome, p_1.idade)\nprint(p_2.nome, p_2.idade)\nprint(p_3.nome, p_3.idade)\n</code></pre> <p>\u274e 208 - Curiosidade sobre conven\u00e7\u00f5es de nomes</p> <p>\ud83c\udf80  Como voc\u00ea viu na aula anterior, usamos certas conven\u00e7\u00f5es para nomes de vari\u00e1veis, fun\u00e7\u00f5es, classes e assim por diante. Essas conven\u00e7\u00f5es tem um nome que podemos usar para nos referir ao modo como estamos nomeando determinados objetos em nosso programa: PascalCase, camelCase e snake_case.</p> <ul> <li>PascalCase - significa que todas as palavras iniciam com letra mai\u00fascula e nada \u00e9 usando para separ\u00e1-las, como em: <code>MinhaClasse</code>,<code>Classe</code>,<code>MeuObjeto</code>,<code>MeuProgramaMuitoLegal</code>. Essa \u00e1 a conven\u00e7\u00e3o utilizada para classes em Python;</li> <li>camelCase - a \u00fanica diferen\u00e7a de <code>camelCase</code> para <code>PascalCase</code> \u00e9 a primeira letra. Em <code>camelCase</code> a primeira letra sempre ser\u00e1 min\u00fascula e o restante das palavras  dever\u00e1 iniciar com a letra mai\u00fascula. Como em: <code>minhaFuncao</code>, <code>funcaoDeSoma</code>, etc... Essa convers\u00e3o n\u00e3o \u00e9 usada em Python (apesar de eu confundir as duas \u00e0s vezes acabar) chamando <code>camelCase</code> de <code>PascalCase</code> ou vice-versa, mas agora   voc\u00ea sabe a diferen\u00e7a);</li> <li>snake_case - este \u00e9 o padr\u00e3o usado em Python para definir qualquer coisa que n\u00e3o for uma classe. Todas as letras ser\u00e3o min\u00fasculas e separadas por um underline, como em: <code>minha_cariavel</code>, <code>funcao_legal</code>, <code>soma</code>.</li> </ul> <p>\ud83c\udf80  Os padr\u00f5es usados em Python s\u00e3o: <code>snake_case</code> para qualquer coisa e <code>PascalCase</code> para classe.</p> <p>\u274e 209 - M\u00e9todos de classe (@classmethod) + factories methods (m\u00e9todos f\u00e1brica)</p> <pre><code>  '''\n    -&gt;  M\u00e9todos de classe + factories (f\u00e1bricas)\n    -&gt;  S\u00e3o m\u00e9todos ender \"self\" ser\u00e1 \"cls\", ou seja,\n          ao inv\u00e9s de receber a inst\u00e2ncia no primeiro\n          par\u00e2metro, receberemos a pr\u00f3pria classe.\n  '''\nclass Pessoa:\nano = 2023 # atributo de classe\ndef __init__(self, nome, idade):\nself.nome = nome\nself.idade = idade\n@classmethod\ndef metodo_de_classe(cls):\nprint('Hey')\n@classmethod\ndef criar_com_anos(cls, nome):\nreturn cls(nome, 50)\n@classmethod\ndef criar_sem_nome(cls, idade):\nreturn cls('An\u00f4nima', idade)\np_1 = Pessoa('Jo\u00e3o', 34)\np_2 = Pessoa.criar_com_50_anos('Helena')\np_3 = Pessoa('An\u00f4nimo', 23)\np_4 = Pessoa.criar_sem_nome(25)\nprint(p_2.nome, p_2.idade)\nprint(p_3.nome, p_3.idade)\nprint(p_4.nome, p_4.idade)\nprint(Pessoa.ano)\nPessoa.metodo_de_classe()\n</code></pre> <p>\u274e 210 - @staticmethod (m\u00e9todos est\u00e1ticos) s\u00e3o in\u00fateis em Python \ud83d\ude42</p> <pre><code>  '''\n    -&gt;  M\u00e9todos est\u00e1ticos s\u00e3o m\u00e9todos que est\u00e3o dentro da\n          classe, mas tem acesso n\u00e3o ao self nem ao cls.\n    -&gt;  Em resumo, s\u00e3o fun\u00e7\u00f5es que existem dentro da sua classe.\n  '''\nclass Classe:\n@staticmethod\ndef funcao_que_esta_na_classe(*args, **kwargs):\nprint('Oi', args, kwargs)\ndef funcao(*args, **kwargs):\nprint('Oi', args, kwargs)\nc_1 = Classe()\nc_1.funcao_que_esta_na_classe(1, 2, 3)\nfuncao(1, 2, 3)\nClasse.funcao_que_esta_na_classe(nomeado=1)\nfuncao(nomeado=1)\n</code></pre> <p>\u274e 211 - method vs @classmethod vs @staticmethod</p> <pre><code>  '''\n    -&gt;  method - self, m\u00e9todo de inst\u00e2ncia\n    -&gt;  @classmethod - cls, m\u00e9todo de classe\n    -&gt;  @staticmethod - m\u00e9todo est\u00e1tico (\u274cself, \u274ccls)\n  '''\nclass Connection:\ndef __init__(self, host='localhost'):\nself.host = host\nself.user = None\nself.password = None\ndef set_user(self,user):\nself.user = user\ndef set_password(self, password):\nself.password = password\n@classmethod\ndef create_whith_auth(cls, user, password):\nconnection = cls()\nconnection.user = user\nconnection.password = password\nreturn connection\n@staticmethod\ndef log(msg):\nprint('LOG', msg)\ndef connection_log(msg):\nprint('LOG', msg)\n# c_1 = Connection()\nc_1 = Connercion.create_with_auth('Luiz', '123')\n# c_1.set_user('Luiz')\n# c_1.set_password('123')\nprint(Connercion.log('Essa \u00e9 a mensagem de log'))\nprint(c_1.user)\nprint(c_1.password)\n</code></pre> <p>\u274e 212 - @property - um getter no modo Pyth\u00f4nico</p> <pre><code>  '''\n    -&gt;  getter -&gt; um m\u00e9todo para obter um atributo\n    -&gt;  cor - get_cor()\n    -&gt;  modo Pyth\u00f4nico - modo do Python de fazer coisas\n    -&gt;  @property \u00e9 uma propriedade do objeto, ela \u00e9\n          um m\u00e9todo que se comporta como um atributo \ud83e\udd2f\ud83e\udd2f\ud83e\udd2f\n    -&gt;  Geralmente \u00e9 usado nas seguintes situa\u00e7\u00f5es:\n    -&gt;  como getter\n    -&gt;  para evitar quebrar c\u00f3digo cliente\n    -&gt;  para habilitar setter\n    -&gt;  para executar a\u00e7\u00f5es ao obter um atributo\n    -&gt;  C\u00f3digo cliente - \u00e9 o c\u00f3digo que usa seu c\u00f3digo\n  '''\nclass Caneta:\ndef __init__(self, cor):\nself.cor_tinta = cor\n@property\ndef cor(self, cor):\nprint('PROPERTY')\nreturn self.cor_tinta\n@property\ndef cor_tampa(self):\nreturn 123456\n###################################################################\nconeta = Caneta('Azul')\nprint(caneta.cor)\nprint(caneta.cor)\nprint(caneta.cor)\nprint(caneta.cor)\nprint(caneta.cor)\nprint(caneta.cor)\nprint(caneta.cor_tampa)\n#########################################################################\n# class Caneta:\n#   def __init__(self,cor):\n#     self.cot_tinta = cor\n#   def get_cor(self):\n#     print('GET COR')\n#     return self.cor_tinta\n############################################################################\n# caneta = Caneta('Azul')\n# print(caneta.get_cor())\n# print(caneta.get_cor())\n# print(caneta.get_cor())\n# print(caneta.get_cor())\n# print(caneta.get_cor())\n</code></pre> <p>\u274e 213 - @property + @setter - getter e setter no modo Pyth\u00f4nico</p> <pre><code>  '''\n    -&gt;  como getter\n    -&gt;  para evitar quebrar c\u00f3digo cliente\n    -&gt;  para habilitar setter\n    -&gt;  para executar a\u00e7\u00f5es ao obter um atributo\n    -&gt;  Atributos que come\u00e7am com um ou dois underlines\n          n\u00e3o devem ser usado fora da classe.\n        \ud83d\udc0d\ud83e\udd13\ud83e\udd2f\ud83e\udd2f\ud83e\udd2f\ud83e\udd2f\n  '''\nclass Caneta:\ndef __init__(self, cor):\n# private protected\nself.cor = cor\nself._cor_tampa = None\n@property\ndef cor(self):\nprint('ESTOU NO GETTER')\nreturn self._cor\n@cor.setter\ndef cor(self,valor):\nprint('ESTOU NO SETTER')\nself._cor = valor\n@property\ndef cor_tampa(self):\nreturn self._cor_tampa\n@cor_tampa.setter\ndef cor_tampa(self, valor):\nself._cor_tampa = valor\ncaneta = Caneta('Azul')\ncaneta.cor = 'Rosa'\ncaneta.cor_tampa = 'Azul'\nprint(caneta.cor)\nprint(caneta.cor_tampa)\n</code></pre> <p>\u274e 214 - Encapsulamento (modificadores de acesso: public _protected, __private)</p> <pre><code>  '''\n    -&gt;  Python N\u00c3O TEM modificadores de acesso\n    -&gt;  Mas podemos seguir as seguintes conven\u00e7\u00f5es\n    -&gt;  (sem underline) = public\n          pode ser usado em qualquer lugar\n    -&gt;  _(um underline) = protected\n            n\u00e3o DEVE se usando fora da classe\n            ou suas subclasses\n    -&gt;  __(dois underlines) = private\n            \"name mangling\" (desfigura\u00e7\u00e3o de nomes) em Python\n            _NomeClasse__nome_attr_ou_method\n            s\u00f3 DEVE ser usando na classe em que foi\n            declarado.\n  '''\nfrom functools import\nclass Foo:\ndef __init__(self):\nself.public = 'isso \u00e9 p\u00fablico'\nself._protected = 'isso \u00e9 protegido'\nself.__exemplo = 'isso \u00e9 private'\ndef metodo_publico(self):\n# self._metodo_protected()\n# print(self._protected)\nprint(self__exemplo)\nself.__metodo_private()\nreturn 'metodo_p\u00fablico'\ndef _metodo_protected(self):\nprint('_metodo_protected')\nreturn '_metodo_protected'\ndef __metodo_private(self):\nprint('__metodo_private')\nreturn '__metodo_private'\nf = Foo()\n# print(f.public)\nprint(f.metodo_publico())\n</code></pre> <p>\u274e 215 - Rela\u00e7\u00f5es entre classes: associa\u00e7\u00e3o, agrega\u00e7\u00e3o e composi\u00e7\u00e3o</p> <pre><code>  '''\n    -&gt;  Associa\u00e7\u00e3o \u00e9 um tipo de rea\u00e7\u00e3o onde os objetos\n          est\u00e3o ligados dentro do sistema.\n    -&gt;  Essa \u00e9 a rela\u00e7\u00e3o mais comum entre objetos e tem subconjuntos\n          como agrega\u00e7\u00e3o e composi\u00e7\u00e3o (que veremos depois).\n    -&gt;  Geralmente, temos uma associa\u00e7\u00e3o quando um objeto tem\n          um atributo que referencia outro objeto.\n    -&gt;  A associa\u00e7\u00e3o n\u00e3o especifica como um objeto controla\n          o ciclo de vida de outro objeto.\n  '''\nclass Escritor:\ndef __init__(self, nome) -&gt; None:\nself.nome = nome\nself._ferramenta = None\n@property\ndef ferramenta(self)\nreturn self._ferramenta\n@ferramenta.setter\ndef ferramenta(self, ferramenta):\nself._ferramenta = ferramenta\nclass FerramentaDeEscrever:\ndef __init__(self, nome):\nself.nome = nome\ndef escrever(self);\nreturn f'{self.nome} est\u00e1 escrevendo'\nescritor = Escritor('Luiz')\ncaneta = FerramentaDeEscrever('Caneta Bic')\nmaquina_de_escrever = FerramentaDeEscrever('M\u00e1quina')\nescritor.ferramenta = maquina_de_escrever\nprint(caneta.escrever())\nprint(maquina_de_escrever.escrever())\nprint(escritor.ferramenta.escrever())\n</code></pre> <p>\u274e 216 - Agrega\u00e7\u00e3o - Python Orientado a Objetos</p> <pre><code>  '''\n    -&gt;  Agrega\u00e7\u00e3o \u00e9 um forma mais especializada de associa\u00e7\u00e3o\n          entre dois ou mais objetos. Cada objeto ter\u00e1\n          seu ciclo de vida independente.\n    -&gt;  Geralmente \u00e9 uma rela\u00e7\u00e3o de um para muitos, onde um\n          objeto tem um ou mais objetos.\n    -&gt;  Os objetos podem viver separadamente, mas pode\n          se tratar de uma rela\u00e7\u00e3o onde um objeto precisa de\n          outro para fazer determinada tarefa.\n          (existem controv\u00e9rsias sobre as defini\u00e7\u00f5es de agrega\u00e7\u00e3o)\n  '''\nclass Carrinho:\ndef __init__(self):\nself._produto = []\ndef total(self):\nreturn sum([p.preco for p in self._produtos])\ndef inserir_produto(self,*produtos):\n# self._produtos.extend(produtos)\n# self._produtos += produtos\nfor produto in produtos:\nself._produtos.append(produto)\ndef listar_produtos(self):\nprint()\nfor produto in self._produtos:\nprint(produto.nome, produto.preco)\nprint()\nclass Produto:\ndef __init__(self, nome, preco):\nself.nome = nome\nself.produto = preco\ncarrinho = Carrinho()\np_1, p_2 = Produto('Caneta', 1.20) , Produto('Camiseta', 20)\ncarrinho.inserir_produtos(p_1, p_2)\ncarrinho.listar_produtos()\nprint(carrinho.total())\n</code></pre> <p>\u274e 217 - Composi\u00e7\u00e3o - Python Orientado a Objetos</p> <pre><code>  '''\n    -&gt;  Rela\u00e7\u00f5es entre classes: associa\u00e7\u00e3o, agrega\u00e7\u00e3o e composi\u00e7\u00e3o\n    ------------------------------------------------------------------\n    -&gt;  Composi\u00e7\u00e3o \u00e9 uma especializa\u00e7\u00e3o da agrega\u00e7\u00e3o.\n    -&gt;  Mas nela, quando o objeto \"pai\" for apagado, todas\n          as refer\u00eancias dos objetos filhos tamb\u00e9m s\u00e3o apagadas.\n  '''\nclass Cliente:\ndef __init__(self, nome):\nself.nome = nome\nself.endereco = []\ndef inserir_endereco(self, rua, numero):\nself.enderecos.append(Endereco(rua, numero))\ndef listar_enderecos(self):\nfor endereco in self.enderecos:\nprint(endereco.rua, endereco.numero)\ndef __del__(self)\nprint('APAGANDO,', self.nome)\nclass Endereco:\ndef __init__(self, rua, numero):\nself.rua = rua\nself.numero = numero\ndef __del__(self):\nprint('APAGANDO,', self.rua, self.numero)\ncliente_1 = Cliente('Maria')\ncliente_1.inserir_endereco('Av Brasil', 54)\ncliente_1.inserir_endereco('Rua B', 6745)\nendereco_externo = Endereco('Av Saudade', 123213)\ncliente_1.inserir_endereco_externo(endereco_externo)\ncliente_1.listar_enderecos()\ndel cliente_1\nprint(endereco_externo.rua, endereco_externo.numero)\nprint(f'#'*10, 'AQUI TERMINA MEU C\u00d3DIGO')\n</code></pre> <p>\u274e 218 - Exerc\u00edcio (+solu\u00e7\u00e3o) com classes rela\u00e7\u00f5es</p> <p>\ud83d\udccd  Exerc\u00edcios  \ud83c\udf93 Resposta do professor</p> <pre><code>  '''\n    -&gt;  Exerc\u00edcio com classes\n    ------------------------------\n    -&gt;  1-  Crie uma classe Carro (Nome)\n    -&gt;  2-  Crie uma classe Motor (Nome)\n    -&gt;  3-  Crie uma classe Fabricante (Nome)\n    -&gt;  4-  Fa\u00e7a a liga\u00e7\u00e3o entre Carro tem um Motor\n    -&gt;  Obs.:\n          Um motor pode ser de v\u00e1rios carros\n    -&gt;  5-  Fa\u00e7a a liga\u00e7\u00e3o entre Carro e um Fabricante\n    -&gt;  Obs.:\n          Exiba o nome do carro, motor e fabricante na tela\n  '''\nclass Carro:\ndef __init__(self, nome):\nself.nome = nome\nself._motor = None\nself._fabricante = None\n@property\ndef motor(self):\nreturn self._motor\n@motor.setter\ndef motor(self)\nself._moto = valor\n@property\ndef fabricante(self)\nreturn self_fabricante\n@fabricante.setter\ndef fabricante(self, valor)\nself._fabricante = valor\nclass Motor:\ndef __init__(self, nome):\nself.nome = nome\nclass Fabricante:\ndef __init__(self, nome)\nself.nome = nome\nfusca = Carro('Fusca')\nvolkswagen = Fabricante('Volkwagen')\nmotor_1_0 = Motor('1.0')\nfusca.fabricante = volkwagen\nfusca.motor = motor_1_0\nprint(fusca.nome, fusca.fabricante.nome, fusca.motor.nome)\ngol = Carro('gol')\ngol.fabricante = volkwagen\nmotor_1_0 = Motor('1.0')\ngol.motor = motor_1_0\nprint(gol.nome, gol.fabricante.nome, gol.motor.nome)\nfiat_uno = Carro('fiat_uno')\nfiat = Fabricante('Fiat')\nmotor_1_0 = Motor('1.0')\nfiat_uno.fabricante = fiat\nfiat_uno.motor = motor_1_0\nprint(fiat_uno.nome, fiat_uno.fabricante.nome, fiat_uno.motor.nome)\nfocus = Carro('focus titanium')\nford = Fabricante('ford')\nmotor_2_0 = Motor('2.0')\nfocus.fabricante = ford\nfocus.motor = motor_2_0\nprint(focus.nome, focus.fabricante.nome, focus.motor.nome)\n</code></pre> <p>\u274e 219 - TEORIA - Heran\u00e7a, generaliza\u00e7\u00e3o e especializa\u00e7\u00e3o</p> <p>-&gt;  Heran\u00e7a simples - Rela\u00e7\u00f5es entre classes</p> <p>---;</p> <p>-&gt;  Associa\u00e7\u00e3o - usa Agrega\u00e7\u00e3o - tem -&gt;  Composi\u00e7\u00e3o - \u00c9 dono de, Heran\u00e7a \u00c9 um</p> <p>-&gt;  Heran\u00e7a vs Composi\u00e7\u00e3o</p> <p>---;</p> <p>-&gt;  Classe principal (Pessoa)       -&gt;  super class, base class, parent class -&gt;  classes filhas (Cliente)       -&gt;  sub class, child class, derived class</p> <p>\u274e 220 - Heran\u00e7a Simples - Python Orientado a Objetos</p> <pre><code>  '''\n    -&gt;  Associa\u00e7\u00e3o - usa Agrega\u00e7\u00e3o - tem\n    -&gt;  Composi\u00e7\u00e3o - \u00c9 dono de, Heran\u00e7a \u00c9 um\n    -&gt;  Heran\u00e7a vs Composi\u00e7\u00e3o\n    ----------------------------------------------\n    -&gt;  Classe principal (Pessoa)\n          -&gt;  super class, base class, parent class\n    -&gt;  classes filhas (Cliente)\n          -&gt;  sub class, child class, derived class\n  '''\nclass Pessoa:\ncpf = '1234'\ndef __init__(self, nome, sobrenome)\nself.nome = nome\nself.sobrenome = sobrenome\ndef falar_nome_classe(self):\nprint('Classe PESSOA')\nprint(self.nome, self.sobrenome, self.__class__.__name__)\nclass Cliente(Pessoa):\ndef falar_nome_classe(self):\nprint('Eita, nem sa\u00ed da Classe PESSOA')\nprint(self.nome, self.sobrenome, self.__class__.__name__)\nclass Aluno(Pessoa):\ncpf = 'cpf aluno'\n...\nc_1 = Cliente('Luiz', 'Ot\u00e1vio')\nc_1.falar_nome_class()\na_1 = Aluno('Maria', 'Helena')\na_1.falar_nome_classe()\nprint(a_1.cpf)\n# help(cliente)\n</code></pre> <p>\u274e 221 - (Parte 1) super ea sobreposi\u00e7\u00e3o de membros em Python Orientado a Objetos</p> <pre><code>  '''\n    -&gt;  Classe principal (Pessoa)\n          -&gt;  super class, base class, parent class\n    -&gt;  Classes filhas (Cliente)\n          -&gt;  sub class, child class, derived class\n    -&gt;  class MinhaString(str):\n          def upper(self):\n            print('CHAMOU UPPER')\n            return - super(MinhaString, self).upper()\n            print('DEPOIS DO UPPER')\n            return retorno\n    string = MinhaString('Luiz')\n    print(string.upper())\n  '''\nclass A(object):\natributo_a = 'valor a'\ndef __init__(self, atributo):\nself.atributo = atributo\ndef metodo(self):\nprint('A')\nclass B(A):\natributo_b = 'valor b'\ndef __init__(self, atributo, outra_coisa):\nsuper().__init__(atributo)\nself.outra_coisa = outra_coisa\ndef metodo(self):\nprint('B')\nclass C(B):\natributo_c = 'valor c'\ndef __init__(self, *args, **kwargs):\nprint('EI , burli o sistema')\nsuper().__init__(*args, **kwargs)\ndef metodo():\n# super().motodo() # B\n# super(B, self).metodo() # A\n# super(A, self).metodo() # object\nA.motodo(self)\nB.motodo(self)\nprint('C')\nprint(C.mro())\nprint(B.mro())\nprint(A.mro())\nc = C('Atributo', 'Qualquer')\nprint(c.atributo_a)\nprint(c.atributo_b)\nprint(c.atributo_c)\nc.metodo()\n</code></pre> <p>\u274e 222 - (Parte 2) super ea sobreposi\u00e7\u00e3o de membros em Python Orientado a Objetos</p> <p>\u2728\ud83c\udf80 Continua\u00e7\u00e3o a aula anterior \u2728\ud83c\udf80</p> <p>\u274e 223 - Teoria - Heran\u00e7a m\u00faltipla - Python Orientado a Objetos</p> <p>-&gt;  Quer dizer que no Python, uma classe pode estender       v\u00e1rias ouras classes.</p> <p>-&gt;  Heran\u00e7a simples:</p> <p>-&gt;  Animal =&gt; Mam\u00edfero  =&gt;  Humano =&gt; Pessoa  =&gt;  Cliente</p> <p>-&gt;  Heran\u00e7a m\u00faltipla e mixins:</p> <p>-&gt;  Log =&gt;  FileLog -&gt;  Animal =&gt; Mam\u00edfero  =&gt;  Humano =&gt; Pessoa  =&gt;  Cliente -&gt;  Cliente(Pessoa, FileLog)</p> <p>-&gt;  A, B, C, D -&gt;  D(B, C)   - C(A)  - B(A) -  A</p> <p>-&gt;  M\u00e9todo =&gt; falar</p> <pre><code>          A\n        /   \\\n        B    C\n        \\   /\n          D\n</code></pre> <p>-&gt;  Python 3 usa C3 superclass linearization       para gera o mro. (method resolution Order) -&gt;  Voc\u00ea n\u00e3o precisa estudar isso (\u00e9 complexo) -&gt;  https://en.wikipedia.org/wiki/C3_linearization/</p> <p>-&gt;  Para saber a ordem de chamada dos m\u00e9todos -&gt;  Use o m\u00e9todo de classe Classe.mro() -&gt;  Ou o atributo <code>__mro__</code> (Dunder - Double Underscore)</p> <p>\u274e 224 - Heran\u00e7a m\u00faltipla - Python Orientado a Objetos</p> <pre><code>...\nclass A:\n...\ndef quem_sou(self):\nprint('A')\nclass B(A):\n...\n# def quem_sou(self):\n#   print('B')\nclass C(A):\n...\ndef quem_sou(self):\nprint('C')\nclass D(B, C):\n...\ndef quem_sou(self):\nprint('D')\nd = D()\nd.quem_sou()\n# print(D.__mrom__)\nprint(D.mro())\n</code></pre> <p>\u274e 225 - (Parte 1) Mixins, Abstra\u00e7\u00e3o e a uni\u00e3o de tudo at\u00e9 aqui</p> <pre><code>  '''\n    Leskov.\n    -&gt;  Abstra\u00e7\u00e3o\n  '''\nclass Log:\ndef log(self, msg)\nraise NotImplementedError('Implemente o m\u00e9todo log')\nclass LogFileMixin(Log)\ndef log(self, msg)\nprint(msg)\nif __name__ == '__main__':\nl = LogFileMixin()\nl.log('qualquer')\n# outro arquivo\nfrom log import Log\n...\n</code></pre> <p>\u274e 226 - (Parte 2) LogFileMixin, LogPrintMixin e a uni\u00e3o de tudo at\u00e9 aqui</p> <pre><code>  '''\n    -&gt;  Heran\u00e7a - \u00e9 um\n    ---------------------------------------------\n  '''\nclass Log:\ndef _log(self, msg):\nraise NotImplementedError('Implemente o m\u00e9todo log')\ndef log_error(self, msg)\nreturn self._log(f'Error: {msg}')\ndef log_success(self, msg):\nreturn self._log(f'Success: {msg}')\nclass LogFileMixin(Log):\ndef _log(self, msg):\nprint(msg)\nclass LogPrintMixin(log):\ndef _log(self, msg):\nprint(f'{msg} ({self.__class__.__name__})')\nif __name__ == '__main__':\nl = LogPrintMixin()\nl.log_error('qualquer coisa')\nl.log_success('Que legal')\nfrom log import Log\n...\n</code></pre> <p>\u274e 227 - (Parte 3) LogFileMixin e a uni\u00e3o de tudo at\u00e9 aqui</p> <pre><code>    '''\n    hard coded\n    -&gt;  Heran\u00e7a - \u00e9 um\n    ---------------------------------------------\n  '''\nimport pathlip import Path\n# https://www.youtube.com/watch?v=T17BTNKBeJY\nLOG_FILE = Path(__file__).parent / 'log.txt'\nclass Log:\ndef _log(self, msg):\nraise NotImplementedError('Implemente o m\u00e9tado log')\ndef log_error(self, msg)\nreturn self._log(f'Error: {msg}')\ndef log_success(self, msg):\nreturn self._log(f'Success: {msg}')\nclass LogFileMixin(Log):\ndef _log(self, msg):\nmsg_fomatada = f'{msg} ({self.__class__.__name__})'\nprint('Salvando no log:', msg_formatada)\nwith open(LOG_FILE, 'a') as arquivo:\narquivo.write(msf_fomatada)\narquivo.write('\\n')\nclass LogPrintMixin(log):\ndef _log(self, msg):\nprint(f'{msg} ({self.__class__.__name__})')\nif __name__ == '__main__':\nlp = LogPrintMixin()\nlp.log_error('qualquer coisa')\nlp.log_success('Que legal')\nlf = LogFileMixin()\nlf.log_error('qualquer coisa')\nlf.log_success('Que legal')\nfrom log import LogFileMixin, LogPrintMixin\n...\n</code></pre> <p>\u274e 228 - (Parte 4) Eletr\u00f4nico, Smartphone com Mixin e a uni\u00e3o de tudo at\u00e9 aqui</p> <pre><code>from log import LogFlileMixing\nclass Eletronico:\ndef __init__(self, nome):\nself._nome = nome\nself._logado = False\ndef ligar(self):\nif not self._ligado:\nself._logado = True\ndef deligar(self):\nif self._ligado:\nself._ligado = False\nclass Smartphone(Eletronico, LogFileMixin):\ndef ligar(self):\nsuper().ligar()\nif self._ligado:\nmsg = f'{self_nome} est\u00e1 ligado'\nself.log_success(msg)\ndef desligar(self):\nsuper().desligar()\nif not self._logado:\nmsg = f'{self._nome} est\u00e1 desligado'\nself.log_error(msg)\n# outro arquivo\nfrom log import LogFileMixin, LogPrintMixin\nfrom eletronico import Smartphone\ngalaxy_s = Smartphone('Galaxy S')\niphone = Smartphone('iPhone')\ngalaxy_s.logar()\niphone.desligar()\n</code></pre> <p>\u274e 229 - Classes abstratas - Abstract Base Class (abc) - Python Orientado a Objetos</p> <pre><code>  '''\n    -&gt;  ABCs s\u00e3o usados como contratos para a defini\u00e7\u00e3o\n          de novas classes. Elas podem for\u00e7ar outras classes\n          a criarem m\u00e9todos concretos. Tamb\u00e9m podem ter\n          m\u00e9todos concretos por elas mesmas.\n    -&gt;  @abstractmethods s\u00e3o m\u00e9todos que n\u00e3o t\u00eam corpo.\n    -&gt;  As regras para classes abstratas com m\u00e9todos\n          abstratos \u00e9 que elas N\u00c3O PODEM ser inst\u00e2nciadas\n          diretamente.\n    -&gt;  M\u00e9todos abstratos DEVEM  ser implementados\n          nas subclasses (@abstractmethod).\n    -&gt;  Uma classe abstrata em Python tem sua metaclasse\n          sendo ABCMeta.\n    -&gt;  \u00c9 poss\u00edvel criar @property @setter @classmethod\n          @staticmethod e @method como abstratos, para isso\n          use @abstractmethod como decorator mis interno\n  '''\nfrom abc import ABC, astractmethod\nclass Log(ABC):\n@abstractmethod\ndef _log(self, msg): ...\ndef log_error(self, msg):\nreturn self._log(f'Error: {msg}')\ndef log_success(self, msg):\nreturn self._log(f'Success: {msg}')\nclass LogPringMixin(Log):\ndef _log(self, msg):\nprint(f'{msg} (self.__class__.__name__)')\nl = LogPrintMixin()\nl.log_error('oi')\n</code></pre> <p>\u274e 230 - abstractmethod para qualquer m\u00e9todo j\u00e1 decorado (property e setter)</p> <pre><code>  '''\n    -&gt;  \u00c9 poss\u00edvel criar @property @property.setter @classmethod\n          @staticmethod e m\u00e9todos normais como abstratos, para isso\n          use @abstractmethod como decorator mais interno.\n    -&gt;  Foo - Bar s\u00e3o palavras usadas como placeholder\n          para palavras que podem mudar na programa\u00e7\u00e3o\n    https://docs.python.org/pt-br/3/library/abc.html\n  '''\nfrom alc import ABC, abstractmethod\nclass AbstractFoo(ABC):\ndef __init__(self, name):\nself._name = None\nself.name = name\n@property\ndef name(self)\nreturn self._name\n@name.setter\n@abstractmethod\ndef name(self, name): ...\nclass Foo(AbstractFoo):\ndef __init__(self, name):\nsuper().__init__(name)\n# print('Sou in\u00fatil')\n@AstractFoo.name.setter\ndef name(self, name)\nself._name = name\nfoo = Foo('Bar')\nprint(foo.name)\n</code></pre> <p>\u274e 231 - Teoria: polimorfismo, assinatura de m\u00e9todos e Liskov Substitution Principle</p> <p>-&gt;  Polimorfismo \u00e9 o princ\u00edpio que permite que       classes deridavas de uma mesma superclasse       tenham m\u00e9todos iguais (com mesma assinatura)       mas comportamentos diferentes.</p> <p>-&gt;  Assinatura de m\u00e9todo = Mesmo nome e quantidade       de par\u00e2metros (retorno n\u00e3o faz parte da  assinatura)</p> <p>-&gt;  Opini\u00e3o + princ\u00edpios que contam:</p> <p>-&gt; Assinatura do m\u00e9todo: nome, par\u00e2metros e retorno iguais       SO\"L\"ID</p> <p>-&gt; S  -&gt;  Sigle Responsibility Principle -&gt; O  -&gt;  Open Close Principle -&gt; L  -&gt;  Liskov substitution Principle -&gt; I  -&gt;  Interface segregation principle -&gt; D  -&gt;  Dependency inversion principle</p> <p>-&gt;  Princ\u00edpio da substitui\u00e7\u00e3o de liskov -&gt;  Objetos de uma superclasse devem ser substitu\u00edveis       por objetos de uma subclasse sem quebrar a aplica\u00e7\u00e3o.</p> <p>\u274e 232 - Na pr\u00e1tica - polimorfismo, assinatura de m\u00e9todos e Liskov Substitution Principle</p> <pre><code>...\n'''\n  -&gt;  Sobrecarga de m\u00e9todos (overload) \ud83d\udc0d = \u274c\n  -&gt;  Sobreposi\u00e7\u00e3o de m\u00e9todos (override) \ud83d\udc0d = \u2705\n'''\nfrom abc import ABC, abstractmethod\nclass Notificacao(ABC):\ndef __init__(self, mensagem):\nself.mensagem = mensagem\n@abstractmethod\ndef enviar(self) -&gt; bool: ...\nclass NotificacaoEmail(Notificacao):\ndef enviar(self) -&gt; bool:\nprint('E-mail: enviando -', self.mensagem)\nreturn True\nclass NotificacaoSMS(Notificacao):\ndef enviar(self) -&gt; bool:\nprint('SMS enviado - ', self.mensagem)\nreturn False\ndef notificar(notificacao: Notificacao):\nnotificacao_enviada = notificacao.enviar()\nif notificacao_enviada:\nprint('Notifica\u00e7\u00e3o enviada')\nelse:\nprint('Notifica\u00e7\u00e3o N\u00c3o enviada')\nnotificacao_email = NotificacaoEmail('testando e-mail')\nnotificar(notificacao_email)\nnotificacao_sms = NotificacaoSMS('testando SMS')\nnotificar(notificacao_sms)\n</code></pre> <p>\u274e 233 - Criando Exception em Python Orientado a Objetos (Exce\u00e7\u00f5es)</p> <pre><code>'''\n  -&gt;  Para criar uma Exception em Python, voc\u00ea s\u00f3\n        precisa herdar de alguma exce\u00e7\u00e3o da linguagem.\n    https://docs.python.org/3/library/exceptions.html\n  -&gt;  Criando exce\u00e7\u00f5es (comum colocar Error ao final)\n  -&gt;  Levando (raise) / Lan\u00e7ando (throw) exce\u00e7\u00f5es\n  -&gt;  Relan\u00e7ando exce\u00e7\u00f5es\n  -&gt;  Adicionando notas em exce\u00e7\u00f5es (3.11.0)\n'''\nclass MeuError(Exception):\n...\n</code></pre> <p>\u274e 234 - Levantando e tratando suas Exceptions (Exce\u00e7\u00f5es)</p> <pre><code>...\nclass OutroError(Exception):\n...\ndef levantar():\nexception_ = MeuError('a', 'b', 'c')\nraise exception_\ntry:\nlevando()\nexcept (MeuError, ZeroDivisionError) as error:\nprint(error.__class__.__name__)\nprint(error.args)\nprint()\nexception_ = OutroError('Vou lan\u00e7ar de novo')\nraise excepton_ from error\n</code></pre> <p>\u274e 235 - Notas das exceptions em Python 3.11+(add_notes,<code>__notes__</code>)</p> <pre><code>'''\n  https://docs.python.org/3/library/exceptions.html\n'''\nclass OutroError(Exception):\n...\ndef levantar():\nexception_ = MeuError('a', 'b', 'c')\nexception_.add_note('olha a nota 1')\nexception_.add_note('voc\u00ea errou isso')\nraise exception_\ntry:\nlevando()\nexcept (MeuError, ZeroDivisionError) as error:\nprint(error.__class__.__name__)\nprint(error.args)\nprint()\nexception_ = OutroError('Vou lan\u00e7ar de novo')\nexception_.__notes__ = error.__notes__.copy()\nexception_.add_note('Mais uma nota')\nraise excepton_ from error\n</code></pre> <p>\u274e 236 - Teoria - python Special Methods, Magic Methods ou Dunder Methods</p> <p>-&gt;  Dunder = Double Underscore - <code>__dunder__</code></p> <p>-&gt;  Antigo e \u00fateil https://rszalski.github.io/magicmethods/</p> <p>-&gt;  https://docs.python.org/3/reference/datamodel.html#specialnames/</p> <p>-&gt;  <code>__lt__</code>(self, other) - self  &lt;  other</p> <p>-&gt;  <code>__le__</code>(self, other) - self  &lt;= other</p> <p>-&gt;  <code>__gt__</code>(self, other) - self   &gt; other</p> <p>-&gt;  <code>__ge__</code>(self, other) - self   &gt;= other</p> <p>-&gt;  <code>__eq__</code>(self, other) - self   == other</p> <p>-&gt;  <code>__ne__</code>(self, other) - self   != other</p> <p>-&gt;  <code>__add__</code> (self, other) - self  + other</p> <p>-&gt;  <code>__sub_</code> (self, other) - self  - other</p> <p>-&gt;  <code>__mul_</code> (self, other) - self  * other</p> <p>-&gt;  <code>__truedic__</code> (self, other) - self / other</p> <p>-&gt;  <code>__neg__</code>(self) - self</p> <p>-&gt;  <code>__str__</code>(self) - str</p> <p>-&gt;  <code>__repr__</code>(self) - str</p> <p>\u274e 237 - Python Dunder Methods <code>__repr__</code> e <code>__str__</code></p> <pre><code>...\nclass Ponto:\ndef __init__(self, x, y, z ='String'):\nself.x = x\nself.y = y\nself.z = z\ndef __str__(self):\nreturn f('{self.x}, {self.y}')\ndef __repr__(self):\n# class_nome = self.__class__.__name__\nclass_name = type(self).__name__\nreturn f'{class_name} (x={self.x!r}, {y=self.y!r}, z={self.z!r})'\np_1 = Ponto(1, 2)\np_2 = Ponto(978, 876)\nprint(p_1)\nprint(repr(_2))\nprint(f'{p_2!r}')\n</code></pre> <p>\u274e 238 - Exemplo de uso de dunder methods (m\u00e9todos m\u00e1gicos)</p> <pre><code>...\nclass Ponto:\ndef __init__(self, x, y, z ='String'):\nself.x = x\nself.y = y\nself.z = z\ndef __repr__(self):\n# class_nome = self.__class__.__name__\nclass_name = type(self).__name__\nreturn f'{class_name} (x={self.x!r}, {y=self.y!r}, z={self.z!r})'\ndef __add__(self, other):\nnovo_x = self.x + other.x\nnovo_y = self.y + other.y\nreturn Ponto(novo_x, novo_y)\ndef __gt__(self, other):\nresultado_self = self.x + self.y\nresultado_other = other.x + other.y\nreturn resultado_self &gt; resultado_other\nif __name__ == '__main__':\np_1 = Ponto(4, 2) # 6  \np_2 = Ponto(6, 4) # 10\np_3 = p_1 + p_2\nprint(p_3)\nprint('P_1 \u00e9 maior que p_2', p_1 &gt; p_2)\nprint('P_2 \u00e9 maior que p_1', p_2 &gt; p_1)\n</code></pre> <p>\u274e 239 - <code>__new__</code> e <code>__init__</code> em classes Python</p> <pre><code>'''\n  -&gt;  __new__ \u00e9 o m\u00e9todo respons\u00e1vel por criar e \n        retornar o novo objeto. Por isso, new recebe cls.\n  -&gt;  __new__ \u2757DEVE retornar o novo objeto \u2757\n  -&gt;  __init__ \u00e9 o m\u00e9todo respons\u00e1vel por inicializar\n        a inst\u00e2ncia. Por isso, init recebe self.\n  -&gt;  __init__ \u2757N\u00c2O DEVE retornar nada (None) \u2757\n  -&gt;  object \u00e9 a super classe de uma classe\n'''\nclass A:\ndef __new__(cls, *args, **kwargs):\ninstancia = super().__new__(cls)\nreturn instancia\ndef __init__(self, x):\nself.x = x\nprint('sou o init')\ndef __repr__(self):\nreturn 'A()'\na = A(123)\nprint(a.x)\n</code></pre> <p>\u274e 240 - Context Manager com classes - Criando e Usando gerenciadores de contexto</p> <pre><code>'''\n  -&gt;  Voc\u00ea pode implementar seus pr\u00f3prios protocolos\n        apenas implementando os dunder methods que o \n        Python vai usar.\n  -&gt;  Isso \u00e9 chamado de Duck typing. Um conceito\n        relacionado com tipagem din\u00e2mica onde o Python n\u00e3o\n        est\u00e1 interessado no tipo, mas se alguns m\u00e9todos existem\n        no seu objeto para que ele funcione de forma adequada.\n  -&gt;  Duck Typing:\n  -&gt;  Quando vejo um p\u00e1ssaro que caminha como um pato, nada como\n        um patp e grasna cmo um pato, eu chamo aquele p\u00e1ssaro de pato.\n  -&gt;  Para criar um context manager, os m\u00e9todos __enter__ e __exit__\n        devem ser implementados.\n  -&gt;  O m\u00e9todo __exit__ receber\u00e1 a classe de exce\u00e7\u00e3o, e exce\u00e7\u00e3o e o\n        traceback. Se ele retornar True, exce\u00e7\u00e3o no with ser\u00e1\n        suprimidas\n  -&gt;  Ex:\n  with open('aula_149.txt', 'w') as arquivo:\n    ...\n'''\nclass MyOpen:\ndef __init__(self, caminho_arquivo, modo):\nself.caminho_arquivo = caminho_arquivo\nself.modo = modo\nself._arquivo = None\ndef __enter__(self):\nprint('ABRINDO ARQUIVO')\nself._arquivo = open(self.caminho_arquivo, self.modo, encoding='utf8')\nreturn self._arquivo\ndef __exit__(self, class_exception, exception_, traceback_):\nprint('FECHANDO ARQUIVO')\nself._arquivo.close()\nwith MyOpen('aula_txt', 'w') as arquivo:\narquivo.write('Linha 1 \\n')\narquivo.write('Linha 2 \\n')\narquivo.write('Linha 3 \\n')\nprint('WITH', arquivo)\n</code></pre> <p>\u274e 241 - Exception em context manager com classes</p> <pre><code>...\nclass MyOpen:\ndef __init__(self, caminho_arquivo, modo):\nself.caminho_arquivo = caminho_arquivo\nself.modo = modo\nself._arquivo = None\ndef __enter__(self):\nprint('ABRINDO ARQUIVO')\nself._arquivo = open(self.caminho_arquivo, self.modo, encoding='utf8')\nreturn self._arquivo\ndef __exit__(self, class_exception, exception_, traceback_):\nprint('FECHANDO ARQUIVO')\nself._arquivo.close()\n# raise class_exception(*exception_.args).with_traceback(traceback_)\n# print(class_exception)\n# print(exception_)\n# print(traceback_)\n# exception_add_note('Minha nota')\n# return True # Tratei execu\u00e7\u00e3o\nwith MyOpen('aula_txt', 'w') as arquivo:\narquivo.write('Linha 1 \\n')\narquivo.write('Linha 2 \\n', 123)\narquivo.write('Linha 3 \\n')\nprint('WITH', arquivo)\n</code></pre> <p>\u274e 242 - Context Manager com contextlib.contextmanager</p> <pre><code>from contextlib import contextmanager\n@contextmanager\ndef my_open(caminho_arquivo, modo):\ntry:\nprint('Abrindo arquivo')\narquivo = open(caminho_arquivo, modo, encoding='utf8')\nyield arquivo\nexcept Exception as e: \nprint('Ocorreu', e)\nfinally:\nprint('Fechando arquivo')\narquivo.close()\nwith my_open('aula_150.txt', 'w') as arquivo:\narquivo.write('Linha 1\\n')\narquivo.write('Linha 2\\n', 123)\narquivo.write('Linha 3\\n')\nprint('WITH', arquivo)\n</code></pre> <p>\u274e 243 - Fun\u00e7\u00f5es decoradoras e decoradores com classes</p> <pre><code>    def meu_repr(self):\nclass_name = self.__class__.__name__\nclass_dect = self.__dict__\nclass_repr = f'{class_name}({class_dict})'\nreturn class_repr\ndef adiciona_repr(cls)\ncls.__repr__ = meu_repr\nreturn cls\n@adiciona_repr\nclass Time:\ndef __init__(self, nome):\nself.nome = nome\nclass Planeta:\ndef __init__(self, name):\nself.nome = nome\nbrasil = Time('Brasil')\nportugal = Time('Portugal')\nterra = Planeta('Terra')\nmarte = Planeta('Marte')\nprint(brasil)\nprint(portugal)\nprint(terra)\nprint(marte)\n</code></pre> <p>\u274e 244 - Fun\u00e7\u00f5es decoradoras e decoradores com m\u00e9todos</p> <pre><code>    def meu_repr(self):\nclass_name = self.__class__.__name__\nclass_dect = self.__dict__\nclass_repr = f'{class_name}({class_dict})'\nreturn class_repr\ndef adiciona_repr(cls)\ncls.__repr__ = meu_repr\nreturn cls\ndef meu_planeta(metodo):\ndef interno(self, *args, **kwargs):\nresultado - metodo(self, *args, **kwargs)\nif 'Terra' in resultado:\nreturno 'Voc\u00ea est\u00e1 em casa'\nreturn resultado\nreturn interno\n@adiciona_repr\nclass Time:\ndef __init__(self, nome):\nself.nome = nome\nclass Planeta:\ndef __init__(self, name):\nself.nome = nome\n@meu_planeta\ndef falar_nome(self)\nreturn f'O planeta \u00e9 {self.nome}'\nbrasil = Time('Brasil')\nportugal = Time('Portugal')\nterra = Planeta('Terra')\nmarte = Planeta('Marte')\nprint(brasil)\nprint(portugal)\nprint(terra)\nprint(marte)\nprint(terra.falar_nome())\nprint(marte.falar_nome())\n</code></pre> <p>\u274e 245 - M\u00e9todos especial <code>__call__</code></p> <pre><code>    '''\n      -&gt;  callable \u00e9 algo que pode ser executado com par\u00eanteses\n      -&gt;  Em classes normais, __call__ faz a inst\u00e2ncia de uma\n            classe \"callable\".\n    '''\nclass CallMe:\ndef __init__(self, phone):\nself.phone = phone\ndef __call__(self, nome):\nprint(nome, 'est\u00e1 chamando', self.phone)\nreturn 2134\ncall_1 = CallMe('23945876545')\nretorno = call_1('Luiz Ot\u00e1vio')\nprint(retorno)\n</code></pre> <p>\u274e 246 - Classes decoradoras (Decorator classes)</p> <pre><code>      class Multiplicar:\ndef __init__(self, multiplicador):\nself._multiplicador = multiplicador\ndef __call__(self, func):\ndef interna(*args, **kwargs):\nresultado = func(*args, **kwargs)\nreturn resultado * self._multiplicador\nreturn interna\n@Multiplicar(2)\ndef soma(x, y):\nreturn x + y\ndois_mais_quatro = soma(2, 4)\nprint(dois_mais_quatro)    \n</code></pre> <p>\u274e 247 - Teoria - metaclasses s\u00e3o o tipo das classes</p> <p>-&gt;  EM PYTHON, TUDO \u00c9 UM OBJETO (CLASSES TAMB\u00c9M)</p> <p>-&gt;  Ent\u00e3o, qual \u00e9 o tipo de c uma classe? (type)</p> <p>-&gt;  Seu objeto \u00e9 uma inst\u00e2ncia da sua classe</p> <p>-&gt;  Sua classe \u00e9 uma inst\u00e2ncia de type (tuple \u00e9 uma metaclass)</p> <p>-&gt;  type('Name' (Bases,), <code>__dict__</code>)</p> <p>-&gt;  Ao criar uma classe, coisas ocorrem por padr\u00e3o nessa ordem:</p> <p>-&gt;  <code>__new__</code> da metaclass \u00e9 olhado e cria a nova classe</p> <p>-&gt;  <code>__call__</code> da metaclass \u00e9 chamado com os argumentos e chama:</p> <p>-&gt;  <code>__new__</code> da class com os argumentos (cria a inst\u00e2ncia)</p> <p>-&gt;  <code>__init__</code> da class com so argumentos</p> <p>-&gt;  <code>__call__</code> da metaclass termina a execu\u00e7\u00e3o</p> <p>-&gt;  M\u00e9todos importantes da metaclass</p> <p>-&gt;  <code>__new__</code> (msc, name, bases, dct) (Cria  a classe)</p> <p>-&gt;  <code>__call__</code> (cls, args, *kwargs) (Cria e inicializa a inst\u00e2ncia)</p> <p>-&gt;  \"Metaclasses n\u00e3o magias mais profundas do que  99% dos usu\u00e1rios       deveriam se preocupar. Se voc\u00ea saber se precisa delas,       n\u00e3o precisa (as pessoas que realmente precisam delas sabem       com certeza que precisam delas e n\u00e3o precisam de uma explica\u00e7\u00e3o        sobre o porqu\u00ea).\"</p> <p>-&gt;  Rim Peters (CPython Core Developer)</p> <p>object acima</p> <p>class Foo:   ...</p> <pre><code>    Foo = type('Foo', (object,), {})\nf = Foo()\n# print(isinstance(f, Foo))\nprint(type(f))\nprint(type(Foo))\n</code></pre> <p>\u274e 248 - <code>__new__</code> de uma metaclass cria e retorna a classe em si</p> <pre><code>  ...\ndef meu_repr(self):\nreturn f'{type(self).__name__}({self.__dict__})'\nclass Meta(type):\ndef __new__(mcs, name, bases, dct):\nprint('METACLASS NEW')\ncls = super().__new__(msc, name, bases, dct)\ncls.attr = 1234\ncls.__repr__ = meu_repr\nif 'falar' not in cls.__dict__ or not callable(cls.__dict__['falar']):\nraise NotImplementedError('Implemente falar')\nreturn cls\ndef __call__(cls, *args, kwargs):\ninstancia = super().__call__(*args, **kwargs)\nif 'nome' not in instancia.__dict__:\nraise NotImplementedError('Crie o attr nome')\nreturn instancia\nclass Pessoa(metaclass=Meta):\n# falar = 123\ndef __new__(cls, *args, **kwargs):\nprint('MEU NEW')\ninstancia = super().__new__(cls)\nreturn instancia\ndef __init__(self, nome):\nprint('MEU INIT')\n# self.nome = nome\ndef falar(self):\nprint('FALANDO...')\np_1 = Pessoa('Luiz')\np_1.falar()\n</code></pre> <p>\u274e 249 - <code>__call__</code> de uma metaclass cria e retorna a inst\u00e2ncia da classe</p> <p>\ud83c\udf80  Continua\u00e7\u00e3o do anterior</p> <p>\u274e 250 - dir e help + DocString de uma linha (Documenta\u00e7\u00e3o)</p> <pre><code>    import uma_linha\n# print(dir(uma_linha))\n# print(uma_linha.__doc__)\n# print(uma_linha.__file__)\n# print(uma_linha.__name__)\nhelp(uma_linha)\n# arquivo do uma_linha\n\"\"\"O que seu m\u00f3dulo faz \"\"\"\nvariavel = 'valor'\ndef funcao():\nreturn 1\n</code></pre> <p>\u274e 251 - DocString de v\u00e1rias linhas (Documenta\u00e7\u00e3o)</p> <p>-&gt;  Loren ipsum dolor sit amet. Et praesentium nisi non quam mollitia At saepe       quisquam qui quae voluptatem. Eum laudantium impedit qui velit quia ea       glisum nihil. Sed consequatur culpa qui corrupti offcia eos odit tenetur       cum corrupti beatea At provident error cum eveniet consectetur qui perferendis       placeat. Non quibusdam blanditiis est rerum repellat aut facere rerum in       nihil reiciendis ut maxime galisum qui error accusamus.</p> <p>-&gt;  Ut cumque enim ut pssimus ullam non magni doloribus! -&gt;  Ut quasi doloremque aut itaque molestiae eos fugiat       deleniti sed voluotates nisi At eveniet quia et quasi       vero ea fugiat dekectus! In beatae perferendis in modi       possimus eum quaerat maiores ab autem natus ab ullam       itaque ic nobis autem ad harum tempre. Qui dolore eius       et quase aliquid et praesentium fuga sed deserunt adipisci eos       dolor nemo qui animi dolore et odio libere.</p> <p>\u274e 252 - DocString em fun\u00e7\u00e3o (Documenta\u00e7\u00e3o)</p> <pre><code>    \"\"\"\n      -&gt;  Este \u00e9 um m\u00f3dulo de exemplo\n      -&gt;  Este m\u00e9dulo cont\u00e9m fun\u00e7\u00f5es e exemplos de documenta\u00e7\u00e3o de fun\u00e7\u00f5es.\n      -&gt;  A fun\u00e7\u00e3o sima voc\u00ea j\u00e1 conhece bastante.\n    \"\"\"\nvariavel_1 = 1\n# def soma(x, y):\ndef soma(x:int | float, y:int | float) -&gt; int | float:\n\"\"\"\n        -&gt;  Soma x e y\n        -&gt;  Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es e exemplos de documenta\u00e7\u00e3o de fun\u00e7\u00f5es.\n        -&gt;  A fun\u00e7\u00e3o soma voc\u00ea j\u00e1 conhece bastante.\n        :param x: n\u00famero 1\n        :type x:int or float\n        :param y: n\u00famero 2\n        :type y int or float\n        return: A soma entre x e y\n        :r type int or float\n      \"\"\"\nreturn x + y\ndef multiplica(x: int | float, y: int | float, z: int | float | None = None) -&gt; int | float:\n\"\"\"\n        -&gt;  multiplicar x, y e/ou z\n        -&gt;  multiplica x e y. Se z for enviado, multiplica x, y, z.\n      \"\"\"\nif z is None:\nreturn x * y\nreturn x * y * z\nvariavel_2 = 2 \nvariavel_3 = 3 \nvariavel_4 = 4 \n</code></pre> <p>\u274e 253 - DocString em class (Documenta\u00e7\u00e3o)</p> <pre><code>    class Foo:\ndef soma(x:int | float, y:int | float) -&gt; int | float:\n\"\"\"\n          -&gt;  Soma x e y\n          -&gt;  Este m\u00f3dulo cont\u00e9m fun\u00e7\u00f5es e exemplos de documenta\u00e7\u00e3o de fun\u00e7\u00f5es.\n          -&gt;  A fun\u00e7\u00e3o soma voc\u00ea j\u00e1 conhece bastante.\n          :param x: n\u00famero 1\n          :type x:int or float\n          :param y: n\u00famero 2\n          :type y int or float\n          return: A soma entre x e y\n          :rtype int or float\n        \"\"\"\nreturn x + y\ndef multiplica(x: int | float, y: int | float, z: int | float | None = None) -&gt; int | float:\n\"\"\"\n          -&gt;  multiplicar x, y e/ou z\n          -&gt;  multiplica x e y. Se z for enviado, multiplica x, y, z.\n        \"\"\"\nif z is None:\nreturn x * y\nreturn x * y * z\nvariavel_2 = 2 \nvariavel_3 = 3 \nvariavel_4 = 4 \n</code></pre> <p>\u274e 254 - Teoria - enum.Enum (Enumera\u00e7\u00f5es)</p> <p>-&gt;  Enumera\u00e7\u00f5es na programa\u00e7\u00e3o, s\u00e3o usando em ocasi\u00f5es onde temos       um determinado n\u00famero de coisas para escolher.</p> <p>-&gt;  Enums t\u00eam membros e seus valores s\u00e3o constes.</p> <p>-&gt;  Enums em python:</p> <p>-&gt;  S\u00e3o um conjunto de nomes simb\u00f3licos (membros) ligados a valores \u00fanicos</p> <p>-&gt;  podem ser iterados para retornar seus membros can\u00f4nicos na ordem de       defini\u00e7\u00e3o</p> <p>-&gt;  enum.Enum \u00e9 a superclasse para enumera\u00e7\u00f5es. Mas tamb\u00e9m pode ser usada       diretamente (mesmo assim, Enums n\u00e3o s\u00e3o classes normais em Python).</p> <p>-&gt;  Voc\u00ea poder\u00e1 usar seu Enum com type annoteions, com isinstance e       outras coisas relacionadas com tipo.</p> <p>-&gt;  para obter os dados:</p> <p>-&gt;  membro = Classe(valor), Classe['chave']</p> <p>-&gt;  chave = Classe.chave.nome</p> <p>-&gt;  valor = Classe.chave.value</p> <pre><code>    def mover(direcao):\nprint(f'Movendo para {direcao}')\nmover('esquerda')\nmover('direita')\nmover('acima')\nmover('abaixo')\n</code></pre> <p>\u274e 255 - C\u00f3digo - enum.Enum (Enumera\u00e7\u00f5es)</p> <pre><code>    ...\nimport enum\nclass Direcoes(enum.Enum):\nESQUERDA = enum.auto()\nDIREITA = enum.auto()\nACIMA = enum.auto()\nABAIXO = enum.auto()\nprint(Direcoes(1), Direcoes['ESQUERDA'], Direcoes.ESQUERDA)\nprint(Direcoes(1).name Direcoes.ESQUERDA.value\ndef mover(direcao:Direcoes):\nif not isinstance(direcao, Direcoes):\nraise ValueError('Dire\u00e7\u00e3o n\u00e3o encontrada')\nprint(f'Movendo para {direcao.name} ({direcao.value})')\nmover(Direcoes.ESQUERDA)\nmover(Direcoes.DIREITA)\nmover(Direcoes.ACIMA)\nmover(Direcoes.ABAIXO)\n</code></pre> <p>\u274e 256 - Exerc\u00edcio com Abstra\u00e7\u00e3o, Heran\u00e7a Encapsulamento e Polimorfismo</p> <p>\ud83d\udccd  Exerc\u00edcios</p> <pre><code>    \"\"\"\n      -&gt;  Criar um sistema banc\u00e1rio (extremamente simples) que tem cliente, conta e\n            um banco. A ideia \u00e9 que o cliente tenha uma conta (poupan\u00e7a e corrente)\n            e que possa sacar/depositar nessa conta. Contas corrente tem um limite extra.\n        Conta (ABC)\n          ContaCorrente\n          ContaPoupanca\n        Pessoa\n          Cliente\n            Cliente -&gt; Conta\n        Banco\n          Banco -&gt;  Cliente\n          Banco -&gt;  Conta\n      -&gt;  Dicas:\n      -&gt;  Criar classe Cliente que herda da classe Pessoa (Heran\u00e7a)\n            Pessoa tem nome e idade (com getters)\n            Cliente TEM conta (Agrega\u00e7\u00e3o da classe ContaCorrente ou contaPoupanca)\n      -&gt;  Criar classes ContaPoupanca e ContaCorrente que herdam de conta\n            ContaCorrente deve ter um limite extra\n            Contas t\u00eam ag\u00eancia, n\u00famero da conta e saldo\n            Contas devem ter m\u00e9todo para dep\u00f3sito\n            Conta (super classe) deve ter o m\u00e9todo secar abstrato (Abstra\u00e7\u00e3o e \n            polimorfismo - as subclasses que implementam o m\u00e9todo sacar)\n      -&gt;  Criar classe Banco para AGREGAR classes de clientes e de contas (Agrega\u00e7\u00e3o)\n      -&gt;  Banco ser\u00e1 respons\u00e1vel autenticar o cliente e as contas da seguinte maneira:\n      -&gt;  Banco tem contas e clientes (Agrega\u00e7\u00e3o)\n            \ud83d\udc49  Checar se a ag\u00eancia \u00e9 daquele banco  \n            \ud83d\udc49  Checar se o cliente \u00e9 daquele banco\n            \ud83d\udc49  Checar se a conta \u00e9 daquele banco\n      -&gt;  S\u00f3 ser\u00e1 poss\u00edvel sacar se passar na autentica\u00e7\u00e3o do banco (descrita acima)\n      -&gt;  Banco autentica por um m\u00e9todo\n    \"\"\"\n</code></pre> <p>\u274e 257 - Solu\u00e7\u00e3o - Criando a classe abstrata Conta</p> <p>\ud83c\udf93 Resposta do professor</p> <p></p> <p>\u274e 258 - Solu\u00e7\u00e3o - Criando classe ContaPoupanca</p> <p>\ud83c\udf93 Resposta do professor</p> <p>\ud83c\udf80 Continua\u00e7\u00e3o</p> <p>\u274e 259 - Solu\u00e7\u00e3o - Criando classe ContaCorrente</p> <p>\ud83c\udf93 Resposta do professor</p> <p>\ud83c\udf80 Continua\u00e7\u00e3o</p> <p>\u274e 260 - DICA EXTRAS - tipagem, linters e settings.json do VS Code</p> <p>\ud83c\udf93 Resposta do professor</p> <p>\ud83c\udf80 Continua\u00e7\u00e3o</p> <p>\u274e 261 - Solu\u00e7\u00e3o - Criando a classe Pessoa</p> <p>\ud83c\udf93 Resposta do professor</p> <p>\ud83c\udf80 Continua\u00e7\u00e3o</p> <p>\u274e 262 - Solu\u00e7\u00e3o - Criando a classe Cliente</p> <p>\ud83c\udf93 Resposta do professor</p> <p>\ud83c\udf80 Continua\u00e7\u00e3o</p> <p>\u274e 263 - Solu\u00e7\u00e3o - Criando a classe Banco (Parte 1)</p> <p>\ud83c\udf93 Resposta do professor</p> <p>\ud83c\udf80 Continua\u00e7\u00e3o</p> <p>\u274e 264 - Solu\u00e7\u00e3o - Criando a classe Banco (Parte 2)</p> <p>\ud83c\udf93 Resposta do professor</p> <p>\ud83c\udf80 Continua\u00e7\u00e3o</p> <p>\u274e 265 - dataclasses -  o que s\u00e3o dataclasses?</p> <pre><code>    \"\"\"\n      -&gt;  o m\u00f3dulo dataclasses fornece um decorador e fun\u00e7\u00f5es para criar \n            m\u00e9todos como __init__(), __repr__(), __eq__() (entre outros) em\n            classes definidas pelo usu\u00e1rio.\n      -&gt;  Em resumo: dataclasses s\u00e3o syntax sugar para criar classes normais.\n      -&gt;  foi descrito na PEP 557 e adicionado n vers\u00e3o 3.7 do Python.\n      -&gt;  doc: https://docs.python.org/3/library/dataclasses.html\n    \"\"\"\nfrom dataclasses import dataclass\n@dataclass\nclass Pessoa:\nnome: str\nidade: int\nif __name__ == '__main__':\np_1 = Pessoa('luiz', 30) \np_2 = Pessoa('luiz', 30) \nprint(p_1 == p_2)\n</code></pre> <p>\u274e 266 - dataclasses com m\u00e9todos property e setter</p> <pre><code>    ...\nfrom dataclasses import dataclass\n@dataclass\nclass Pessoa:\nnome: str\nsobrenome: str\n@property\ndef nome_completo(self):\nreturn f'{self.nome} {self.sobrenome}'\n@nome_completo.setter\ndef nome_completo(self, valor):\nnome, *sobrenome = valor.split()\nself.nome = nome\nself.sobrenome = ' '.join(sobrenome)\nif __name__ == '__main__':\np_1 = Pessoa('luiz', 'Ot\u00e1vio') \np_2.nome_completo = 'Maria Helena'\nprint(p_1)\nprint(p_1.nome_completo)\n</code></pre> <p>\u274e 267 - <code>__init__</code> e <code>__post_init__</code> em dataclasses</p> <pre><code>      from dataclasses import dataclass\n@dataclass(init=False)\nclass Pessoa:\nnome: str\nsobrenome: str\ndef __init__(self, nome, sobrenome):\nself.nome = nome\nself.sobrenome = sobrenome\nself.nome_completo = f'{self.nome} {self.sobrenome}'\ndef __post_init__(self):\nprint('POST INIT')\n# @property\n# def nome_completo(self):\n#   return f'{self.nome} {self.sobrenome}'\n# @nome_completo.setter\n# def nome_completo(self, valor):\n#   nome, *sobrenome = valor.split()\n#   self.nome = nome\n#   self.sobrenome = ' '.join(sobrenome)\nif __name__ == '__main__':\np_1 = Pessoa('luiz', 'Ot\u00e1vio') \nprint(p_1)\nprint(p_1.nome_completo)\n</code></pre> <p>\u274e 268 - Configura\u00e7\u00f5es do decorator dataclass</p> <pre><code>    ...\nfrom dataclasses import dataclass\n# @dataclass(repr=True, frozen=True, order=True)\n@dataclass(repr=True)\nclass Pessoa:\nnome: str\nsobrenome: str\nif __name__ == '__main__':\nlista = [\nPessoa('A', 'Z'),\nPessoa('B', 'Y'),\nPessoa('C', 'X'),\n]\nordenadas = sorted(lista, reverse=True, key=lombda p: p.sobrenome)\nprint(ordenadas)\n</code></pre> <p>\u274e 269 - asdict e astuple em dataclass</p> <pre><code>      from dataclasses import asdict, astuple, dataclass\n@dataclass\nclass Pessoa:\nnome: str\nsobrenome: str\nif __name__ == '__main__':\np_1 = Pessoa('luiz', 'Ot\u00e1vio') \nprint(asdict(p_1).keys())\nprint(asdict(p_1).values())\nprint(asdict(p_1).items())\nprint(astuple(p_1[0]))\n</code></pre> <p>\u274e 270 - Valores padr\u00e3o, field e fields em dataclasses</p> <pre><code>    from dataclasses import dataclass, field\nclass Pessoa:\nnome: str = field(\ndefault='MISSING', repr=False\n)\nsobrenome: str = 'Not sent'\nidade: init = 100\nendereco: list[str] = field(default_factory=list)\nif __name__ == '__main__':\np_1 = Pessoa() \n# print(fields(p_1))\nprint(p_1)\n</code></pre> <p>\u274e 271 - namedtuple - tuplas imut\u00e1veis com nomes para valores</p> <pre><code>    \"\"\"\n      -&gt;  Usamos nomedtuples para criar classes de objetos que s\u00e3o apenas um \n            agrupamento de atributos, como classes normais sem m\u00e9todos, ou registros\n            de bases de dados, etc.\n      -&gt;  As nomedtuples s\u00e3o imut\u00e1veis assim como as tuplas.\n      -&gt;  https://docs.python.org/3/library/collections.html#collections.namedtuple\n      -&gt;  https://docs.python.org/3/library/typing.html#typing.NamedTuple\n      -&gt;  https://brasilescola.uol.com.br/curiosidades/baralho.htm\n      from collections import namedtuple\n    \"\"\"\nfrom typing import NamedTuple\nclass Carta(NamedTuple):\nvalor: str = 'VALOR'\nnaipe: str = 'NAIPE'\n# Carta = Namedtuple(\n#   'carta',['valor', 'naipe'],\n#   defaults=['VALOR', 'NAIPE']\n# )\nas_espadas = Carta('A')\nprint(as_espadas._asdict())\nprint(as_espadas)\nprint(as_espadas[0])\nprint(as_espadas.valor)\nprint(as_espadas[1])\nprint(as_espadas.naipe)\nprint()\nprint(as_espadas._fields)\nprint(as_espadas_field_defaults)\nfor valor in as_espadas:\nprint(valor)\n</code></pre> <p>\u274e 272 - Criando sua pr\u00f3prio lista com iterables, iterator e Sequence (collections.abc)</p> <pre><code>    \"\"\"\n      -&gt;  Essa \u00e9 apenas uma aula para introduzir os protocolos de collections.abc no\n            Python. Qualquer outro protocolo poder\u00e1 ser implementado segundo a mesma\n            estrutura usada nessa aula.\n      -&gt; https://docs.python.org/3/library/collections.abc.html\n    \"\"\"\nfrom collections.abc import Iterator\nfrom collections.abc import Sequence\n# class MyList(Iterator):\nclass MyList(Sequence):\ndef __init__(self):\nself._data = {}\nself._index = 0\nself._next_index = 0\ndef append(self, *values):\nfor value in valuies:\nself._data[self._index] = value\nself._index += 1\ndef __len__(self) -&gt; int\nreturn self._index\ndef __getitem__(self, index):\nreturn self._data[index]\ndef __setitem__(self, index, value):\nself._data[index] = value\ndef __iter__(self):\nreturn self\ndef __next__(self):\nif self._next_index &gt;= self._index:\nself._next_index = 0\nraise StopIteration\nvalue = self._data[self._next_index]\nself._next_index += 1\nreturn value\nif __name__ == '__main__':\nlista = MyList()\nlista.append('Maria', Helena)\nlista[0] = 'Jo\u00e3o'\nlista.append('Luiz')\n# print(lista[0])\n# print(len(lista))\nfor item in lista:\nprint(item)\nprint('---')\nfor item in lista:\nprint(item)\nprint('---')\n</code></pre>"},{"location":"conteudo/#secao-6-modulos-python-os-detatime-sys-json-csv-selenium-pillow-e-mais","title":"\ud83d\udd1c \u2705 Se\u00e7\u00e3o 6 M\u00f3dulos Python - os, detatime, sys, json csv, selenium pillow e mais","text":"<p>\u274e 273 - if <code>__name__==__main__</code></p> <pre><code>    def soma(x: float, y: float) -&gt; float:\nreturn x + y\n# outro arquivo\nfrom modulo import soma\nif __name__ == '__main__':\nsoma(1, 3)\n</code></pre> <p>\u274e 274 - Criando data e hora em Python com m\u00f3dulo detatime</p> <pre><code>    \"\"\"\n      -&gt;  datetime(ano, m\u00eas, dia)\n      -&gt;  datetime(ano, m\u00eas, dia, horas, minutos, segundos)\n      -&gt;  datetime('DATA'. 'FORMATO')\n      -&gt;  datetime.now()\n      -&gt;  https://pt.wikipedia.org/wiki/Era_Unix\n      -&gt;  datetime.fromtimestamp(Unix Timestamp)\n      -&gt;  https://docs.python.org/3/library/datetime.html\n      -&gt;  Para timezomes\n      -&gt;  https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n      -&gt;  instalando o pytz\n      -&gt;  pip install pytz types-pytz\n    \"\"\"\nfrom datetime import datetime\ndata_str_data = '2022/04/20 07:49:23'\ndata_str_data = '20/04/2022'\n# data_str_fmt = '%Y-%m-%d %H:%M:%S'\ndata_str_fmt = '%d/%m/%y'\n# data = datetime(2022, 4, 20, 7, 49, 23)\ndata = date.time.strptime(date_str_data, data_str_fmt)\nprint(data)\n</code></pre> <p>\u274e 275 - Data e hora atual (now), com Unix Timestamp e Timezone diferente (pytz)</p> <pre><code>    from datetime import datetime\nfrom pytz import timezone\ndata = datetime.now(timezone('America/Sao_Paulo'))\n# data = datetime(2022, 4, 20, 7, 49, 23, tzinfo=timezone('America/Sao_Paulo'))\nprint(data.timestamp())\nprint(datetime.fromtimestamp(1670849077))\n</code></pre> <p>\u274e 276 - datetime.timedelta e dateutil.relativedelta (calculando datas)</p> <pre><code>    \"\"\"\n      -&gt;  Docs:\n      -&gt;  https://dateutil.readthedocs.io/en/stable/relativedelta.html\n      -&gt;  https://docs.python.org/3/library/datetime.html#timedelta-objects\n          pip install python-dateutil types-python-dateutil\n    \"\"\"\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\nfmt = '%d/%m/%Y %S:%M:%S'\ndata_inicio = datetime.strptime('20/04/1987 09:30:30', fmt)\ndata_fim = datetime.strptime('12/12/2022 08:20:20' fmt)\n# delta = timedelta(days=10, hours=2)\ndelta = relativedelta(data_fim, data_inicio)\nprint(delta.days, delta.years)\n# print(data_fim - delta)\n# print(data_fim + relativedelta(seconds=60, minutes=10))\n# delta = data_fim - data_inicio\n# print(delta.days, delta.seconds, delta.microseconds)\n# print(delta.total_seconds())\n# print(data_fim &gt; data_inicio)\n# print(data_fim &lt; data_inicio)\n# print(data_fim == data_inicio)\n</code></pre> <p>\u274e 277 - Formatando datas do datetime com strftime no Python</p> <pre><code>    \"\"\"\n      -&gt;  datetime.strtime('DATA', FORMATO)\n      -&gt;  https://docs.python.org/3/library/datetime.html\n    \"\"\"\nfrom datetime import datetime\ndata = datetime(2022, 12, 13, 7, 59, 23)\ndata = datetime.strtime('2022-12-13 07:59:23', '%Y-%m-%d %H:%M:%S')\nprint(data.strftime('%d/%m/%Y'))\nprint(data.strftime('%d/%m/%Y %H:%M'))\nprint(data.strftime('%d/%m/%Y %H:%M:%S'))\nprint(data.strftime('%Y'), data.year)\nprint(data.strftime('%d'), data.day)\nprint(data.strftime('%m'), data.month)\nprint(data.strftime('%H'), data.hour)\nprint(data.strftime('%M'), data.minute)\nprint(data.strftime('%S'), data.second)\n</code></pre> <p>\u274e 278 - Exerc\u00edcio solucionado - calculando as datas e parcelas de um empr\u00e9stimo</p> <p>\ud83d\udccd Resposta Exerc\u00edcio \ud83c\udf93 Resolu\u00e7\u00e3o do Professor</p> <pre><code>    \"\"\"\n    -&gt;  Maria pegou um empr\u00e9stimo de R$ 1.000.000 para realizar o paramento em 5\n          anos.\n    -&gt;  A data em que ela pegou o empr\u00e9stimo foi 20/12/2020 e o vencimento de cada\n          parcela \u00e9 no dia 20 de cada m\u00eas.\n    -&gt;  Crie a data do empr\u00e9stimo\n    -&gt;  Crie da data do final do empr\u00e9stimo\n    -&gt;  Mostre todas as todas de vencimento e o valor de cada parcela\n    \"\"\"\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\nvalor_total = 1_000_000\ndata_emprestimo = datetime(2020, 12, 20)\ndelta_anos = relativedelta(years=5)\ndata_final= data_emprestimo + delta_anos\ndata_parcelas = []\ndata_parcelas = data_emprestimo\nwhile data_parcelas &lt; data_final:\ndata_parcelas.append(data_parcela)\ndata_parcela += relativedelta(months=+1)\nnumero_parcelas = len(data_parcelas)\nvalor_parcelas = valor_total / numero_parcelas\nfor data in data_parcelas\nprint(data.strtime('%d/%m/%Y'), f' R$ {valor_parcela:,.2f}')\nprint()\nprint(f'voc\u00ea pegou R$ {valor_total:,.2f} para pagar'\nf'em {delta_anos.years} anos'\nf'({numero_parcelas} meses) em parcelas de '\nf'R$ {valor_parcelas:,.2f}.'\n)\n</code></pre> <p>\u274e 279 - Usando calender para calend\u00e1rios e datas</p> <pre><code>    \"\"\"\n      -&gt;  https://docs.python.org/3/library/calendar.html\n      -&gt;  calender \u00e9 usado para coisas gen\u00e9ricas de calend\u00e1rios e datas.\n      -&gt;  Com calendar, voc\u00ea pode saber coisas como:\n      -&gt;  Qual o \u00faltimo dia do m\u00eas (ex.: monthrange)\n      -&gt;  Qual o nome e n\u00famero do dia de determinada data (ex.: weekday)\n      -&gt;  Criar um calend\u00e1rio em si (ex.: monthcalendar)\n      -&gt;  Trabalhar com coisas espec\u00edficas de calend\u00e1rio (ex.: calendar, month)\n      -&gt;  Por padr\u00e3o dia da semana come\u00e7a em 0 at\u00e9 6\n      -&gt;  0 = segunda-feira | 6 = domingo \n    \"\"\"\nimport calendar\nprint(calendar.calendar(2022))\nprint(calendar.calendar(2022, 12))\nnumero_primeiro_dia, ultimo_dia = calendar.monthrange(2022, 12)\nprint(list(enumerate(calendar(day_name)))\nprint(calendar.day_name[numero_primero_dia])\nprint(calendar.day_name[calendar.weekday(2022, 12, ultimo_dia)])\nfor week in calendar.monthcalendar(2022, 12)\nfor day in week\nif day == 0\ncontinue\nprint(day)\n</code></pre> <p>\u274e 280 - locale para internacionaliza\u00e7\u00e3o (tradu\u00e7\u00e3o)</p> <pre><code>    \"\"\"\n      -&gt;  https://docs.python.org/3/library/locale.html\n      -&gt;  https://learn.microsoft.com/fr-fr/powershell/module/international/get-winsystemlocale?view=windowsserver2022-ps&amp;viewFallbackFrom=win10-ps\n      getlocale()\n      Windows\n      Get-WinSystemLocale\n      Unix\n      locale - a\n    \"\"\"\nimport calendar\nimport locale\nlocale.setlocale(locale.LOC_ALL, ''\nprint(calendar.calendar(2022))\n</code></pre> <p>\u274e 281 - O m\u00f3dulo os para intera\u00e7\u00e3o com o sistema</p> <pre><code>    \"\"\"\n      -&gt;  Doc: https://docs.python.org/3/library/os.html\n      -&gt;  O m\u00f3dulo os fornece fun\u00e7\u00f5es para interagir com o sistema  \n           operacional\n      -&gt;  Por exemplo, o m\u00f3dulo os.path cont\u00e9m fun\u00e7\u00f5es para trabalhar com \n            caminhos de arquivos e a fun\u00e7\u00e3o os.listdir() pode ser usada\n            para listar arquivos em um diret\u00f3rio. O m\u00e9todo os.system()\n            permite executar comandos do sistema operacional a partir do\n            seu c\u00f3digo python.\n      -&gt;  Windows 11 (Powershell), Linux, Mac = clear\n      -&gt;  Windows (antigo, cmd) = cls\n    \"\"\"\nimport os \nos.system('clear')\nos.system('echo \"Hello world\"')\nprint('a' * 80)\nprint('a' * 80)\nprint('a' * 80)\nprint('a' * 80)\nprint('a' * 80)\nprint('a' * 80)\n</code></pre> <p>\u274e 282 - os.path trabalha com caminhos em Windows, Linux e Mac</p> <pre><code>    \"\"\"\n      -&gt; Doc: https://docs.python.org/3/library/os.path.html#module-os.path\n      -&gt;  os.path \u00e9 um m\u00f3dulo que fornece fun\u00e7\u00f5es para trabalhar com \n            com caminhos de arquivos em Windows, Mac ou Linux precisar se \n            preocupar com as diferen\u00e7as entre esses sistemas.\n      -&gt;  Exemplos do os.path:\n      -&gt;  os.path.join: junta string em um \u00fanico caminho. Desse modo,\n            os.path.join('pasta_1', 'pasta_2', 'arquivo.txt') retornaria\n            'pasta_1/pasta_2/arquivo.txt' no Linux ou Mac, e \n            'pasta_1\\pasta_2\\arquivo.txt' no Windows\n      -&gt;  os.pth.split: divide um caminho uma tupla (diret\u00f3rio, arquivo)\n      -&gt;  Por exemplo, os.path.split('/home/user/arquivo.txt')            \n            retornaria ('/home/user', 'arquivo.txt').\n      -&gt;  os.path.xists: verifica se um caminho especificado existe.\n      -&gt;  os.path s\u00f3 trabalha com caminhos de arquivos e n\u00e3o faz nenhuma\n            opera\u00e7\u00e3o de entrada/sa\u00edda (I/O) com arquivos em si.\n    \"\"\"\nimport os\ncaminho = os.path.join('Desktop', 'curso', 'arquivo.txt')\n# print(caminho)\ndiretorio, arquivo = os.path.split(caminho)\nnome_arquivo, arquivo = os.path.splitext(arquivo)\n# print(nome_arquivo, extensao_arquivo)\n# print(os.path.exists('Users/luizotavio/Desktop/curso-python-rep'))\n# print(os.path.abspath('.'))\nprint(caminho)\nprint(os.path.basename(caminho))\nprint(os.path.basename(diretorio))\nprint(os.path.dirname(caminho))\n</code></pre> <p>\u274e 283 - os.listdir para navegar em caminhos</p> <pre><code>    \"\"\"\n      -&gt;  /Users/luizotavio/Desktop/EXEMPLO\n      -&gt;  c: \\Users\\luizotavio\\Desktop\\\n      -&gt;  caminho = r'C:\\\\Users\\\\luizotavio\\\\Desktop\\\\EXEMPLO'\n    \"\"\"\nimport os\ncaminho = os.path.join('/Users', 'luizotavio', 'Desktop', 'EXEMPLO')\nfor pasta in os.listdir(caminho):\ncaminho_completo_pasta = os.path.join(caminho, pasta)\nprint(pasta)\nif not os.path.isdir(caminho_completo_pasta):\ncontinue\nfor imagem in os listdir(caminho_completo_pasta):\nprint(' ', imagem)\n</code></pre> <p>\u274e 284 - os.walk para navegar de caminhos de forma recursiva</p> <pre><code>    \"\"\"\n      -&gt;  os.walk \u00e9 uma fun\u00e7\u00e3o qie permite percorrer uma estrutura de\n            diret\u00f3rios de maneira recursiva. Ela gera uma sequ\u00eancia de\n            tuplas, onde cada tupla possui tr\u00eas elementos: o diret\u00f3rio\n            atual (root), uma lista de subdiret\u00f3rios (dirs) e uma\n            lista dos arquivos do diret\u00f3rio atual (files).\n    \"\"\"\nimport os \nfrom itertools import count\ncaminho = os.path.join('/Users', 'luizotavio', 'Desktop', 'EXEMPLO')\ncounter = count()\nfor root, dirs, file in os.walk(caminho):\nthe_counter = next(counter)\nprint(the_counter, 'Pasta atual', root)\nfor dir_ in dirs:\nprint(' ', the_counter, 'Dir:', dir_)\nfor file_ in files:\ncaminho_completo_arquivo = os.path.join(root, file_)\nprint(' ', the_count, 'FILE:', caminho_completo_arquivo)\n# N\u00c3O FA\u00c7A ISSO (VAI PAGAR TUDO DA PASTA)\n# os.unlink(caminho_caminho_arquivo)\n</code></pre> <p>\u274e 285 - os.path.getsize e os.stat para dados dos arquivos (tamanho em bytes)</p> <pre><code>    import math \nimport os \nfrom itertools import count\ndef formata_tamanho(tamanho_em_bytes: int, base: int =  1000) -&gt;str:\n\"\"\" Formata um tamanho para o tamanho apropriado\"\"\"\n# Original\n# https://stackoverflow.com/questions/5194057/better-way-to-convert-file-sizes-in-python\n# Se o tamanho for menor ou igual a 0, 0B.\nif tamanho_em_bytes &lt;= 0:\nreturn \"OB\"\n# Tupla com os tamanhos\n#                     0    1     2      3   4     5\nabreviacao_tamanho = \"B\", \"KB\", \"MB\",\"GB\", \"TB\", \"PB\" \n# Logaritmo -&gt;  https://brasilescola.uol.com.br/matematica/logaritmo.htm\n# math.log vai retornar o logaritmo do tamanho_em_bytes\n# com o base (1000 por padr\u00e3o), isso deve bater\n# com o nosso \u00edndice na abrevia\u00e7\u00e3o dos tamanhos\nindice_abreviacao_tamanhos = int(math.log(tamanho_em_bytes, base))\n# Por quanto nosso tamanho deve ser dividido para gerar \n#     o tamanho correto.\npotencia = base ** indice_abreviacao_tamanhos\n#  Nosso tamanho final\ntamanho_final = tamanho_em_bytes / potencia\n# A abrevia\u00e7\u00e3o que queremos\nabreviacao_tamanho = abreviacao_tamanho[indice_abreviacao_tamanhos]\nreturn f'{tamanho_final:.2f} {abreviacao_tamanho}'\ncaminho = os.path.join('/Users', 'luizotavio', 'Desktop', 'EXEMPLO')\ncounter = count()\nfor root, dirs, files in os.walk(caminho):\nthe_counter = next(counter)\nprint(the_counter, 'Pasta atual', root)\nfor dir_ in dirs:\nprint(' ', the_counter, 'Dir:', dir_)\nfor file_ in files:\ncaminho_completo_arquivo = os.path.join(root, file_)\n# tamanho = os.path.getsize(caminho_completo_arquivo)\nstats = os.stat(caminho_completo_arquivo)\ntamanho = stat.st_size\nprint(' ', the_counter, 'FILE:' , file_, formata_tamanho(tamanho))\n# N\u00c3O FA\u00c7A ISSO (VAI PAGAR TUDO DA PASTA)\n# os.unlink(caminho_completo_arquivo)\n</code></pre> <p>\u274e 286 - os + shutil - Copiando arquivos e criando pastas com Python</p> <pre><code>    \"\"\"\n      -&gt;  Vamos copiar arquivos de uma pasta para outra.\n      -&gt;  Copiar -&gt; shutil.copy\n      -&gt;  Apagar -&gt; os.unlink\n      -&gt;  Apagar diret\u00f3rios recursivamente -&gt; shutil.rmtree\n    \"\"\"\nimport os\nimport shutil\nHOME = os.path.expanduser('~')\nDESKTOP = os.path.join(HOME, 'Desktop')\nPASTA_ORIGINAL = os.path.join(DESKTOP, 'EXEMPLO')\nNOVA_PASTA = os.path.join(DESKTOP, 'NOVA_PASTA')\nos.makedir(NOVA_PASTA, exist_os=True)\nfor root, dirs, file in os.walk(PASTA_ORIGINAL):\nfor dir_ in dirs\ncaminho_novo_diretorio = os.path.join(\nroot.replace(PASTA_ORIGINAL, NOVA_PASTA), dir_\n)\nos.makedirs(caminho_novo_diretorio, exist_ok=True)\nfor file in files:\ncaminho_arquivo = os.path.join(root, file)  \ncaminho_novo_arquivo = os.path.join(\nroot.replace(PASTA_ORIGINAL, NOVA_PASTA), file\n)\nshutil.copy(caminho_arquivo, caminho_novo_arquivo)\n</code></pre> <p>\u274e 287 - os + shutil - Apagando, copiando movendo e renomeando pastas com Python</p> <pre><code>    \"\"\"\n    -&gt;  Vamos copiar arquivos de uma pasta para outra.\n    -&gt;  Copiar -&gt; shutil.copy  \n    -&gt;  Copiar \u00c1rvore recursivamente -&gt; shutil.copytree\n    -&gt;  Apagar \u00c1rvore recursivamente -&gt; shutil.rmtree \n          \u2757\u2757CUIDADO AO USAR ISSO\n    -&gt;  Apagar arquivos -&gt;  os.unlink \u2757\u2757CUIDADO AO USAR ISSO\n    -&gt;  Renomear/Mover shutil.move ou os.rename\n    \"\"\"\nimport os \nimport shutil\nHOME = os.path.expanduser('~')\nDESKTOP = os.path.join(HOME, 'Desktop')\nPASTA_ORIGINAL = os.path.join(DESKTOP, 'EXEMPLO')\nNOVA_PASTA = os.path.join(DESKTOP, 'NOVA_PASTA')\nshutil.rmtree(NOVA_PASTA, ignore_errors=True)\nshutil.copytree(PASTA_ORIGINAL, NOVA_PASTA)\n# shutil.move(NOVA_PASTA, NOVA_PASTA + '_EITA')\nshutil.rmtree(NOVA_PASTA, ignore_errors=True)\n...\n</code></pre> <p>\u274e 288 - O que \u00e9 JSON - JavaScrip Object Notation</p> <p>\ud83c\udf80  O que \u00e9 Json?</p> <p>\ud83c\udf80  JSON - JavaScript Object Notation (extens\u00e3o.json)</p> <p>\ud83c\udf80  \u00c9 uma estrutura de dados que permite a serializa\u00e7\u00e3o       de objetos em texto simples para facilitar a transmiss\u00e3o de       dados atrav\u00e9s da rede, APIs web ou outros meios de comunica\u00e7\u00e3o.</p> <p>\ud83c\udf80  O JSON suporta os seguintes tipo de dados:</p> <p>\ud83d\udc49  N\u00fameros: podem ser inteiros ou com ponto flutuante como 42 ou 3.14</p> <p>\ud83d\udc49  Strings: s\u00e3o cadeias de caracteres, como \"Ol\u00e1 mundo!\" ou \"1234\"</p> <p>\ud83d\udc49  \u2757As strings devem ser envolvidas por aspas duplas\u2757</p> <p>\ud83d\udc49  Booleans: s\u00e3o os valores verdadeiro (true) ou falso (false)</p> <p>\ud83d\udc49  Arrays : s\u00e3o listas ordenadas de valores, como [1, 2, 3] ou         [\"Oi\", \"Ol\u00e1\", \"Bom dia\"]</p> <p>\ud83d\udc49  Objetos: s\u00e3o conjuntos de pares nome/valor         -&gt;  {\"nome\": \"Jo\u00e3o\", \"idade\": 30}</p> <p>\ud83d\udc49  null: \u00e9 um valor especial que representa aus\u00eancia de valor</p> <p>\ud83c\udf80  Ao converter Python para JSON:</p> Python JSON dict object list array tuple array str string int number float number True true False false None null <p>Exemplo:</p> <pre><code>  {\n\"title\": \"O Senhor dos An\u00e9is: A Sociedade do Anel\",\n\"original_title\": \"The Lord of the Rings: The Fellowship of the Ring\",\n\"is_movie\": true,\n\"imdb_rating\": 8.8,\n\"year\": 2001,\n\"characters\": [\"Frodo\", \"Sam\", \"Gandalf\", \"Legolas\", \"Boromir\"],\n\"budget\": null\n}\n</code></pre> <p>\u274e 289 - json.dumps e json.laods com strings + typing.TypedDict</p> <pre><code>    import json\n# from pprint import pprint\nfrom typing import TypedDict\nclass Movie(TypeDict):\ntitle: str\noriginal_title: str\nis_movie: bool\nimdb_ranting: float\nyear: int\ncharacters: list[str]\nbudget: None | float\nstring_json = '''\n      {\n        \"title\": \"O Senhor dos An\u00e9is: A Sociedade do Anel\",\n        \"original_title\": \"The Lord of the Rings: The Fellowship of the Ring\",\n        \"is_movie\": true,\n        \"imdb_rating\": 8.8,\n        \"year\": 2001,\n        \"characters\": [\"Frodo\", \"Sam\", \"Gandalf\", \"Legolas\", \"Boromir\"],\n        \"budget\": null\n      }\n      '''\nfilme: Movie = json.loads(string_json)\n# print(filme, width=40)\n# print(filme['title'])\n# print(filme['characters'][0])\n# print(filme['year'])\njson_string = json.dumps(filme, ensure_ascii=False, indent=2)\nprint(json_string)\n</code></pre> <p>\u274e 290 - json.dump e json.laod com arquivos</p> <p>\ud83c\udf80 Usando o exemplo de json da aula  288.</p> <pre><code>    import json\nimport os\nNOME_ARQUIVO = 'aula_177.json'\nCAMINHO_ABSOLUTO_ARQUIVO = os.path.abspath(os.path.join(\nos.path.dirname(__file__), NOME_ARQUIVO\n))\nfilme = {\n'title': 'O Senhor dos An\u00e9is: A Sociedade do Anel',\n'original_title': 'The Lord of the Rings: The Fellowship of the Ring',\n'is_movie': true,\n'imdb_rating': 8.8,\n'year': 2001,\n'characters': ['Frodo', 'Sam', 'Gandalf', 'Legolas', 'Boromir'],\n'budget': None\n}\nwith open(CAMINHO_ABSOLUTO_ARQUIVO, 'w') as arquivo:\njson.dump(filme, arquivo, ensure_ascii=False, indent=2)\nwith open(CAMINHO_ABSOLUTO_ARQUIVO, 'r') as arquivo:\nfilme_do_json = json.load(arquivo)\nprint(filme_do_json)\n</code></pre> <p>\u274e 291 - Manipulando caminhos, pastas e arquivos no Python com pathlib(aula externa)</p> <p>\ud83d\udc49  O conte\u00fado da aula est\u00e1 no video</p> <p></p> <p>\u274e 292 - CSV (Comma Separated Values - Valores separados por v\u00edrgulas)</p> <p>\ud83c\udf80  CSV (Comma Separated Values - Valores separados por v\u00edrgulas)</p> <p>\ud83c\udf80  \u00c9 um formato de arquivo que armazena dados em forma de tabela,       onde cada linha representa um linha da tabela e as colunas s\u00e3o       separadas por v\u00edrgula.</p> <p>\ud83c\udf80  Ele \u00e9 amplamente utilizado para transferir dados entre sistemas       de diferentes plataformas, como por exemplo, para importar       ou exportar dados para uma planilha (google Sheets, Excel,       LibreOffice Calc) ou para um base de dados.</p> <p>\ud83c\udf80  Um arquivo CSV geralmente tem a extens\u00e3o \".csv\" e pode ser aberto       em editor de texto ou uma planilha eletr\u00f4nica.</p> <p>\ud83d\udc49  Um exemplo de um arquivo CSV pode ser:</p> <pre><code>    Nome,Idade,Endere\u00e7o\n    Luiz Ot\u00e1vio,32,\"Av Brasil, 21, Centro\"\n    Jo\u00e3o da Silva,55,\"Rua 22, 44, Nova Era\"\n</code></pre> <p>\ud83c\udf80  A primeira linha do arquivo define os nomes das colunas da,       enquanto as linha seguintes cont\u00eam os valores das linhas,       separadas por v\u00edrgulas.</p> <p>\ud83c\udf80  Regas simples com CSV</p> <p>\ud83d\udc49  1 - Separe os valores das colunas com um delimitador \u00fanico (,)</p> <p>\ud83d\udc49  2 - Cada registro deve estar em uma linha</p> <p>\ud83d\udc49  3 - N\u00e3o deixar linhas ou espa\u00e7os sobrando</p> <p>\ud83d\udc49  4 - Use o caractere de escape (\") quando o delimitador aparecer           no valor.</p> <p>\u274e 293 - csv.reader e csv.DictReader para escrever em CSV</p> <pre><code>    \"\"\"\n      -&gt;  csv.reader e csv.DictReader \n      ---------------------------------------\n      -&gt;  csv.reader l\u00ea o csv em formato de lista\n      -&gt;  csv.DictReader l\u00ea o CSV em formato de dicion\u00e1rio\n    \"\"\"\nimport csv\nfrom pathlib import Path\nCAMINHO_CSV = Path(__file__).parent/'aula_179.csv'\nwith open(CAMINHO_CSV, 'r') as arquivo:\nleitor = csv.DictReader(arquivo)\nfor linha in leitor:\nprint(linha['Nome'], linha['Idade'], linha['Endere\u00e7o'])\n# with open(CAMINHO_CSV, 'r') as arquivo:\n#   leitor = csv.reader(arquivo)\n#   for linha in leitor\n#     print(linha)\n</code></pre> <p>\u274e 294 - csv.writer e csv.DictWrinter para escrever em CSV</p> <pre><code>    \"\"\"\n      -&gt;  csv.reader l\u00ea o csv em formato de lista\n      -&gt;  csv.DictReader l\u00ea o CSV em formato de dicion\u00e1rio\n    \"\"\"\nimport csv \nfrom pathlib import Path\nCAMINHO_CSV = Path(__file__).parent/ 'aula_180.csv'\nlista_clientes = [\n{'Nome': 'Luiz Ot\u00e1vio', 'Endere\u00e7o': 'Av 1, 22' },\n{'Nome': 'Jo\u00e3o Silva', 'Endere\u00e7o': 'R. 2, \"1\"'},\n{'Nome': 'Maria Sol', 'Endere\u00e7o': 'Av B, 3A'},\n]\nwith open(CAMINHO_CSV 'w') as arquivo:\nnome_colunas = Lista_clientes[0].keys()\nescritor = csv.DictWriter(arquivo, fieldnames=nome_colunas)\nescritor.writeheader()\nfor cliente in lista_clientes:\nprint(cliente)\nescritor.writerow(cliente)\n#  lista_clientes = [\n#   [ 'Luiz Ot\u00e1vio',  'Av 1, 22' ],\n#   [ 'Jo\u00e3o Silva',  'R. 2, \"1\"'],\n#   [ 'Maria Sol',  'Av B, 3A'],\n#  ]\n# with open(CAMINHO_CSV 'w') as arquivo:\n#    nome_colunas ['Nome', 'Endere\u00e7o']\n#    escritor = csv.writer(arquivo)\n#    for cliente in lista_clientes:\n#     escritor.writerow(cliente)\n</code></pre> <p>\u274e 295 - random tem geradores de n\u00fameros pseudoaleat\u00f3ros (randrange, randint, uniform)</p> <pre><code>    \"\"\"\n      -&gt;  random tem geradores do n\u00fameros pseudoaleat\u00f3rios\n      -------------------------------------------------------\n      -&gt;  Obs.: n\u00fameros pseudoaleat\u00f3rios significa que os n\u00fameros parecem\n            ser aleat\u00f3rios, mas na verdade n\u00e3o s\u00e3o. Portanto, este m\u00f3dulo\n            n\u00e3o dee ser usando para seguran\u00e7a ou uso criptogr\u00e1fico.\n      -&gt;  O motivo disso \u00e9 que quando temos uma mesma entrada e um mesmo\n            algor\u00edtimo, a sa\u00edda pode ser previs\u00edvel.\n      -&gt;  doc: https://docs.python.org/pt-br/3/library/random.html\n    \"\"\"\nimport random\n# Fun\u00e7\u00f5es:\n# seed\n# -&gt;  Inicializa o gerador de random (por isso \"n\u00fameros \n#       pseudoaleat\u00f3rios\") random.seed(0)\n# random.randrange(in\u00edcio, fim, passo\n# -&gt;  Gera um n\u00famero inteiro aleat\u00f3rio dentro de um intervalo \n#       espec\u00edfico\nr_range = random.randrange(10, 20, 2)\nprint(r_range)\n# random.randint(inicio, fim)\n# -&gt;  Gera um n\u00famero inteiro aleat\u00f3rio dentro de um intervalo \n#     \"sem passo\"\nr_int = random.randint(10, 20)\nprint(r_int)\n# random.uniform(inicio, fim)\n# -&gt;  Gera um n\u00famero flutuante aleat\u00f3rio dentro de um intervalo \n#       \"sem passo\"\nr_uniform = random.uniform(10, 20)\nprint(r_uniform)\n# random.shuffle(SequenciaMut\u00e1vel) -&gt; Embaralha a lista original\nnomes = ['Luiz', 'Maria', 'Helena', 'Joana']\nrandom.shuffle(names)\nprint(names)\n# random.samples(Iter\u00e1vel, k=N)\n# -&gt;  Escolhe elementos do iter\u00e1vel e retorna outro iter\u00e1vel \n#       (n\u00e3o repete)\nnovos_nomes = random.sample(nomes, k=3)\nprint(nomes)\nprint(novos_nomes)\n# random.choices(Iter\u00e1vel, k=N)\n# -&gt; Escolhe elementos do iter\u00e1vel e retorna outro iter\u00e1vel \n#     (repete o valores )\nnovos_nomes = random.choices(nomes, k=3)\nprint(nomes)\nprint(novos_nomes)\n# random.choice(Iter\u00e1vel) -&gt;  Escolhe um elemento do iter\u00e1vel\nprint(random.choice(nomes))\n</code></pre> <p>\u274e 296 - random tem geradores de n\u00fameros pseudoaleat\u00f3ros (sample, choices, seed)</p> <p>\ud83c\udf80 Continua\u00e7\u00e3o da aula anterior</p> <p>\u274e 297 - secrets gera n\u00fameros aleat\u00f3rios seguros</p> <pre><code>    import secrets\n# import as s\n# from secrets import SystemRandom as Sr\n# print(' '.join(\n#     Sr().choices(\n#       s.ascii_letters + s.digits + s.punctuation, k=64)))\n# python -c \"import string as s; from secrets import SystemRandom as Sr;print(' '.join(Sr().choices(s.ascii_letters + punctuation + s.digits,k=12)))\"\nrandom = secrets.SystemRandom()\n# print(secrets.randbelow(100))\n# print(secrets.choice([10, 11, 12]))\n# Fun\u00e7\u00f5es:\n# seed\n#   -&gt;  N\u00c3O FAZ NADA\nrandom.seed(10)\n# random.randrange(in\u00edcio, fim, passo\n# -&gt;  Gera um n\u00famero inteiro aleat\u00f3rio dentro de um intervalo \n#       espec\u00edfico\nr_range = random.randrange(10, 20, 2)\nprint(r_range)\n# random.randint(inicio, fim)\n# -&gt;  Gera um n\u00famero inteiro aleat\u00f3rio dentro de um intervalo \n#     \"sem passo\"\nr_int = random.randint(10, 20)\nprint(r_int)\n# random.uniform(inicio, fim)\n# -&gt;  Gera um n\u00famero flutuante aleat\u00f3rio dentro de um intervalo \n#       \"sem passo\"\nr_uniform = random.uniform(10, 20)\nprint(r_uniform)\n# random.shuffle(SequenciaMut\u00e1vel) -&gt; Embaralha a lista original\nnomes = ['Luiz', 'Maria', 'Helena', 'Joana']\nrandom.shuffle(names)\nprint(names)\n# random.samples(Iter\u00e1vel, k=N)\n# -&gt;  Escolhe elementos do iter\u00e1vel e retorna outro iter\u00e1vel \n#       (n\u00e3o repete)\nnovos_nomes = random.sample(nomes, k=3)\nprint(nomes)\nprint(novos_nomes)\n# random.choices(Iter\u00e1vel, k=N)\n# -&gt; Escolhe elementos do iter\u00e1vel e retorna outro iter\u00e1vel \n#     (repete o valores )\nnovos_nomes = random.choices(nomes, k=3)\nprint(nomes)\nprint(novos_nomes)\n# random.choice(Iter\u00e1vel) -&gt;  Escolhe um elemento do iter\u00e1vel\nprint(random.choice(nomes))\n</code></pre> <p>\u274e 298 - string.template para substituir valores em textos</p> <pre><code>    \"\"\"\n      -&gt;  doc: https://docs.python.org/3/library/string.html#template-strings\n      -&gt;  M\u00e9todos:\n      -&gt;  substitute: substitui mas gera erros se faltar chaves\n      -&gt;  safe_substitute: substitui sem gerar erros\n      -&gt;  Voc\u00ea tamb\u00e9m pode trocar o delimitador e outras coisas cirando\n            uma subclasse de template.\n    \"\"\"\nimport locale\nimport string\nfrom datetime import datetime\nfrom pathlib import Path\nCAMINHO_ARQUIVO = Path(__file__).parent/ 'aula_183.txt'\nlocale.setlocale(locale.LC_ALL, '')\ndef convert_para_brl(numero: float) -&gt; str:\nbrl = 'R$' + locale.currency(numero, symbol=False, grouping=True)\nreturn brl\ndata = datetime(2022, 12, 28)\ndados = dict(\nnome='Jo\u00e3o',\nvalor=converte_para_brl(1_234_456),\ndata=data.strftime('%d/%m/%Y'),\nempresa='O. M.',\ntelefone='+55 (11) 7890-5432'\n)\nclass MyTemplate(string.Template):\ndelimiter = '%'\nwith open(CAMINHO_ARQUIVO, 'r') as arquivo:\ntexto = arquivo.read()\ntemplate = MyTemplate(texto)\nprint(template.sbstitute(dados))\n</code></pre> <p>\u274e 299 - (Parte 1) Vari\u00e1veis de ambiente com os.getenv, os.environ e python-dotenv</p> <pre><code>    \"\"\"\n      -&gt;  Para vari\u00e1veis de ambiente\n      -&gt;  Windows PS: $env:VARIAVEL=\"VALOR\" | dir env:\n      -&gt;  Linux e Mac: export NOME_VARIAVEL=\"VALOR\" | echo $VARIAVEL\n      -&gt;  Para obter o valor das vari\u00e1veis de ambiente\n      -&gt;  os.getenv ou os.environ['VARIAVEL']\n      -&gt;  Para configurar vari\u00e1veis de ambiente\n      -&gt;  os.environ['VARIAVEL'] = 'valor'\n      -&gt;  Ou usando python-dotenv e o arquivo .env\n      -&gt;  pip install python-dotenv\n      -&gt;  from dotenv import load_dotenv\n      -&gt;  laod_dotenv()\n      -&gt;  https://pypi.org/project/python-dotenv/\n      -&gt;  OBS.: sempre lembre-se de criar um .env-example\n    \"\"\"\nimport os \nfrom dotenv import load_dotenv # type: ignore\nlaod_dotenv()\n# print(os.environ)\nprint(os.getenv('BD_PASSWORD'))\n</code></pre> <p>\u274e 300 - (Parte 2) Vari\u00e1veis de ambiente com os.getenv, os.environ e python-dotenv(.env)</p> <p>\ud83c\udf80  Continua\u00e7\u00e3o do tema anterior</p> <p>\u274e 301 - python-dotenv explica\u00e7\u00e3o simples em texto</p> <p>\ud83c\udf80  <code>python-dotenv</code> \u00e9 uma biblioteca Python que permite que voc\u00ea fa\u00e7a       uso de arquivos de configura\u00e7\u00e3o para armazenar e acessar as suas       vari\u00e1veis de ambiente de forma mais f\u00e1cil e segura em seus projetos</p> <p>\ud83c\udf80  As vari\u00e1veis de ambiente s\u00e3o valores que podem ser usados em seu       c\u00f3digo e que podem variar dependendo do ambiente em que o seu       c\u00f3digo est\u00e1 sendo executado (por exemplo, o ambiente de produ\u00e7\u00e3o       ou o ambiente de desenvolvimento).</p> <p>\ud83c\udf80  Para utilizar o <code>python-dotenv</code>, basta instal\u00e1-lo com p pip e, em       seguida, adicionar um arquivo chamando .env na raiz do seu projeto</p> <pre><code>  # Ative seu ambiente virtual\npip install python-dotenv # ou\npoetry add python-dotenv </code></pre> <p>\ud83c\udf80  Esse arquivo deve conter as suas vari\u00e1veis de ambiente e seguir       o seguinte formato:</p> <pre><code># .env\n\nVARIAVEL_DE_AMBIENTE_1=valor\nVARIAVEL_DE_AMBIENTE_2=valor\nVARIAVEL_DE_AMBIENTE_3=valor\n</code></pre> <p>\ud83c\udf80  Em seu c\u00f3digo, voc\u00ea pode acessar essas vari\u00e1veis usando o       m\u00f3dulo os e a fun\u00e7\u00e3o <code>os.getenv()</code>, por exemplo:</p> <pre><code>   import os\nvalor_da_variavel_1 = os.getenv(\"VARIAVEL_DE_AMBIENTE_1\")\n</code></pre> <p>\ud83c\udf80  O <code>python-dotenv</code> funciona lendo o arquivo <code>.env</code> e adicionando as       vari\u00e1veis de ambiente ao ambiente do sistema operacional, de forma       que elas fiquem dispon\u00edveis para seu c\u00f3digo usando a fun\u00e7\u00e3o       <code>os.getenv()</code>.</p> <p>\ud83c\udf80  Isso \u00e9 \u00fatil, por exemplo, para n\u00e3o expor senhas ou outras informa\u00e7\u00f5es       confidenciais em seu c\u00f3digo ou em reposit\u00f3rios de c\u00f3digos       compartilhados, pois o arquivo <code>.env</code> pode ser adicionado ao       <code>.gitignore</code> para n\u00e3o incluir nos commits. Crie um .env-example       para exemplificar como usar o seu programa com valores fict\u00edcios.</p> <p>\ud83c\udf80  Al\u00e9m disso, o <code>python-dotenv</code> tamb\u00e9m permite que voc\u00ea use um arquivo       <code>.env</code> para armazenar valores de configura\u00e7\u00e3o espec\u00edficos de cada       ambiente, o que pode ser \u00fatil quando voc\u00ea estiver trabalhando em       um projeto com diferentes ambientes de desenvolvimento, teste e       produ\u00e7\u00e3o.</p> <p>\ud83d\udc49  doc: https://pypi.org/project/python-dotenv/</p> <p>\u274e 302 - Configurando o SMTP e senhas de apps no GMAIL para enviar e-mails com Python</p> <p>\ud83d\udc49  o exemplo est\u00e1 no link abaixo</p> <p></p> <p>\u274e 303 - Enviando E-mails SMTP com Python</p> <p>\ud83c\udf80  a aplica\u00e7\u00e3o foi desenvolvida na aula anterior</p> <p>\u274e 304 - (Parte 1) ZIP - Compactando Descompactando arquivos com zipfile.ZipFile</p> <pre><code>    import os\nimport Shutil\nfrom pathlib import Path\nfrom zipfile import ZipFile\n# Caminhos\nCAMINHO_RAIZ = Path(__file__).parent\nCAMINHO_ZIP_DIR = CAMINHO_RAIZ/'aula_186_diretorio_zip'\nCAMINHO_COMPACTADO = CAMINHO_RAIZ/'aula_186_diretorio.zip'\nCAMINHO_DESCOMPACTADO = CAMINHO_RAIZ/'aula_186_descompactado'\nshutil.rmtree(CAMINHO_ZIP_DIR, ignore_errors=True)\nPath.unlink(CAMINHO_COMPACTADO, missing_ok=True)\nshutil.rmtree(str(CAMINHO_COMPACTADO).replace('.zip', ''),ignore_errors=True) \nshutil.rmtree(CAMINHO_DESCOMPACTADO, ignore_errors=True)\n# raise Exception()\n# Cria o diret\u00f3rio para a aula\nCAMINHO_ZIP_DIR.mkdir(exist_ok=True)\ndef criar_aquivos(qtd: int, zip_dir: Path):\nfor i in range(qtd):\ntexto = 'arquivo_%s' % i\nwith open(zip_dir / f'{texto}.txt', 'w') as arquivo:\narquivo.write(text)\ncriar_arquivo(10,CAMINHO_ZIP_DIR)\n</code></pre> <p>\u274e 305 - (Parte 2) ZIP - Compactando Descompactando arquivos com zipfile.ZipFile</p> <pre><code>    ...\nwith zipFile(CAMINHO_COMPACTADO, 'w') as zip:\nfor root, dirs, files in os.walk(CAMINHO_ZIP_DIR):\nfor file in files:\n# print(file)\nzip.write(os.path.join(root,file), file)\n# lendo arquivos de um zip\nwith Zipfile(CAMINHO_COMPACTADO, 'r') s zip:\nfor arquivo in zip.namelist()\nprint(arquivo)\n# Extraindo arquivo de um zip\nwith ZipFile(caminho),'r' as zip:\nzip.extractall(CAMINHO_DESCOMPACTADO)\n</code></pre> <p>\u274e 306 - sys.argv - Executando arquivos com argumentos no sistema</p> <pre><code>    import sys\nargumentos = sys.argv\nqtd_argumentos = len(argumentos)\nif qtd_argumentos &lt;= 1:\nprint('Voc\u00ea n\u00e3o passou argumentos')\nelse:\ntry:\nprint(f'Voc\u00ea passou os argumentos {argumentos[1:]}')\nprint(f'Fa\u00e7a alguma coisa com {argumentos[1]}')\nprint(f'Fa\u00e7a outra coisa com {argumentos[2]}')\nexcept IndexError:\nprint('Faltam Argumentos')\n</code></pre> <p>\u274e 307 - argparse.ArgumentParser para argumentos mais complexos</p> <pre><code>    \"\"\"\n      -&gt;  Tutorial Oficial:\n      -&gt;  https://docs.python.org/pt-br/3/howto/argparse.html\n    \"\"\"\nfrom argparse import ArgumentParser\nparser = ArgumentParser()\nparser.add_argument(\n'-b', '--basic',\nhelp='Mostra \"Ol\u00e1 mundo na tela\"',\n# type=str, # Tipo do argumento\nmetavar='STRING',\n# default='Ol\u00e1 mundo', # valor padr\u00e3o\nrequired=False,\naction='append', # Recebe o argumento mais de uma vez\n# nargs='+', Recebe mais de um valor\n)\nparser.add_argument(\n'-v', '--verbose',\nhelp='Mostra logs',\naction='store_true'\n)\nargs = parser.parse_args()\nif args.basic is None:\nprint('Voc\u00ea n\u00e3o passou o valor de b.')\nprint(args.basic)\nelse:\nprint('O valor de basic:', args.basic)\nprint(ags.verbose)\n</code></pre> <p>\u274e 308 - (Parte 1) B\u00e1sico do protocolo HTTP (HyperText Transfer Protocol)</p> <p>\ud83c\udf80  HTTP (HyperText Transfer Protocol) \u00e9 um protocolo usado para enviar e       receber dados na Internet. Ele funciona no modo cliente/servidor, onde       o cliente (seu navegador, por exemplo) faz uma requisi\u00e7\u00e3o ao servidor       (site, por exemplo), que responde com os dados adequados.</p> <p>\ud83c\udf80  A mensagem de requisi\u00e7\u00e3o do cliente deve incluir dados como:</p> <p>\ud83d\udc49  O m\u00e9todo HTTP</p> <p>\ud83d\udd31  leitura (safe) - GET, HEAD (cabe\u00e7alho), OPTIONS (m\u00e9todos suportados)</p> <p>\ud83d\udd31  escrita - POST, PUT (substitui), PATCH (atualiza\u00e7\u00e3o), DELETE</p> <p>\ud83d\udc49  O endere\u00e7o do recurso a ser acessado (/users/)</p> <p>\ud83d\udc49  Os cabe\u00e7alhos HTTP (Content-Type, Authorization)</p> <p>\ud83d\udc49  O Corpo da mensagem (caso necess\u00e1rio, de acordo com o m\u00e9todo HTTP)</p> <p>\ud83c\udf80  A mensagem de resposta do servidor deve incluir dados como:</p> <p>\ud83d\udc49 c\u00f3digo de status HTTP (200 success, 404 Not found, 301 Moved Parmanently)</p> <p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Status</p> <p>\ud83d\udc49  Os cabe\u00e7alhos HTTP (Content-Type, Accept)</p> <p>\ud83d\udc49  O corpo da mensagem (Pode estar em vazio em alguns casos)</p> <p>\u274e 309 - (Parte 2) B\u00e1sico do protocolo HTTP (HyperText Transfer Protocol)</p> <p>\ud83c\udf80 Continua\u00e7\u00e3o da aula anterior</p> <p>\u274e 310 - http.server - servindo arquivos HTML e CSS via HTTP com um comando Python</p> <p></p> <p>\ud83c\udf80  servir um pagina html com python</p> <p>ports comuns 3333, 8080, 8000, 3000, 3001,443</p> <pre><code>  python -m http.server -d  + o nome da pasta que esta site port </code></pre> <p>\u274e 311 - requests para requisi\u00e7\u00f5es HTTP com Python (entenda request e response)</p> <pre><code>  \"\"\"\n    -&gt;  Tutorial -&gt; https://youtu.be/Qd8JT0bnJGs\n    poetry add requests types-requests\n  \"\"\"\nimport requests\n# http:// -&gt; 80\n# https:// -&gt; 443\nurl = 'http://localhost:3333'\nresponse = requests.get(url)\nprint(response.status_code)\nprint(response.headers)\nprint(response.content)\nprint(response.json())\nprint(response.text)\n</code></pre> <p>\u274e 312 - (Parte 1) Web Scraping com Python usando requests e bs4 BeautifilSuop</p> <p>\ud83c\udf80  Web Scraping \u00e9 o ato de \"raspar a web\" buscando informa\u00e7\u00f5es de forma       automatizada, com determinada linguagem de programa\u00e7\u00e3o, para uso posterior.</p> <p>\ud83c\udf80  O m\u00f3dulo requests consegue carregar dados da Internet para dentro do seu c\u00f3digo.       J\u00e1 o bs4.BeautifilSuop \u00e9 respons\u00e1vel por interpretar os dados HTML em forma de       objetos Python para facilitar a vida do desenvolvedor.</p> <p>\ud83c\udf80  Doc: https://www.crummy.com/software/BeautifulSoup/bs4/doc.ptbr/</p> <p>\u274e 313 - (Parte 2) Web Scraping com Python usando requests e bs4 BeautifilSuop</p> <p>\ud83c\udf80  continua\u00e7\u00e3o da aula anterior</p> <p>\u274e 314 - Adicionando \"encoding\" no BeautifilSuop 4 para evitar problemas com caracteres</p> <p>\ud83c\udf80  Uma coisa de ocorrer quando trabalhamos com bs4.BeautifilSuop. \u00e9 problemas com        caracteres. Isso ocorre divido a uma falha na detec\u00e7\u00e3o do encoding.</p> <p>\ud83c\udf80  Caso queria mudar a codifica\u00e7\u00e3o de caracteres, envie os bytes diretamente para       o BeautifilSuop e passe o valor da codifica\u00e7\u00e3o de caracteres no atributo        \"from_encoding\". Exemplo (para utf-8):</p> <pre><code>  BeautifilSuop(response.content, 'html.parser', from_encoding='utf-8')\n</code></pre> <p>\ud83c\udf80 Perceba que troquei \"response.text\" para \"response.content\" para obter os bytes        ao inv\u00e9s da string.</p> <p>\ud83c\udf80  Neste caso, nosso c\u00f3digo completo das aulas anteriores ficaria assim</p> <pre><code>    import re\nimport requests\nfrom bs4 import BeautifulSoup\nurl  = 'http://127.0.0.1:3333/'\nresponse = requests.get(url)\nraw_html = response.text\nparsed_html = BeautifulSoup(raw_html, 'html.parser',  from_encoding='utf-8')\nop_jobs_heading = parsed_html.select_one('#intro &gt; div &gt; div &gt; article &gt; h2')\nif top_jobs_heading is not None:\narticle = top_jobs_heading.parent\nif article is not None:\nfor p in article.select('p'):\nprint(re.sub(r'\\s{1,}', ' ', p.text).strip())\n</code></pre> <p>\ud83c\udf80  Assumindo que a codifica\u00e7\u00e3o de caracteres da \u00e1gina \u00e9 utf-8.</p> <p>\ud83c\udf80  Voc\u00ea pode detectar isso no HTML pela teg meta charset dentro da <code>&lt;head&gt;</code></p> <pre><code>  &lt;meta charset=\"UTF-8\" &gt;\n</code></pre> <p>\u274e 315 - Escolhendo e baixando o chrome drive para o Selenium e Google Chrome</p> <p></p> <p>\ud83c\udf80 foi usado o web driver manager nos projetos</p> <p>\u274e 316 - Selenium - Automatizando tarefas no navegador</p> <p></p> <p>\u274e 317 - Selenium - Selecionando elementos com By, expected_conditions e WebDiverWait</p> <p>\ud83c\udf80 continua\u00e7\u00e3o</p> <p>\u274e 318 - Selenium - Enviando teclas com a classe keys</p> <p>\ud83c\udf80 continua\u00e7\u00e3o</p> <p>\u274e 319 - Selenium - find_element e find_elements By</p> <p>\ud83c\udf80 continua\u00e7\u00e3o</p> <p>\u274e 320 - TEORIA: subprocess para executando programas e comandos externos</p> <p>\ud83c\udf80 Subprocessos \u00e9 um m\u00f3dulo do Python para executar processo em comandos esternos no       seu programa.</p> <p>\ud83c\udf80 O m\u00e9todo mais simples para atingir o objetivo \u00e9 usando <code>subprocess.run()</code></p> <p>\ud83c\udf80  Argumentos princpais de <code>subprocess.run()</code>:</p> <p>\ud83d\udc49  <code>stdout</code>, <code>stdin</code> e <code>stderr</code> -&gt; Redirecionam sa\u00edda, entrada e erros</p> <p>\ud83d\udc49  <code>capture_output</code> -&gt; captura a sa\u00edda e erro para uso prosterior</p> <p>\ud83d\udc49  <code>text</code> -&gt; Se True, entradas e sa\u00edda ser\u00e3o tratadas como text e$$           atomaticamente codifcadas ou decontificadas para o conjunto           de caracteres padr\u00e3o da  plataforma (geralmente UTF-8)</p> <p>\ud83d\udc49  <code>shell</code> -&gt;  Se True, ter\u00e1 acesso ao shell do sistema. Ao usar         <code>shell</code> (True), recomendo enviar o comando e os argumentos juntos.</p> <p>\ud83d\udc49  <code>executeble</code> -&gt; pode ser usado para especificar o caminho do excut\u00e1vel que         iniciar\u00e1 o subprocesso.</p> <p>\ud83c\udf80  Retorno:</p> <p>\ud83d\udc49  <code>stdout</code>, <code>stderr</code>, <code>returncode</code> e <code>args</code></p> <p>Importante:</p> <p>A codifica\u00e7\u00e3o de caracteres do Windows poder diferente. Tente usar CP1252,   CP852, CP850 (outros). Linux e Mac, use utf_8</p> <p>Dicas:</p> <p>Coamando de exemplo: Windows: ping 127.0.0.1 Linux/Mac: ping 127.0.0.1 -c 4</p> <p>\u274e 321 - subprocess para executando programas e comandos externos</p> <pre><code>    import subprocess\nimport sys\n# sys.platform - linux, linux2, darwin, win32\ncmd = ['ls -lah /']\nencoding = 'ttf_8'\nsystem = sys.platform\nif system == 'win32':\ncmd = ['ping', '127.0.0.1']\nencoding = 'cp850'\nproc = subprocess.run(\ncmd,capture_outoug\n)\nprint()\n# print(proc.args)\n# print(proc.stderr)\nprint(proc.stdout)            \n# print(proc.returncode)\n</code></pre> <p>\u274e 322 - Jupter NotebooK - Instala\u00e7\u00e3o e test  </p> <p></p> <p>\u274e 323 - Jupter NotebooK - Exemplos</p> <p></p> <p>\u274e 324 - (Parte 1) Threads - Executando processamentos em paralelo</p> <p></p> <p>\u274e 325 - (Parte 2) Threads - Executando processamentos em paralelo</p> <p>\ud83c\udf80 continua\u00e7\u00e3o</p> <p>\u274e 326 - (Parte 3) Threads - Executando processamentos em paralelo</p> <p>\ud83c\udf80 continua\u00e7\u00e3o</p> <p>\u274e 327 - PyPDF2 para manipular arquivos PDF(instala\u00e7\u00e3o)</p> <p>\ud83c\udf80  PyPDF2 \u00e9 uma biblioteca de manipula\u00e7\u00e3o de arquivos PDF feita em Python puro       gratuita e de c\u00f3digo aberto. Ela \u00e9 capaz de ler, manipular, escrever e unir       dados de arquivos PDF, assim como adicionar atota\u00e7\u00f5es, transformar p\u00e1ginas       extrair texto e imagens, manipular metadados, e mais.</p> <p>\ud83c\udf80  A documenta\u00e7\u00e3o cont\u00e9m todas as informa\u00e7\u00f5es necess\u00e1rias para usar PyPDF2.</p> <p>\ud83c\udf80  link : https://pypdf2.readthedocs.io/en/3.0.0/</p> <p>pip install pypdf2 ou poetry add pypdf2</p> <p>\u274e 328 - PyPDF2 para manipular arquivos PDF(PdfReader)</p> <p></p> <p>\u274e 329 - PyPDF2 para manipular arquivos PDF(PdfWriter)</p> <p>\ud83c\udf80 continua\u00e7\u00e3o</p> <p>\u274e 330 - PyPDF2 para manipular arquivos PDF(PdfMerger)</p> <p>\ud83c\udf80 continua\u00e7\u00e3o</p> <p>\u274e 331 - Deque - Trabalhando com LIFO e FIFO</p> <p>\ud83c\udf80  Lifo e e fifo</p> <p>\ud83c\udf80  pilha e fila</p> <p>\ud83d\udc49  Lifo (Last In First Out)</p> <p>\ud83d\udc49  Pilha (stack)</p> <p>\ud83c\udf80  Significa que o \u00faltimo item a entrar ser\u00e1 o primeiro a sair (list)</p> <p>\ud83c\udf80  Artigo:</p> <p>https://www.otaviomiranda.com.br/2020/pilhas-em-python-com-listas-stack/</p> <p>V\u00eddeo:</p> <p></p> <p>\ud83c\udf80  Para tirar itens do final: O (1) Tempo constante</p> <p>\ud83c\udf80  Para tirar itens do in\u00edcio: O(n) Tempo Linear</p> <pre><code>  from collections impor deque\nlista = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# \u2705 Legal (LIFO com lista)\n#  0  1  2  3  4  5  6  7  8  9\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlista.append(10)\n#  0  1  2  3  4  5  6  7  8  9  10\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlista.append(11)\n#  0  1  2  3  4  5  6  7  8  9  10  11\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nultimo_removido = lista.pop()\n#  0  1  2  3  4  5  6  7  8  9  10\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint('\u00f9tomo:', ultimo_removido)\nprint('Lista:', lista)\n#  0  1  2  3  4  5  6  7  8  9  10\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint()\nlista = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n# \u203c\ufe0f \ud83d\udeab Ruim (FIFO com lista)\n#  0  1  2  3  4  5  6  7  8  9\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlista.insert(0, 10)\n#  0  1  2  3  4  5  6  7  8  9  10\n# [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlista.insert(0, 11)\n#  0    1  2  3  4  5  6  7  8  9  10 11\n# [11, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprimeiro_removido = lista.pop(0) #11\n#  0   1  2  3  4  5  6  7  8  9  10 \n# [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint('Primeiro:', primeiro_removido) #11\nprint('Lista', lista) # [10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint()\n</code></pre> <p>\ud83c\udf80 FIFO (First In First Out)</p> <p>\ud83d\udc49  Filas (queue)</p> <p>\ud83c\udf80  Significa que o primeiro item a entrar ser\u00e1 o primeiro a sair (deque)</p> <p>\ud83c\udf80  Artigo</p> <p>https://www.otaviomiranda.com.br/2020/filas-em-python-com-deque-queue/</p> <p>V\u00eddeo:</p> <p></p> <p>\ud83c\udf80  Para tirar itens do final: O(1) Tempo constante</p> <p>\ud83c\udf80  Para tirar itens do in\u00edcio: O(1) Tempo constante</p> <p>\u2705 legal (FIFI com deque)</p> <pre><code>fila_correta: deque[int] = deque()\nfila_correta.append(3) # adciona no final\nfila_correta.append(4) # adciona no final\nfila_correta.append(5) # adciona no final\nfila_correta.appendleft(2) # adiciona no come\u00e7o\nfila_correta.appendleft(1) # adiciona no come\u00e7o\nfila_correta.appendleft(0) # adiciona no come\u00e7o\nprint(fila_correta) # deque([0, 1, 2, 3, 4, 5])\nfila_correta..pop() #5\nfila_correta..popleft() #0\nprint(fila_correta) # deque([0, 1, 2, 3, 4])\n</code></pre> <p>\u274e 332 - Dica: remove regras de tipos Unkown do linter do VS Code</p> <p>\ud83c\udf80  Se voc\u00ea vem tendo problemas com tipagem <code>Unknown</code> no linter do       VS Code, talvez desativar essas regras possa facilitar sua vida.</p> <p>\ud83c\udf80  Os tipos <code>Unkown</code>, geralmente, v\u00eam de bibliotecas com tipagem parcial,       e eles constumam dar um certo trabalho para solucionar (ou deastivar)</p> <p>[...]</p> <p>\u274e 333 - Openpyxl para arquivos Excel xlsx, xlsm, xltx e xltm</p> <p>\ud83c\udf80  Com essa biblioteca ser\u00e1 poss\u00edvel ler e escrever dados em c\u00e9lulas       espec\u00edficas, formatar c\u00e9lulas, inserir gr\u00e1ficos, criar f\u00f3mulas, adicionar       imagens e outros elementos gr\u00e1ficos \u00e0s suas planilhas. Ela \u00e9 \u00fatil para       automatizar tarefas envolvido planilhas do Excel, como cria\u00e7\u00e3o de relat\u00f3rios       e an\u00e1lise de dados e/ou facilitando a manipula\u00e7\u00e3o de grandes quantidade de        informa\u00e7\u00f5es.</p> <p>\ud83d\udc49 Instala\u00e7\u00e3o necess\u00e1ria pip install openpyxl ou poetry add Openpyxl</p> <p>Mais Informa\u00e7\u00f5es da Biblioteca:</p> <p>Documenta\u00e7\u00e3o: https://openpyxl.readthedocs.io/en/stable/</p> <p>\u274e 334 - Openpyxl - criando um planilha do Excel (Workbook e Worksheet)</p> <p></p> <p>\u274e 335 - Openpyxl - manipulando as planilhas do Workbook</p> <p>\ud83c\udf80 continua\u00e7\u00e3o</p> <p>\u274e 336 - Openpyxl - ler e alterar dados de uma planilha</p> <p>\ud83c\udf80 continua\u00e7\u00e3o</p> <p>\u274e 337 - Pillow: redimensionando imagens com Python</p> <p></p>"},{"location":"conteudo/#secao-7-pyside6-interface-grafica-com-qt-6-no-python-gui-para-desktop","title":"\ud83d\udd1c \ud83d\udd32 Se\u00e7\u00e3o 7: PySide6 - Interface gr\u00e1fica com QT 6 no Python - GUI para Desktop","text":"<p>\u274e 338 - O que \u00e9 PySide6 e o motivo da substitui\u00e7\u00e3o de PyQT5</p> <p>\ud83c\udf80  Essa biblioteca (PySide e PyQT) usam a biblioteca QT.</p> <p>\ud83c\udf80  Qt \u00e9 uma biblioteca usada para a cria\u00e7\u00e3o de GUI (interface gr\u00e1ficado su\u00e1rio)       escrita em C++.</p> <p>\ud83c\udf80  PySide e PyQt conseguem fazer a ponte (binding) entre o Python e a biblioteca       para acria\u00e7\u00e3o de interfaces gr\u00e1ficas sem ter que usar outra        limguagem de programa\u00e7\u00e3o.</p> <p>\ud83c\udf80  PySide6 \u00e9 uma referencia \u00e1 vers\u00e3o 6 do Qt (Qt 6)</p> <p>\ud83c\udf80  Qt \u00e9 multiplataforma, ou seja, deve funcionar em Windows, Linux e Mac.</p> <p>\ud83c\udf80  PySide foi desenvolvido pela The Qt Company (da Nokia), como parte do        projeto Qt for Python project - https://doc.qt.io/qtforpython/</p> <p>\ud83c\udf80  Por usarem a mesma biblioteca (Qt), PySide e PyQt s\u00e3o extremamente       similares, muitas vezes os c\u00f3digos s\u00e3o id\u00eanticos. Portanto, mesmo que voc\u00ea       ainda queira usar PyQt, ser\u00e1 muito simples portar os c\u00f3digos. Muitas vezes       basta trocar o nome de PySide para PyQt e vice-versa.</p> <p>\ud83c\udf80  A maior diferen\u00e7a entre PyQt e PySide est\u00e1 na licen\u00e7a:     \ud83d\udc49  PyQt usa GPL ou commercial e PySide usa LGPL.     \ud83d\udc49  Em resumo: com PySide, voc\u00ea tem a permiss\u00e3o uso da biblioteca para fins           comerciais, sem ter que compartilhar o c\u00f3digo escrito por voc\u00ea para o           p\u00fablico.     \ud83d\udc49  Licen\u00e7as s\u00e3o t\u00f3picos complexos, portanto, se oriente sobre elas           antes de usar qualquer software de terceiros.           https://tldrlegal.com/license/gnu-lesser-general-public-license-v3-(lgpl-3)</p> <p>\u274e 339 - Download dos v\u00eddeos dessa se\u00e7\u00e3o antiga com PyQT5</p> <p></p> <p>\u274e 340 - Instalando o PySide6 no ambiente virtual</p> <p>\ud83d\udc49 Teste a baixo a vers\u00e3o do PySide6.</p> <pre><code>  import PySide6.QtCore\nprint(PySide6.__version__)\nprint(PySide6.QtCore.__version__)\n</code></pre> <p>\u274e 341 - QApplication e QPushButton de PySide6.QtWidgets</p> <p>\ud83c\udf80  QApplication -&gt; O Widget principal da aplica\u00e7\u00e3o</p> <p>\ud83c\udf80  QPushButton -&gt; Um bot\u00e3o</p> <p>\ud83c\udf80  PySide6.QtWidgets -&gt; Onde est\u00e3o os Widgets do PySide6</p> <pre><code>  import sys\nfrom PySide6.QtWidgets import QApplication, QPushButton\napp = QApplication(sys.argv)\nbotao = QPushButton('Texto do bot\u00e3o')\nbotao.setStyleSheet('font-size: 40px;')\nbotao.show()  # adiciona o Widget na hierarquia e exibe a janela\napp.exec()  # o loop da aplica\u00e7\u00e3o\n</code></pre> <p>\u274e 342 - QtWidget e QLayout de PySide6.QtWidgets</p> <p>\ud83c\udf80  QtWidget -&gt; gen\u00e9rico \ud83c\udf80  QLayout -&gt;  um widget de layout que recebe outros widgets \ud83c\udf80  QV(H)BoxLayout -&gt; widgets na horisontal e na veritical \ud83c\udf80  QGridLayout -&gt; coloca o widget em estilo de coodendas de uma tabela</p> <pre><code>  import sys \nfrom PySide6.QtWidgets import QApplication, QGridLayout, QPushButton, QWidget\napp = QApplication(sys.argv) \nbotao = QPushButton('Texto do bot\u00e3o')\nbotao.setStyleSheet('font-size: 80px;')\nbotao_2 = QPushButton('bot\u00e3o 2')\nbotao.setStyleSheet('font-size: 40px;')\nbotao_3 = QPushButton('bot\u00e3o 3')\nbotao.setStyleSheet('font-size: 40px;')\ncentral_widget = QWidget()\nlayout = QGridLayout()\ncentral_widget.setLayout(layout)\nlayout.addWidget(botao, 1, 1, 1, 1)\nlayout.addWidget(botao_2, 1, 2, 1, 1)\nlayout.addWidget(botao_3, 3, 1, 1, 2)\ncentral_widget.show()\napp.exec()\n</code></pre> <p>\u274e 343 - QMainWindw e centralWidget</p> \ud83c\udf80---&gt; QApplication (app) \ud83c\udf80-----&gt; QMainWindow (window-&gt;setCentralWidget) \ud83c\udf80-------&gt; CentralWidget (central_widget) \ud83c\udf80---------&gt; Layout (layout) \ud83c\udf80-----------&gt; Widget 1 (botao_1) \ud83c\udf80-----------&gt; Widget 2 (botao_2) \ud83c\udf80-----------&gt; Widget 3 (botao_3) \ud83c\udf80-----&gt; show \ud83c\udf80--&gt; exec <pre><code>  import sys \nfrom PySide6.QtWidgets import (QApplication, QGridLayout, QMainWindow, QPushButton, QWidget)\napp = QApplication(sys.argv)\nwindow = QMainWindow()\ncentral_widget = QWidget()\nwindow.setCentralWidget(central_widget)\nwindow.setWindowTitle('Minha janela bonita')\nbotao = QPushButton('Texto do bot\u00e3o')\nbotao.setStyleSheet('font-size: 80px;')\nbotao_2 = QPushButton('bot\u00e3o 2')\nbotao.setStyleSheet('font-size: 40px;')\nbotao_3 = QPushButton('bot\u00e3o 3')\nbotao.setStyleSheet('font-size: 40px;')\ncentral_widget = QWidget()\nlayout = QGridLayout()\ncentral_widget.setLayout(layout)\nlayout.addWidget(botao, 1, 1, 1, 1)\nlayout.addWidget(botao_2, 1, 2, 1, 1)\nlayout.addWidget(botao_3, 3, 1, 1, 2)\ndef slot_example(status_bar):\nstatus_bar.showMessage('O meu slot foi executado')\n# status bar\nstatus_bar = window.statusbar()\nstatus_bar.showMessage('Mostar mensagem na barra')\n# menu bar\nmenu = window.menubar()\nprimeiro_menu = menu.addMenu('Primeiro menu')\nprimeira_acao = primeiro_menu.addAction('primeira a\u00e7\u00e3o')\nprimeira_acao.triggered.connect( # type:ignore\nlambda: slot.example(status_bar)\n)\nwindow.show()\napp.exec()\n</code></pre> <p>\u274e 344 - O b\u00e1sico sobre Signal e slots(eventos e documenta\u00e7\u00e3o)</p> <pre><code>  import sys\nfrom PySide6.QCore import Slot\nfrom PySide6.QWidgets import (QApplication, QGridLayout, QMainWindow,\nQPushButton, QUidget)\napp = QApplication(sys.argv)\nwindow = QMainWindow()\ncentral_widget = QWidget()\nWindow.setCentralWidget(central_widget)\nwindow.setWindowTitle('Minha janela bonita')\nbotao_1 = QPushButton('Texto do bot\u00e3o')\nbotao_1-setStyleSheet('font-size: 80px;')\nbotao_2 = QPushButton('bot\u00e3o 2')\nbotao_2-setStyleSheet('font-size: 40px;')\nbotao_3 = QPushButton('bot\u00e3o 3')\nbotao_3-setStyleSheet('font-size: 40px;')\nlayout = QGridLayout()\ncenter_widget.setLayout(layout)\nlayout.addWidget(botao1, 1, 1, 1, 1)  \nlayout.addWidget(botao2, 1, 2, 1, 1)\nlayout.addWidget(botao3, 3, 1, 1, 2)\n@Sot()\ndef slod_example(status_bar):\ndef inner():\nstatus_bar.showMessage('O meu slot fou executado')\nreturn inner\n@slot()\ndef outro_slot(checked):\nprint('Est\u00e1 marcado?', checked)\n@Slot()\ndef terceiro_slot(action):\ndef inner():\noutro_slot(action.isCheckd())\nreturn inner\nstatus_bar = window.statusBar()\nprimeiro_menu = menu.addMenu('Primeiro_menu')\nprimeira_acao = primeiro_menu.addAtion('Primeira a\u00e7\u00e3o')\nprimeira_acao.triggred.connect(slot_example(status_bar)) # type:ignore\nsegunda_action = primeiro_menu.addAction('segunda a\u00e7\u00e3o')\nsegunda_action.setCheckable(True)\nsegunda_action.toggled.connect(outro_slod) # type:ignore\nsegunda_action.havered.connect(terceiro_slot(segunda_action) ) # type:ignore\nbotao_1.clicked.connect(terceiro_slot(sgunda_action)) # type:ignore\nwindow.show()\napp.exec()\n</code></pre> <p>\u274e 345 - Trabalhando com classes e heran\u00e7a com o PySide6</p> <p>Exemplo de heran\u00e7a</p> <pre><code>  import sys\nfrom PySide6.QtCore import Slot\nfrom PySide6.QtWidgets import (QApplication, QGridLayout, QMainWindow\nQPushButton, QWidget)\nclass MyWindow(QMainWindow):\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself.contral_widget = QWidget()\nself.setCentralWidget(self.central_widget)\nself.setWindowTitle('Minha janela bonita')\nself.botao_1 = self.make_button('Texto do bot\u00e3o')\nself.botao_1.clicked.connect(self.segunda_acao_marcada) # type:ignore\nself.botao_2 = self.mke_button('Bot\u00e3o 2')\nself.botao_3 = self.make_buntton('Terceiro')\nself.grid_layout = QGridLayout()\nself.central_widget.setLayout(set.grid_layout)\nself.grid_layout.addWidget(self.botao_1, 1, 1, 1, 1)\nself.grid_layout.addWidget(self.botao_2, 1, 2, 1, 1)\nself.grid_layout.addWidget(self.botao_3, 3, 1, 1, 2)\nself.status_bar =self.statusBar()\nself.status_bar.showMessage('Mostrar mensage na barra')\nself.menu = self.menuBar()\nself.primeiro_menu = self.menu.addMenu('Primeiro menu')\nself.primeira_acao = self.primeiro_menu.addAction('Primeira a\u00e7\u00e3o')\nself.primeira_acao.triggred.connect( # type:ignore\nself.muda_mensagem_da_status_bar)\nself.segunda_action = self.primeiro_menu.addAction('Segunda a\u00e7\u00e3o')\nself.segunda_action.sefCheckable(True)\nself.segunda_action.toggled.connect( # type:ignore\nself.segunda_acao_marcada)\nself.segunda_action.hovered.connect( # type:ignore\nself.segunda_acao_marcada)\n@Slot()\ndef muda_mensagem_da_stauts_bar(self):\nself.stauts_bar.showMessage('O meu slot foi executado')\n@Slot\ndef segunda_acao_marcada(self):\nprint('Est\u00e1 marcado?', self.segunda_action.isCheked())\ndef make_button(self, text):\nbtn = QPushButton(text)\nbtn.setStyleSheet('font-size: 80px;')\nreturn btn\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nwindow = MyWindow()\nwindow.show()\napp.exec()\n</code></pre> <p>\ud83d\udd32 346 - Adicionando PyQT5 em c\u00f3digo Python antigo</p>"},{"location":"conteudo/#secao-8-bases-dados-com-python-sqlite-mysql-e-mariadb","title":"\ud83d\udd1c \ud83d\udd32 Se\u00e7\u00e3o 8 Bases dados com Python - SQLite, MySQL e MariaDB","text":"<p>\ud83d\udd32 347 - SQLite - usando o m\u00f3dulo sqlite3</p> <p>\ud83d\udd32 348 - DB Brower do for SQLite - Windows</p> <p>\ud83d\udd32 349 - DB Brower do for SQLite - Linux</p> <p>\ud83d\udd32 350 - Python sqlite3 + DB Brower for SQLite</p> <p>\ud83d\udd32 351 - Windows - Xampp + MySQL Workbench</p> <p>\ud83d\udd32 352 - Linux - MariaDB Server + MySQL Workbench</p> <p>\ud83d\udd32 353 - CRUD com Pymysql no MySQL e Mariadb Server</p>"},{"location":"conteudo/#secao-9-django-no-python-basico","title":"\ud83d\udd1c \ud83d\udd32 Se\u00e7\u00e3o 9 Django no Python - B\u00e1sico","text":"<p>\ud83d\udd32 354 - Django: Ol\u00e1 mundo!</p> <p>\ud83d\udd32 355 - Atualiza\u00e7\u00e3o 07/2021 avisos</p> <p>\ud83d\udd32 356 - Usando um template HTML em Comum</p> <p>\ud83d\udd32 357 - P\u00e1gina inicial</p> <p>\ud83d\udd32 358 - Arquivos est\u00e1ticos (CSS, JS, IMG...)</p> <p>\ud83d\udd32 359 - Carregando URLs dinamicamente</p> <p>\ud83d\udd32 360 - Incluindo arquivos parciais</p>"},{"location":"conteudo/#secao-10-django-no-python-projeto-agenda","title":"\ud83d\udd1c \ud83d\udd32 Se\u00e7\u00e3o 10 Django no Python Projeto Agenda","text":"<p>\ud83d\udd32 345 - Projeto Agenda - Arquivos</p> <p>\ud83d\udd32 346 - Projeto Agenda - Criando o projeto</p> <p>\ud83d\udd32 347 - Projeto Agenda - Criando os Models</p> <p>\ud83d\udd32 348 - Projeto Agenda - Admin</p> <p>\ud83d\udd32 349 - Projeto Agenda - Exibindo valores nas views</p> <p>\ud83d\udd32 350 - Projeto Agenda - Exibindo um \u00fanico contato</p> <p>\ud83d\udd32 351 - Levantando erros 404</p> <p>\ud83d\udd32 352 - Usando condicionais</p> <p>\ud83d\udd32 353 - Pagina\u00e7\u00e3o</p> <p>\ud83d\udd32 354 - Ordenando e filtrando valores</p> <p>\ud83d\udd32 355 - Campo de pesquisa</p> <p>\ud83d\udd32 356 - Instalando o pillow</p> <p>\ud83d\udd32 357 - Campo de imagem</p> <p>\ud83d\udd32 358 - Mensagens com Django Messages</p> <p>\ud83d\udd32 359 - Backup do projeto</p> <p>\ud83d\udd32 360 - Admin em Portugu\u00eas do Brasil</p> <p>\ud83d\udd32 361 - Sistema de login - Preparando tudo</p> <p>\ud83d\udd32 362 - Cadastro de usu\u00e1rios</p> <p>\ud83d\udd32 363 - Login, Logout e Dashboard</p> <p>\ud83d\udd32 364 - Verificando usu\u00e1rios logados</p> <p>\ud83d\udd32 365 - Formul\u00e1rio para Models</p>"},{"location":"conteudo/#secao-11-django-com-python-primeiro-deploy-linux","title":"\ud83d\udd1c \ud83d\udd32 Se\u00e7\u00e3o 11 Django com Python - Primeiro Deploy (Linux)","text":"<p>\ud83d\udd32 366 - Deploy - Criando um servidor no GCP</p> <p>\ud83d\udd32 367 - Assista essa aula apenas se N\u00c2O conseguindo usar o Google Cloud Platform</p> <p>\ud83d\udd32 368 - Deploy - Preparando o ambiente</p> <p>\ud83d\udd32 369 - Deploy - Linux Movendo os arquivos para o servidor</p> <p>\ud83d\udd32 370 - Deploy - Windows Movendo os arquivos para o servidor</p> <p>\ud83d\udd32 371 - Deploy - Nginx &amp; Gunicorm</p> <p>\ud83d\udd32 372 - Deploy - HTTPS e Seguran\u00e7a</p> <p>\ud83d\udd32 373 - Deploy - Migrando para MySQL / MariaDB</p> <p>\ud83d\udd32 374 - Git e local_settings.py - Editando localmente</p> <p>\ud83d\udd32 375 - Customizando a \u00e1rea Admin</p>"},{"location":"conteudo/#secao-12-django-com-python-projeto-blog","title":"\ud83d\udd1c \ud83d\udd32 Se\u00e7\u00e3o 12 Django com Python - Projeto Blog","text":"<p>\ud83d\udd32 376 - Projeto Blog - Parte 1</p> <p>\ud83d\udd32 377 - Projeto Blog - Parte 2</p> <p>\ud83d\udd32 378 - Atualiza\u00e7\u00e3o Django e Summernote</p> <p>\ud83d\udd32 379 - Projeto Blog - Parte 3</p> <p>\ud83d\udd32 380 - Projeto Blog - Parte 4</p> <p>\ud83d\udd32 381 - Projeto Blog - Parte 5</p> <p>\ud83d\udd32 382 - Projeto Blog - Parte 6</p> <p>\ud83d\udd32 383 - Projeto Blog - Deploy</p> <p>\ud83d\udd32 384 - Criando seus pr\u00f3prios filtros</p> <p>\ud83d\udd32 385 - Select_related - Otimizando as  consultas relacionais</p> <p>\ud83d\udd32 386 - Adicionando campos do formul\u00e1rios manualmente</p> <p>\ud83d\udd32 387 -</p> <p>\ud83d\udd32 388 -</p>"},{"location":"introduction/","title":"\ud83d\udd1c \ud83c\udf93  Introduction","text":""},{"location":"introduction/#o-que-voce-aprendera","title":"O que voc\u00ea aprender\u00e1 \ud83e\ude9f","text":"<p>-\u303d\ufe0fPython 3 b\u00e1sico (com l\u00f3gica de programa\u00e7\u00e3o)</p> <p>-\u303d\ufe0fPython 3 intermedi\u00e1rio (com programa\u00e7\u00e3o procedural e funcional)</p> <p>-\u303d\ufe0fPython 3 avan\u00e7ado (com programa\u00e7\u00e3o orientada a objetos)</p> <p>-\u303d\ufe0fM\u00f3dulos do Python, como PyQT5 para GUI, Selenium e muito mais</p> <p>-\u303d\ufe0fDjango para cria\u00e7\u00e3o de sites e APIs</p> <p>-\u303d\ufe0fBases de dados relacionais: SQLite3, MySQL e MariaDB</p> <p>-\u303d\ufe0fTestes automatizados no Python (com TDD b\u00e1sico)</p> <p>-\u303d\ufe0fPadr\u00f5es de projeto (Design Patterns da GoF)</p> <p>-\u303d\ufe0fExtra: Express\u00f5es Regulares</p> <p>-\u303d\ufe0fExtra: HTML5 e CSS3 (Extra)</p> <p>-\u303d\ufe0fExtra: SQL com MySQL</p> <p>-\u303d\ufe0fExtra: Comandos Unix (Linux, Mac e Windows WSL2)</p> <p>-\u303d\ufe0fCurso com atualiza\u00e7\u00f5es garantidas pelo instrutor</p>"},{"location":"question/","title":"Question\u00e1rio","text":""},{"location":"question/#perguntas-teste-1","title":"Perguntas Teste 1:","text":"<p>Observe o c\u00f3digo abaixo:</p> <pre><code># Imprime um n\u00famero\n# print(123)\n\"\"\"\nEstou adorando Python\n\"\"\"\nprint('Agora sou dev.')\n#\nO que # (cerquilha) faz?\n</code></pre> <ul> <li>( ) Adiciona um item na lista.</li> <li>( ) Imprime um valor na tela.</li> <li>( ) Nada.</li> <li>(x) Faz o interpretador do Python ignorar o que vier ap\u00f3s (comenta).</li> <li>( ) Faz o interpretador do Python exibir o que vier ap\u00f3s (imprimir).</li> </ul> <p>Pergunta 2: Observe o c\u00f3digo abaixo:</p> <pre><code># Imprime um n\u00famero\n# print(123) \n\"\"\" Estou adorando Python \"\"\"\nprint('Agora sou dev.')\n#\n</code></pre> <p>O que voc\u00ea acha que ser\u00e1 exibido na tela?</p> <p>Dica: na d\u00favida, copie e cole o c\u00f3digo no seu editor.</p> <ul> <li>(x) Agora sou dev.</li> <li>( ) Imprimir um n\u00famero.</li> <li>( ) Estou adorando Python.</li> </ul> <p>Pergunta 3: Observe o trecho de c\u00f3digo:</p> <pre><code>\"\"\"\nEstou adorando Python\n\"\"\"\n</code></pre> <p>Escolha a op\u00e7\u00e3o correta!</p> <ul> <li>(x) Isso n\u00e3o \u00e9 um coment\u00e1rio.</li> <li>( ) Isso \u00e9 um coment\u00e1rio.</li> <li>( ) Isso n\u00e3o exite em Python.</li> <li>( ) Nenhuma alternativa est\u00e1 correta.</li> </ul>"},{"location":"question/#perguntas-teste-2","title":"Perguntas Teste 2:","text":"<p>Pergunta 1: Considerando o c\u00f3digo abaixo:</p> <pre><code># Ei!\nPrint('Python')\n</code></pre> <p>O que seria exibido na tela?</p> <ul> <li>( ) Python.</li> <li>( ) Ei!</li> <li>(x) Um erro.</li> </ul> <p>Pergunta 2: Qual c\u00f3digo exibiria o texto a seguir:</p> <ol> <li>Expl\u00edcito-\u00e9-melhor-que-impl\u00edcito.</li> <li>Simples-\u00e9-melhor-que-complexo.</li> </ol> <p>Na d\u00favida, copie e cole o c\u00f3digo no seu editor.</p> <ul> <li>(x)</li> </ul> <pre><code>        print('Expl\u00edcito' , '\u00e9', 'melhor-que-impl\u00edcito.', sep='-')\nprint('Simples', '\u00e9', 'melhor-que-complexo' sep='-' )\n</code></pre> <ul> <li>( )</li> </ul> <pre><code>        print('Expl\u00edcito' , '\u00e9', 'melhor-que-impl\u00edcito.', end='-')\nprint('Simples', '\u00e9', 'melhor-que-complexo' end='-' )\n</code></pre> <ul> <li>( )</li> </ul> <pre><code>        print('Expl\u00edcito' , '\u00e9', 'melhor-que-impl\u00edcito.')\nprint('Simples', '\u00e9', 'melhor-que-complexo')\n</code></pre> <p>Pergunta 3: Todas as linguagens de programa\u00e7\u00e3o t\u00eam caracter\u00edsticas relacionadas com seus tipos de dados. Dentre essas caracter\u00edsticas temos: tipagem est\u00e1tica, tipagem din\u00e2mica, tipagem forte e tipagem fraca.</p> <p>O Python se enquadra em duas dessas caracter\u00edsticas. Quais s\u00e3o elas?</p> <ul> <li>( ) Tipagem est\u00e1tica e din\u00e2mica.</li> <li>( ) Tipagem din\u00e2mica e fraca.</li> <li>(x) Tipagem din\u00e2mica e forte.</li> <li>( ) Tipagem forte e fraca.</li> </ul> <p>Pergunta 4: O que significa tipagem din\u00e2mica?</p> <ul> <li>(x) Que o tipo pode ser atribu\u00eddo dinamicamente pelo Python.</li> <li>( ) Que eu devo informar o tipo ao Python.</li> <li>( ) que o Python n\u00e3o usa tipos.</li> <li>( ) Nenhum alternativa.</li> </ul> <p>Pergunta 5: Strings s\u00e3o textos dentro de aspas. Podemos usar aspas simples ou duplas.</p> <p>O que ser\u00e1 exibido na tela se eu usar a string a seguir:</p> <pre><code>print('Expl\u00edcito', '\u00e9', 'melhor \" do que impl\u00edcito')\n</code></pre> <ul> <li>(x) Expl\u00edcito \u00e9 melhor \" do que impl\u00edcito.</li> <li>( ) Um erro.</li> <li>( ) Nada.</li> </ul>"},{"location":"question/#perguntas-teste-3","title":"Perguntas Teste 3:","text":"<p>Pergunta 1: Qual o tipo de dado dos argumentos dentro da fun\u00e7\u00e3o print a seguir:</p> <pre><code>print(11, 1.1, True)\n</code></pre> <ul> <li>( ) bool, int, float.</li> <li>( ) float, int, bool.</li> <li>(x) int, float, bool.</li> <li>( ) Nenhum alternativa est\u00e1 correta.</li> </ul> <p>Pergunta 2: Qual caractere \u00e9 usado para separar as casas decimais em n\u00fameros de ponto flutuante?</p> <ul> <li>( ) A v\u00edrgula.</li> <li>( ) Espa\u00e7o.</li> <li>( ) Dois pontos.</li> <li>(x) Ponto.</li> <li>( ) Ponto e v\u00edrgula.</li> </ul> <p>Pergunta 3: Considere a frase:</p> <p>Se eu adicionar um sinal de menos (-) \u00e0 esquerda de um n\u00famero sem sinal, em Python esse n\u00famero (que era positivo) se tornaria negativo! Ex.: 10 e -10.</p> <ul> <li>(x) Essa frase est\u00e1 correta.</li> <li>( ) A frase est\u00e1 incorreta.</li> <li>( ) Python n\u00e3o suporta n\u00fameros negativos.</li> <li>( ) Apenas o tipo float pode ser negativo.</li> </ul> <p>Pergunta 4: Qual o valor usado para o tipo de dados boolean verdadeiro em Python?</p> <ul> <li>( ) 1.</li> <li>( ) true.</li> <li>( ) False.</li> <li>(x) True.</li> </ul> <p>Pergunta 5: O tipo de dado bool representa apenas dois valores na programa\u00e7\u00e3o: Sim e N\u00e3o (Verdadeiro e Falso).</p> <p>Express\u00f5es com dois sinais de igual (==), conferem se um valor \u00e9 igual a outro valor e se eles s\u00e3o do mesmo tipo.</p> <p>O que o c\u00f3digo abaixo retornaria?</p> <pre><code>print(10 == 10)\n</code></pre> <ul> <li>(x) True.</li> <li>( ) False.</li> <li>( ) 0.</li> <li>( ) 20.</li> <li>( ) Nenhuma das alternativas.</li> </ul>"},{"location":"question/#perguntas-teste-4","title":"Perguntas Teste 4:","text":"<p>Pergunta 1: Qual caractere \u00e9 utilizado para criar coment\u00e1rios no seu c\u00f3digo?</p> <ul> <li>( ) //</li> <li>(x) #</li> <li>( ) \"\"\"e\"\"\"</li> <li>( ) '''e'''</li> <li>( ) Nenhuma acima</li> </ul> <p>Pergunta 2: O que o c\u00f3digo abaixo faz?</p> <p><code>print('\"J\u00e1 sei!\"')</code></p> <ul> <li>(x) Mostra: \"J\u00e1 sei!\" na tela.</li> <li>( ) Mostra: 'J\u00e1 sei!' na tela.</li> <li>( ) Mostra: J\u00e1 sei! na tela.</li> <li>( ) N\u00e3o faz nada.</li> </ul> <p>Pergunta 3: Quais os tipos de dados do trecho de c\u00f3digo a seguir (na ordem):</p> <pre><code>nome = \"Luiz\"\nidade = 23\ncasado = True\naltura = 1.80\n</code></pre> <ul> <li>( ) str, bool, float, int.</li> <li>(x) str, int, bool, float.</li> <li>( ) str, float, bool, int.</li> <li>( ) int, bool, str, float.</li> <li>( ) Nenhuma op\u00e7\u00e3o.</li> </ul> <p>Pergunta 4: O que o c\u00f3digo abaixo exibe?</p> <pre><code>nome = \"Luiz\"\nidade = 23\nformato = '{1} tem {0} anos'\nprint(formato.format(nome, idade))\n</code></pre> <ul> <li>( ) Luiz tem 23 anos.</li> <li>(x) 23 tem Luiz anos.</li> <li>( ) Formato.format(nome,idade).</li> <li>( ) Nenhuma op\u00e7\u00e3o.</li> </ul> <p>Pergunta 5: O que o c\u00f3digo abaixo exibe?</p> <pre><code>nome = \"Luiz\"\nidade = 23\nformato = '{n} tem {i} anos'\nprint(formato.format(n=nome, i=idade))\n</code></pre> <ul> <li>(x) Luiz tem 23 anos.</li> <li>( ) 23 tem Luiz anos.</li> <li>( ) um erro.</li> <li>( ) Nenhuma op\u00e7\u00e3o.</li> </ul> <p>Pergunta 6: Qual o valor da vari\u00e1vel \"formato\" no c\u00f3digo abaixo?</p> <pre><code>nome = \"Luiz\"\nidade = 23\nformato = f'{nome} tem {idade:.2f} anos'\n</code></pre> <ul> <li>( ) Luiz tem 23 anos.</li> <li>(x) Luiz tem 23.00 anos.</li> <li>( ) Luiz tem 23.0 anos.</li> <li>( ) 23 tem Luiz anos.</li> </ul> <p>Pergunta 7: Qual o resultado da express\u00e3o abaixo (o valor de resultado):</p> <pre><code>numero_1 = 10\nnumero_2 = 20\nresultado = numero_1 * numero_2\nprint(resultado)\n</code></pre> <ul> <li>( ) 100.</li> <li>( ) 30.</li> <li>(x) 200.</li> <li>( ) 2000.</li> </ul> <p>Pergunta 8: Escolha a frase INCORRETA</p> <ul> <li>( ) + fas adi\u00e7\u00e3o para int e float; tamb\u00e9m faz concatena\u00e7\u00e3o de duas strs.</li> <li>( ) * faz a multiplica\u00e7\u00e3o entre int e float; tamb\u00e9m faz a replica\u00e7\u00e3o quando usando um int e str.</li> <li>(x) + faz adi\u00e7\u00e3o para int e float; tamb\u00e9m faz concatena\u00e7\u00e3o entre int e str.</li> <li>( ) / faz a divis\u00e3o e sempre retorna um n\u00famero de ponto flutuante.</li> </ul> <p>Pergunta 9: Como saber se um n\u00famero \u00e9 par ou \u00edmpar?</p> <ul> <li>( ) N\u00e3o tem como. </li> <li>(x) Da pra saber se um n\u00famero \u00e9 divis\u00edvel por 2 usando resto da divis\u00e3o (%).</li> <li>( ) Da pra saber se um n\u00famero \u00e9 divis\u00edvel por 2 usando a fun\u00e7\u00e3o format.</li> <li>( ) Da pra saber se um n\u00famero \u00e9 divis\u00edvel por 2 usando o f - strings.</li> <li>( ) Da pra saber se um n\u00famero \u00e9 divis\u00edvel por 2 usando as chaves { e }.</li> </ul> <p>Pergunta 10: Os operadores % (sinal de porcentagem) e ** (dois asteriscos) fazem:</p> <ul> <li>( ) Porcentagem e potencia\u00e7\u00e3o.</li> <li>(x) Resto da divis\u00e3o e potencia\u00e7\u00e3o.</li> <li>( ) Resto da divis\u00e3o e multiplica\u00e7\u00e3o.</li> <li>( ) Porcentagem e multiplica\u00e7\u00e3o.</li> </ul> <p>Pergunta 11: \u00c9 correto afirmar que Python \u00e9 uma linguagem de tipagem din\u00e2mica e forte?</p> <ul> <li>(x) Sim</li> <li>( ) N\u00e3o</li> <li>( ) Depende</li> </ul>"},{"location":"question/#perguntas-teste-5","title":"Perguntas Teste 5:","text":"<p>Pergunta 1: Considerando o c\u00f3digo a seguir:</p> <pre><code>if 0 and 1:\nprint(True and 1)\n</code></pre> <p>O que ser\u00e1 exibido na sa\u00edda (tela)?</p> <ul> <li>( ) 1.</li> <li>( ) True.</li> <li>(x) Nada.</li> <li>( ) True and 1.</li> </ul> <p>Pergunta 2: Considerando o c\u00f3digo a seguir:</p> <pre><code>if 1 and 1:\nprint(True and 1 and False)\n</code></pre> <p>O que ser\u00e1 exibido na tela?</p> <ul> <li>(x) False.</li> <li>( ) 1.</li> <li>( ) True.</li> </ul>"},{"location":"question/#perguntas-teste-6","title":"Perguntas Teste 6:","text":"<p>Pergunta 1: Qual o resultado do c\u00f3digo abaixo?</p> <pre><code>variavel_a = 1 or 0\nvariavel_b = 0 or 1\nprint(variavel_a, variavel_a)\n</code></pre> <ul> <li>(x) 1 1</li> <li>( ) 0 1</li> <li>( ) 1 0</li> <li>( ) 0 0</li> </ul> <p>Pergunta 2: Qual o resultado do c\u00f3digo abaixo?</p> <pre><code>nome = 'Maria Carmo'\nif ' ' in nome:\nprint(f'O nome {nome} tem espa\u00e7os.')\nelse:\nprint(f'O nome {nome} N\u00c3O tem espa\u00e7os.')\n</code></pre> <p>( ) O nome Maria Carmo N\u00c2O tem espa\u00e7os. (x) O nome Maria Carno tem espa\u00e7os.</p> <p>Pergunta 3: \u00c9 poss\u00edvel adicionar um if dentro de outro fazendo v\u00e1rias condi\u00e7\u00f5es aninhadas. Com isso em mente, o que voc\u00ea acha que o c\u00f3digo abaixo exibe na tela?</p> <pre><code>numero = 10\nif numero &gt; 1:\nif numero &gt; 2:\nif numero &gt; 3:\nprint('N\u00famero maior que 3')\nelse:\nprint('N\u00famero menor que 3')\nelse:\nprint('N\u00famero menor que 2')\nelse:\nprint('N\u00famero menor que 1')\n</code></pre> <p>Na d\u00favida, copie ou escreva o c\u00f3digo em seu editor.</p> <ul> <li>( ) N\u00famero menor que 2.</li> <li>( ) N\u00famero menor que 3.</li> <li>(x) N\u00famero maior que 3.</li> <li>( ) N\u00famero menor que 1.</li> </ul>"},{"location":"question/#perguntas-teste-7","title":"Perguntas Teste 7:","text":"<p>Pergunta 1: Qual o nome dado a um la\u00e7o de repeti\u00e7\u00e3o que roda eternamente na programa\u00e7\u00e3o?</p> <p>Ex.:</p> <pre><code>while True:\n...\n</code></pre> <ul> <li>( ) La\u00e7o de repeti\u00e7\u00e3o.</li> <li>( ) Cowboy's Iasso.</li> <li>(x) Loop infinito.</li> <li>( ) Loop finito.</li> <li>( ) La\u00e7o sem fim.</li> </ul> <p>Pergunta 2: O que o c\u00f3digo abaixo exibiria na tela?</p> <pre><code>start = 0\nend = 10\nwhile start &lt; end:\nprint(start)\nstart += 1\n</code></pre> <ul> <li>(x) 0 1 2 3 4 5 6 7 8 9.</li> <li>( ) 0 1 2 3 4 5 6 7 8 9 10.</li> <li>( ) Um erro.</li> </ul> <p>Pergunta 3: O que o c\u00f3digo abaixo exibiria na tela?</p> <pre><code>start = 0\nend = 10\nwhile start &lt; end:\nstart += 1\nprint(start)\n</code></pre> <ul> <li>( ) 0 1 2 3 4 5 6 7 8 9.</li> <li>( ) Um erro.</li> <li>(x) 0 1 2 3 4 5 6 7 8 9 10.</li> </ul> <p>Pergunta 4: \u00c9 comum usar la\u00e7os de repeti\u00e7\u00e3o aninhados (while dentro de while) para repetir alguma coisa dentro de uma repeti\u00e7\u00e3o existente.</p> <p>Para tabelas, temos linhas e colunas; para cada linha, posso ter n colunas. Por exemplo: para uma tabela de 5 linhas e 5 colunas, isso significa que eu tenho 5 repeti\u00e7\u00f5es de coluna dentro de cada repeti\u00e7\u00e3o de linha.</p> <p></p> <p>Sabendo disso: o que o c\u00f3digo a seguir apresentaria na tela?</p> <pre><code>linhas = 2\ncolunas = 2\nlinha = 1\nwhile linha &lt;= linhas:\ncoluna = 1\nwhile coluna &lt;= colunas:\nprint(linha, coluna)\ncoluna += 1\nlinha += 1\n</code></pre> <ul> <li>(x)     1   1     1   2     2   1     2   2</li> <li>( )     1   1     2   2</li> <li>( )     1   1     1   1</li> </ul>"},{"location":"question/#perguntas-teste-8","title":"Perguntas Teste 8:","text":"<p>Pergunta 1: Qual o trecho inicial usado para criar a fun\u00e7\u00e3o \"falar\"?</p> <ul> <li>(x) def falar.</li> <li>( ) function falar.</li> <li>( ) fala().</li> <li>( ) falar = def</li> <li>( ) Nenhuma das op\u00e7\u00f5es.</li> </ul> <p>Pergunta 2: Por qual motivo devo criar fun\u00e7\u00f5es?</p> <ul> <li>( ) Para criar objetos em v\u00e1rios locais.</li> <li>(x) Para ter a possibilidade de replicar trechos em v\u00e1rios locais diferentes.</li> <li>( ) Para criar a fun\u00e7\u00e3o Print em v\u00e1rios locais diferentes.</li> </ul> <p>Pergunta 3: Em qual momento uma fun\u00e7\u00e3o ser\u00e1 executada?</p> <ul> <li>( ) Ao digitar o nome da fun\u00e7\u00e3o + colchetes.</li> <li>(x) Ao digitar o nome da fun\u00e7\u00e3o + par\u00eanteses.</li> <li>( ) Ao digitar o nome da fun\u00e7\u00e3o + sem par\u00eanteses.</li> </ul> <p>Pergunta 4: Fun\u00e7\u00f5es podem usar par\u00e2metros para receber valores. Par\u00e2metro \u00e9 o nome da \"vari\u00e1vel\" dentro dos par\u00eanteses, argumento \u00e9 o valor passado para o par\u00e2metro no momento da execu\u00e7\u00e3o da fun\u00e7\u00e3o.</p> <p>Sabendo disso, o c\u00f3digo a seguir exibe o que na tela?</p> <pre><code>def multiplo_de(numero, multiplo):\nresultado = numero % multiplo == 0\nprint(f'{numero} \u00e9 m\u00faltiplo de {multiplo}?', end=' ')\nprint(resultado)\nmultiplo_de(16, 8)\nmultiplo_de(15, 3)\nmultiplo_de(10, 2)\n</code></pre> <ul> <li> <p>( )     -&gt;  16 \u00e9 m\u00faltiplo de 8? False     -&gt;  15 \u00e9 m\u00faltiplo de 3? False     -&gt;  10 \u00e9 m\u00faltiplo de 2? False</p> </li> <li> <p>( )     -&gt;  8 \u00e9 m\u00faltiplo de 16? True     -&gt;  3 \u00e9 m\u00faltiplo de 15? True     -&gt;  2 \u00e9 m\u00faltiplo de 10? True</p> </li> <li> <p>(x)     -&gt;  16 \u00e9 m\u00faltiplo de 8? True     -&gt;  15 \u00e9 m\u00faltiplo de 3? True     -&gt;  10 \u00e9 m\u00faltiplo de 2? True</p> </li> </ul>"},{"location":"question/#perguntas-teste-9","title":"Perguntas Teste 9:","text":"<p>Pergunta 1: Quando falamos em argumentos, estamos falando sobre os valores passados para as fun\u00e7\u00f5es no ato da sua execu\u00e7\u00e3o. Existem argumentos nomeados e argumentos posicionais.</p> <p>Argumentos nomeados recebem o nome do par\u00e2metro antes do valor, argumentos posicionais recebem apenas o valor para preencher o par\u00e2metro na ordem.</p> <p>Por qual motivo voc\u00ea usaria argumentos nomeados?</p> <ul> <li>( ) \u00c9 interessante usar argumentos nomeados para manter a ordem no envio de valores para a fun\u00e7\u00e3o.</li> <li>(x) \u00c9 interessante usar argumentos nomeados poder alterar a ordem no envio para a fun\u00e7\u00e3o.</li> <li>( ) \u00c9 m\u00e1 pr\u00e1tica de programa\u00e7\u00e3o usar argumentos nomeados.</li> <li>( ) Nenhuma op\u00e7\u00e3o.</li> </ul> <p>Pergunta 2: A regra \u00e9 clara:</p> <ul> <li>(x) Voc\u00ea n\u00e3o pode enviar argumentos posicionais ap\u00f3s argumentos nomeados.</li> <li>( ) Voc\u00ea n\u00e3o pode enviar argumentos nomeados ap\u00f3s argumentos posicionais.</li> </ul>"},{"location":"question/#perguntas-teste-10","title":"Perguntas Teste 10:","text":"<p>Pergunta 1: \u00c9 poss\u00edvel enviar valores padr\u00e3o para par\u00e2metros de fun\u00e7\u00e3o. Em qual momento esse valor \u00e9 definido?</p> <ul> <li>(x) Na defini\u00e7\u00e3o da fun\u00e7\u00e3o:</li> </ul> <pre><code>    def funcao(a, b, c='Padr\u00e3o'):\n...\n</code></pre> <ul> <li>( ) Na execu\u00e7\u00e3o da fun\u00e7\u00e3o:</li> </ul> <pre><code>    def funcao(a, b, c):\n...\nfuncao(1, 2 c='Padr\u00e3o')\n</code></pre>"},{"location":"question/#perguntas-teste-11","title":"Perguntas Teste 11:","text":"<p>Pergunta 1: Escopo \u00e9 algo muito usado na computa\u00e7\u00e3o para delimitar e proteger determinadas partes do c\u00f3digo. Em Python, o \u00fanico escopo que vimos at\u00e9 ent\u00e3o foi o escopo de fun\u00e7\u00f5es (existem outros).</p> <p>Ao definir vari\u00e1veis e outros nomes dentro de escopo de fun\u00e7\u00f5es em Python, \u00e9 correto afirmar que:</p> <ul> <li>(x) Esses nomes n\u00e3o estar\u00e3o dispon\u00edveis fora do escopo da fun\u00e7\u00e3o (no escopo externo), mas estar\u00e3o dispon\u00edveis em escopos mais internos (outras fun\u00e7\u00f5es internas)</li> <li>( ) Esses nomes n\u00e3o estar\u00e3o dispon\u00edveis fora do escopo da fun\u00e7\u00e3o (no escopo externo), mas n\u00e3o estar\u00e3o dispon\u00edveis em escopos mais internos (outras fun\u00e7\u00f5es internas)</li> <li>( ) Esses nomes n\u00e3o estar\u00e3o dispon\u00edveis fora do escopo da fun\u00e7\u00e3o (no escopo externo), tamb\u00e9m n\u00e3o estar\u00e3o dispon\u00edveis em escopos mais internos (outras fun\u00e7\u00f5es internas).</li> </ul> <p>Pergunta 2: \u00c9 poss\u00edvel alterar vari\u00e1veis de escopo externo em escopo interno?</p> <ul> <li>(x) Sim, com a palavra global.</li> <li>( ) N\u00e3o.</li> </ul> <p>Pergunta 3: Em situa\u00e7\u00f5es normais (sem uso da palavra global), definir duas vari\u00e1veis de mesmo nome em escopo externo e interno:</p> <ul> <li>( ) Gera erros.</li> <li>( ) Define a mesma vari\u00e1veis em todos locais do c\u00f3digo.</li> <li>( ) N\u00e3o \u00e9 poss\u00edvel fazer isso.</li> <li>(x) Define duas vari\u00e1veis de mesmo nome em escopos separados. Uma n\u00e3o afetaria a outra.</li> </ul>"},{"location":"tecnologias/","title":"\ud83d\udd1c   Tecnologias Usadas no Curso","text":""},{"location":"tecnologias/#abaixo-estao-as-tecnologias-usadas-no-curso","title":"Abaixo est\u00e3o as tecnologias usadas no curso","text":""}]}